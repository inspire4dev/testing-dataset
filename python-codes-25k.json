[
	{
	    "instruction": "Help me set up my daily to-do list!",
	    "input": "Setting up your daily to-do list...",
	    "output": "```python\ntasks = []\nwhile True:\n    task = input('Enter a task or type 'done' to finish: ')\n    if task == 'done': break\n    tasks.append(task)\nprint(f'Your to-do list for today: {tasks}')\n```",
	    "text": "Help me set up my daily to-do list! Setting up your daily to-do list... ```python\ntasks = []\nwhile True:\n    task = input('Enter a task or type 'done' to finish: ')\n    if task == 'done': break\n    tasks.append(task)\nprint(f'Your to-do list for today: {tasks}')\n```"
	},
	{
	    "instruction": "Create a shopping list based on my inputs!",
	    "input": "Creating a shopping list...",
	    "output": "```python\nshopping_list = {}\nwhile True:\n    item = input('Enter an item or type 'done' to finish: ')\n    if item == 'done': break\n    quantity = input(f'Enter the quantity for {item}: ')\n    shopping_list[item] = quantity\nprint(f'Your shopping list: {shopping_list}')\n```",
	    "text": "Create a shopping list based on my inputs! Creating a shopping list... ```python\nshopping_list = {}\nwhile True:\n    item = input('Enter an item or type 'done' to finish: ')\n    if item == 'done': break\n    quantity = input(f'Enter the quantity for {item}: ')\n    shopping_list[item] = quantity\nprint(f'Your shopping list: {shopping_list}')\n```"
	},
	{
	    "instruction": "Calculate how much time I spend on my phone per week!",
	    "input": "Calculating weekly phone usage...",
	    "output": "```python\ntotal_time = 0\nfor i in range(1, 8):\n    time = float(input(f'Enter phone usage in hours for day {i}: '))\n    total_time += time\nprint(f'You spend approximately {total_time} hours per week on your phone.')\n```",
	    "text": "Calculate how much time I spend on my phone per week! Calculating weekly phone usage... ```python\ntotal_time = 0\nfor i in range(1, 8):\n    time = float(input(f'Enter phone usage in hours for day {i}: '))\n    total_time += time\nprint(f'You spend approximately {total_time} hours per week on your phone.')\n```"
	},
	{
	    "instruction": "Help me split the bill among my friends!",
	    "input": "Splitting the bill...",
	    "output": "```python\ntotal_bill = float(input('Enter the total bill amount: '))\nfriends_count = int(input('Enter the number of friends: '))\nper_person = total_bill / friends_count\nprint(f'Each person should pay {per_person}')\n```",
	    "text": "Help me split the bill among my friends! Splitting the bill... ```python\ntotal_bill = float(input('Enter the total bill amount: '))\nfriends_count = int(input('Enter the number of friends: '))\nper_person = total_bill / friends_count\nprint(f'Each person should pay {per_person}')\n```"
	},
	{
	    "instruction": "Organize my movie list into genres!",
	    "input": "Organizing your movie list...",
	    "output": "```python\nmovie_list = {}\nwhile True:\n    genre = input('Enter a movie genre or type 'done' to finish: ')\n    if genre == 'done': break\n    movie = input(f'Enter a movie for the {genre} genre: ')\n    movie_list.setdefault(genre, []).append(movie)\nprint(f'Your organized movie list: {movie_list}')\n```",
	    "text": "Organize my movie list into genres! Organizing your movie list... ```python\nmovie_list = {}\nwhile True:\n    genre = input('Enter a movie genre or type 'done' to finish: ')\n    if genre == 'done': break\n    movie = input(f'Enter a movie for the {genre} genre: ')\n    movie_list.setdefault(genre, []).append(movie)\nprint(f'Your organized movie list: {movie_list}')\n```"
	},
	{
	    "instruction": "Calculate the average rating of my book collection!",
	    "input": "Calculating the average rating of your book collection...",
	    "output": "```python\nratings = []\nwhile True:\n    rating = input('Enter a book rating or type 'done' to finish: ')\n    if rating == 'done': break\n    ratings.append(float(rating))\naverage_rating = sum(ratings) / len(ratings)\nprint(f'The average rating of your book collection is {average_rating}')\n```",
	    "text": "Calculate the average rating of my book collection! Calculating the average rating of your book collection... ```python\nratings = []\nwhile True:\n    rating = input('Enter a book rating or type 'done' to finish: ')\n    if rating == 'done': break\n    ratings.append(float(rating))\naverage_rating = sum(ratings) / len(ratings)\nprint(f'The average rating of your book collection is {average_rating}')\n```"
	},
	{
	    "instruction": "Create a playlist based on my mood!",
	    "input": "Creating a playlist...",
	    "output": "```python\nmood = input('What's your mood today? ')\nplaylist = []\nwhile True:\n    song = input(f'Enter a song that fits your {mood} mood or type 'done' to finish: ')\n    if song == 'done': break\n    playlist.append(song)\nprint(f'Your {mood} playlist: {playlist}')\n```",
	    "text": "Create a playlist based on my mood! Creating a playlist... ```python\nmood = input('What's your mood today? ')\nplaylist = []\nwhile True:\n    song = input(f'Enter a song that fits your {mood} mood or type 'done' to finish: ')\n    if song == 'done': break\n    playlist.append(song)\nprint(f'Your {mood} playlist: {playlist}')\n```"
	},
	{
	    "instruction": "Help me find the best deals on my shopping list!",
	    "input": "Finding the best deals...",
	    "output": "```python\nbest_deals = {}\nwhile True:\n    item = input('Enter a shopping item or type 'done' to finish: ')\n    if item == 'done': break\n    price = float(input(f'Enter the best price you found for {item}: '))\n    best_deals[item] = price\nprint(f'The best deals for your shopping list: {best_deals}')\n```",
	    "text": "Help me find the best deals on my shopping list! Finding the best deals... ```python\nbest_deals = {}\nwhile True:\n    item = input('Enter a shopping item or type 'done' to finish: ')\n    if item == 'done': break\n    price = float(input(f'Enter the best price you found for {item}: '))\n    best_deals[item] = price\nprint(f'The best deals for your shopping list: {best_deals}')\n```"
	},
	{
	    "instruction": "Calculate how much I need to save per month for my vacation!",
	    "input": "Calculating monthly savings for your vacation...",
	    "output": "```python\nvacation_cost = float(input('Enter the total cost of your vacation: '))\nmonths_left = int(input('Enter the number of months until your vacation: '))\nmonthly_savings = vacation_cost / months_left\nprint(f'You need to save {monthly_savings} per month for your vacation.')\n```",
	    "text": "Calculate how much I need to save per month for my vacation! Calculating monthly savings for your vacation... ```python\nvacation_cost = float(input('Enter the total cost of your vacation: '))\nmonths_left = int(input('Enter the number of months until your vacation: '))\nmonthly_savings = vacation_cost / months_left\nprint(f'You need to save {monthly_savings} per month for your vacation.')\n```"
	},
	{
	    "instruction": "Determine the most efficient route for my errands!",
	    "input": "Determining the most efficient route...",
	    "output": "```python\nlocations = []\nwhile True:\n    location = input('Enter a location for your errands or type 'done' to finish: ')\n    if location == 'done': break\n    locations.append(location)\n# Assuming first location is the starting point\nprint(f'The most efficient route: {locations[0]} -> {' -> '.join(sorted(locations[1:]))} -> {locations[0]}')\n```",
	    "text": "Determine the most efficient route for my errands! Determining the most efficient route... ```python\nlocations = []\nwhile True:\n    location = input('Enter a location for your errands or type 'done' to finish: ')\n    if location == 'done': break\n    locations.append(location)\n# Assuming first location is the starting point\nprint(f'The most efficient route: {locations[0]} -> {' -> '.join(sorted(locations[1:]))} -> {locations[0]}')\n```"
	},
	{
	    "instruction": "Help me manage my subscriptions!",
	    "input": "Managing your subscriptions...",
	    "output": "```python\nsubscriptions = {}\nwhile True:\n    name = input('Enter the subscription name or type 'done' to finish: ')\n    if name == 'done': break\n    cost = float(input(f'Enter the monthly cost for {name}: '))\n    subscriptions[name] = cost\nprint(f'Your subscriptions: {subscriptions}')\n```",
	    "text": "Help me manage my subscriptions! Managing your subscriptions... ```python\nsubscriptions = {}\nwhile True:\n    name = input('Enter the subscription name or type 'done' to finish: ')\n    if name == 'done': break\n    cost = float(input(f'Enter the monthly cost for {name}: '))\n    subscriptions[name] = cost\nprint(f'Your subscriptions: {subscriptions}')\n```"
	},
	{
	    "instruction": "Create a meal plan for the week!",
	    "input": "Creating a meal plan...",
	    "output": "```python\nmeal_plan = {}\nfor day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']:\n    meal = input(f'What meal would you like to have on {day}? ')\n    meal_plan[day] = meal\nprint(f'Your meal plan for the week: {meal_plan}')\n```",
	    "text": "Create a meal plan for the week! Creating a meal plan... ```python\nmeal_plan = {}\nfor day in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']:\n    meal = input(f'What meal would you like to have on {day}? ')\n    meal_plan[day] = meal\nprint(f'Your meal plan for the week: {meal_plan}')\n```"
	},
	{
	    "instruction": "Calculate my carbon footprint based on my daily activities!",
	    "input": "Calculating your carbon footprint...",
	    "output": "```python\ntransport = input('How do you usually commute (car, bike, walk, public)? ')\nfood = input('Are you a vegetarian, vegan, or omnivore? ')\nelectricity = float(input('Approximate monthly electricity bill: '))\ncarbon_footprint = {'car': 2.4, 'bike': 0.1, 'walk': 0, 'public': 1}[transport] + {'vegetarian': 1, 'vegan': 0.7, 'omnivore': 1.5}[food] + (electricity * 0.001)\nprint(f'Your estimated daily carbon footprint is {carbon_footprint} kg.')\n```",
	    "text": "Calculate my carbon footprint based on my daily activities! Calculating your carbon footprint... ```python\ntransport = input('How do you usually commute (car, bike, walk, public)? ')\nfood = input('Are you a vegetarian, vegan, or omnivore? ')\nelectricity = float(input('Approximate monthly electricity bill: '))\ncarbon_footprint = {'car': 2.4, 'bike': 0.1, 'walk': 0, 'public': 1}[transport] + {'vegetarian': 1, 'vegan': 0.7, 'omnivore': 1.5}[food] + (electricity * 0.001)\nprint(f'Your estimated daily carbon footprint is {carbon_footprint} kg.')\n```"
	},
	{
	    "instruction": "Help me set reminders for my favorite TV shows!",
	    "input": "Setting reminders for TV shows...",
	    "output": "```python\ntv_reminders = {}\nwhile True:\n    show = input('Enter the TV show name or type 'done' to finish: ')\n    if show == 'done': break\n    time = input(f'What time does {show} air? ')\n    tv_reminders[show] = time\nprint(f'Your TV show reminders: {tv_reminders}')\n```",
	    "text": "Help me set reminders for my favorite TV shows! Setting reminders for TV shows... ```python\ntv_reminders = {}\nwhile True:\n    show = input('Enter the TV show name or type 'done' to finish: ')\n    if show == 'done': break\n    time = input(f'What time does {show} air? ')\n    tv_reminders[show] = time\nprint(f'Your TV show reminders: {tv_reminders}')\n```"
	},
	{
	    "instruction": "Assist me in managing my study schedule!",
	    "input": "Managing your study schedule...",
	    "output": "```python\nstudy_schedule = {}\nsubjects = input('Enter the subjects you are studying separated by commas: ').split(', ')\nfor subject in subjects:\n    hours = int(input(f'How many hours do you want to allocate to {subject}? '))\n    study_schedule[subject] = hours\nprint(f'Your study schedule: {study_schedule}')\n```",
	    "text": "Assist me in managing my study schedule! Managing your study schedule... ```python\nstudy_schedule = {}\nsubjects = input('Enter the subjects you are studying separated by commas: ').split(', ')\nfor subject in subjects:\n    hours = int(input(f'How many hours do you want to allocate to {subject}? '))\n    study_schedule[subject] = hours\nprint(f'Your study schedule: {study_schedule}')\n```"
	},
	{
	    "instruction": "Help me calculate the ROI for my investments!",
	    "input": "Calculating the ROI for your investments...",
	    "output": "```python\ninitial_investment = float(input('Enter the initial investment amount: '))\nfinal_value = float(input('Enter the final value of the investment: '))\nroi = ((final_value - initial_investment) / initial_investment) * 100\nprint(f'Your ROI is {roi:.2f}%')\n```",
	    "text": "Help me calculate the ROI for my investments! Calculating the ROI for your investments... ```python\ninitial_investment = float(input('Enter the initial investment amount: '))\nfinal_value = float(input('Enter the final value of the investment: '))\nroi = ((final_value - initial_investment) / initial_investment) * 100\nprint(f'Your ROI is {roi:.2f}%')\n```"
	},
	{
	    "instruction": "Assist me in tracking my water intake!",
	    "input": "Tracking your water intake...",
	    "output": "```python\nwater_intake = 0\nwhile True:\n    intake = input('Enter the amount of water consumed in ml or type 'done' to finish: ')\n    if intake == 'done': break\n    water_intake += int(intake)\nprint(f'Your total water intake today is {water_intake} ml.')\n```",
	    "text": "Assist me in tracking my water intake! Tracking your water intake... ```python\nwater_intake = 0\nwhile True:\n    intake = input('Enter the amount of water consumed in ml or type 'done' to finish: ')\n    if intake == 'done': break\n    water_intake += int(intake)\nprint(f'Your total water intake today is {water_intake} ml.')\n```"
	},
	{
	    "instruction": "Help me find the best time to post on social media based on my followers!",
	    "input": "Finding the best time to post...",
	    "output": "```python\nfollower_timezones = input('Enter the timezones of your followers separated by commas: ').split(', ')\nbest_time = max(set(follower_timezones), key = follower_timezones.count)\nprint(f'The best time to post is when it's afternoon in the {best_time} timezone.')\n```",
	    "text": "Help me find the best time to post on social media based on my followers! Finding the best time to post... ```python\nfollower_timezones = input('Enter the timezones of your followers separated by commas: ').split(', ')\nbest_time = max(set(follower_timezones), key = follower_timezones.count)\nprint(f'The best time to post is when it's afternoon in the {best_time} timezone.')\n```"
	},
	{
	    "instruction": "Assist me in calculating my monthly budget!",
	    "input": "Calculating your monthly budget...",
	    "output": "```python\nincome = float(input('Enter your monthly income: '))\nexpenses = float(input('Enter your total monthly expenses: '))\nnet_income = income - expenses\nprint(f'Your net income for the month is {net_income}')\n```",
	    "text": "Assist me in calculating my monthly budget! Calculating your monthly budget... ```python\nincome = float(input('Enter your monthly income: '))\nexpenses = float(input('Enter your total monthly expenses: '))\nnet_income = income - expenses\nprint(f'Your net income for the month is {net_income}')\n```"
	},
	{
	    "instruction": "Calculate my coffee consumption",
	    "input": "Calculating your coffee consumption...",
	    "output": "```python\ncups_per_day = int(input('How many cups of coffee do you drink daily? '))\nannual_consumption = cups_per_day * 365\nprint(f'You consume {annual_consumption} cups of coffee per year.')\n```",
	    "text": "Calculate my coffee consumption Calculating your coffee consumption... ```python\ncups_per_day = int(input('How many cups of coffee do you drink daily? '))\nannual_consumption = cups_per_day * 365\nprint(f'You consume {annual_consumption} cups of coffee per year.')\n```"
	},
	{
	    "instruction": "Help me balance my diet",
	    "input": "Balancing your diet...",
	    "output": "```python\ncalories = int(input('Enter your daily calorie goal: '))\nprotein = int(input('Enter your daily protein goal in grams: '))\nprint(f'To balance your diet, aim for {calories} calories and {protein}g of protein daily.')\n```",
	    "text": "Help me balance my diet Balancing your diet... ```python\ncalories = int(input('Enter your daily calorie goal: '))\nprotein = int(input('Enter your daily protein goal in grams: '))\nprint(f'To balance your diet, aim for {calories} calories and {protein}g of protein daily.')\n```"
	},
	{
	    "instruction": "Help me set fitness goals",
	    "input": "Setting your fitness goals...",
	    "output": "```python\ncurrent_weight = float(input('Enter your current weight in kg: '))\ntarget_weight = float(input('Enter your target weight in kg: '))\nweeks = int(input('In how many weeks do you want to achieve this? '))\nweekly_goal = (current_weight - target_weight) / weeks\nprint(f'You need to lose {weekly_goal:.2f} kg per week.')\n```",
	    "text": "Help me set fitness goals Setting your fitness goals... ```python\ncurrent_weight = float(input('Enter your current weight in kg: '))\ntarget_weight = float(input('Enter your target weight in kg: '))\nweeks = int(input('In how many weeks do you want to achieve this? '))\nweekly_goal = (current_weight - target_weight) / weeks\nprint(f'You need to lose {weekly_goal:.2f} kg per week.')\n```"
	},
	{
	    "instruction": "Sort my favorite quotes",
	    "input": "Sorting your favorite quotes...",
	    "output": "```python\nquotes = []\nwhile True:\n    quote = input('Enter a favorite quote or type 'done' to finish: ')\n    if quote == 'done': break\n    quotes.append(quote)\nprint(f'Your sorted quotes: {sorted(quotes)}')\n```",
	    "text": "Sort my favorite quotes Sorting your favorite quotes... ```python\nquotes = []\nwhile True:\n    quote = input('Enter a favorite quote or type 'done' to finish: ')\n    if quote == 'done': break\n    quotes.append(quote)\nprint(f'Your sorted quotes: {sorted(quotes)}')\n```"
	},
	{
	    "instruction": "Help me manage my reading list",
	    "input": "Managing your reading list...",
	    "output": "```python\nreading_list = []\nwhile True:\n    book = input('Add a book to your reading list or type 'done' to finish: ')\n    if book == 'done': break\n    reading_list.append(book)\nprint(f'Your reading list: {reading_list}')\n```",
	    "text": "Help me manage my reading list Managing your reading list... ```python\nreading_list = []\nwhile True:\n    book = input('Add a book to your reading list or type 'done' to finish: ')\n    if book == 'done': break\n    reading_list.append(book)\nprint(f'Your reading list: {reading_list}')\n```"
	},
	{
	    "instruction": "Recommend me a movie based on my mood",
	    "input": "Recommending a movie...",
	    "output": "```python\nmood = input('What is your mood? ')\nmood_to_movie = {'happy': 'La La Land', 'sad': 'The Pursuit of Happyness', 'excited': 'Fast & Furious'}\nprint(f'Recommended movie: {mood_to_movie.get(mood, \"Sorry, I don't have a recommendation for that mood.\")}')\n```",
	    "text": "Recommend me a movie based on my mood Recommending a movie... ```python\nmood = input('What is your mood? ')\nmood_to_movie = {'happy': 'La La Land', 'sad': 'The Pursuit of Happyness', 'excited': 'Fast & Furious'}\nprint(f'Recommended movie: {mood_to_movie.get(mood, \"Sorry, I don't have a recommendation for that mood.\")}')\n```"
	},
	{
	    "instruction": "Calculate how much I should tip",
	    "input": "Calculating your tip...",
	    "output": "```python\nbill = float(input('Enter the total bill amount: '))\ntip_percent = int(input('Enter the tip percentage you want to leave: '))\ntip_amount = (bill * tip_percent) / 100\nprint(f'You should leave a tip of {tip_amount:.2f}')\n```",
	    "text": "Calculate how much I should tip Calculating your tip... ```python\nbill = float(input('Enter the total bill amount: '))\ntip_percent = int(input('Enter the tip percentage you want to leave: '))\ntip_amount = (bill * tip_percent) / 100\nprint(f'You should leave a tip of {tip_amount:.2f}')\n```"
	},
	{
	    "instruction": "Find me the best day to book a flight",
	    "input": "Finding the best day...",
	    "output": "```python\ndays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n# Typically, flights are cheaper on Tuesdays and Wednesdays\nbest_days = ['Tuesday', 'Wednesday']\nprint(f'The best days to book a flight are usually {best_days}')\n```",
	    "text": "Find me the best day to book a flight Finding the best day... ```python\ndays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n# Typically, flights are cheaper on Tuesdays and Wednesdays\nbest_days = ['Tuesday', 'Wednesday']\nprint(f'The best days to book a flight are usually {best_days}')\n```"
	},
	{
	    "instruction": "Calculate my screen time",
	    "input": "Calculating your screen time...",
	    "output": "```python\ndaily_screen_time = int(input('Enter your daily screen time in minutes: '))\nweekly_screen_time = daily_screen_time * 7\nprint(f'Your weekly screen time is {weekly_screen_time} minutes.')\n```",
	    "text": "Calculate my screen time Calculating your screen time... ```python\ndaily_screen_time = int(input('Enter your daily screen time in minutes: '))\nweekly_screen_time = daily_screen_time * 7\nprint(f'Your weekly screen time is {weekly_screen_time} minutes.')\n```"
	},
	{
	    "instruction": "Switch to dark mode",
	    "input": "Switching to dark mode...",
	    "output": "```python\nimport os\nos.system('dark-mode on')\n```",
	    "text": "Switch to dark mode Switching to dark mode... ```python\nimport os\nos.system('dark-mode on')\n```"
	},
	{
	    "instruction": "Open a random browser tab from a list of my favorite websites",
	    "input": "Opening a random favorite website...",
	    "output": "```python\nimport random\nimport webbrowser\nwebsites = ['https://www.reddit.com', 'https://www.youtube.com', 'https://www.github.com']\nwebbrowser.open(random.choice(websites))\n```",
	    "text": "Open a random browser tab from a list of my favorite websites Opening a random favorite website... ```python\nimport random\nimport webbrowser\nwebsites = ['https://www.reddit.com', 'https://www.youtube.com', 'https://www.github.com']\nwebbrowser.open(random.choice(websites))\n```"
	},
	{
	    "instruction": "Create a quick text note",
	    "input": "Creating a text note...",
	    "output": "```python\nnote = input('Enter your note: ')\nwith open('quick_note.txt', 'w') as f:\n    f.write(note)\n```",
	    "text": "Create a quick text note Creating a text note... ```python\nnote = input('Enter your note: ')\nwith open('quick_note.txt', 'w') as f:\n    f.write(note)\n```"
	},
	{
	    "instruction": "Restart my PC now!",
	    "input": "Restarting your PC...",
	    "output": "```python\nimport os\nimport time\nreboot_time = input('Please enter the time for reboot in minutes or type now for immediate reboot: ')\nif reboot_time.lower() == 'now':\n    os.system('reboot')\nelse:\n    time.sleep(int(reboot_time) * 60)\n    os.system('reboot')\n```",
	    "text": "Restart my PC now! Restarting your PC... ```python\nimport os\nimport time\nreboot_time = input('Please enter the time for reboot in minutes or type now for immediate reboot: ')\nif reboot_time.lower() == 'now':\n    os.system('reboot')\nelse:\n    time.sleep(int(reboot_time) * 60)\n    os.system('reboot')\n```"
	},
	{
	    "instruction": "Empty my recycle bin",
	    "input": "Emptying your recycle bin...",
	    "output": "```python\nimport os\nos.system('EmptyRecycleBin.exe')\n```",
	    "text": "Empty my recycle bin Emptying your recycle bin... ```python\nimport os\nos.system('EmptyRecycleBin.exe')\n```"
	},
	{
	    "instruction": "Set my desktop background color to black",
	    "input": "Setting desktop background color...",
	    "output": "```python\nimport ctypes\nc_types.windll.user32.SystemParametersInfoW(20, 0, 'C:\\\\path\\\\to\\\\black.jpg', 3)\n```",
	    "text": "Set my desktop background color to black Setting desktop background color... ```python\nimport ctypes\nc_types.windll.user32.SystemParametersInfoW(20, 0, 'C:\\\\path\\\\to\\\\black.jpg', 3)\n```"
	},
	{
	    "instruction": "Show system information",
	    "input": "Showing system information...",
	    "output": "```python\nimport platform\nprint(f'OS: {platform.system()}\nVersion: {platform.version()}\nArchitecture: {platform.architecture()[0]}')\n```",
	    "text": "Show system information Showing system information... ```python\nimport platform\nprint(f'OS: {platform.system()}\nVersion: {platform.version()}\nArchitecture: {platform.architecture()[0]}')\n```"
	},
	{
	    "instruction": "Find the largest file in a given folder",
	    "input": "Finding the largest file...",
	    "output": "```python\nimport os\nfolder = input('Enter folder path: ')\nall_files = [(f, os.path.getsize(os.path.join(folder, f))) for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]\nprint(f'Largest file: {max(all_files, key=lambda x: x[1])[0]}')\n```",
	    "text": "Find the largest file in a given folder Finding the largest file... ```python\nimport os\nfolder = input('Enter folder path: ')\nall_files = [(f, os.path.getsize(os.path.join(folder, f))) for f in os.listdir(folder) if os.path.isfile(os.path.join(folder, f))]\nprint(f'Largest file: {max(all_files, key=lambda x: x[1])[0]}')\n```"
	},
	{
	    "instruction": "Close all instances of a specific application",
	    "input": "Closing all instances...",
	    "output": "```python\nimport os\napp = input('Enter the name of the application to close: ')\nos.system(f'taskkill /F /IM {app}.exe')\n```",
	    "text": "Close all instances of a specific application Closing all instances... ```python\nimport os\napp = input('Enter the name of the application to close: ')\nos.system(f'taskkill /F /IM {app}.exe')\n```"
	},
	{
	    "instruction": "Toggle airplane mode",
	    "input": "Toggling airplane mode...",
	    "output": "```python\nimport os\nos.system('airplane-mode toggle')\n```",
	    "text": "Toggle airplane mode Toggling airplane mode... ```python\nimport os\nos.system('airplane-mode toggle')\n```"
	},
	{
	    "instruction": "Clone a GitHub repository",
	    "input": "",
	    "output": "```python\nimport os\nrepo_url = input('Enter the GitHub repository URL: ')\nos.system(f'git clone {repo_url}')\n```",
	    "text": "Clone a GitHub repository Cloning a GitHub repository... ```python\nimport os\nrepo_url = input('Enter the GitHub repository URL: ')\nos.system(f'git clone {repo_url}')\n```"
	},
	{
	    "instruction": "Create a SQLite database and table",
	    "input": "Creating SQLite database and table...",
	    "output": "```python\nimport sqlite3\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\nc.execute('''CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)''')\nconn.commit()\nconn.close()\n```",
	    "text": "Create a SQLite database and table Creating SQLite database and table... ```python\nimport sqlite3\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\nc.execute('''CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)''')\nconn.commit()\nconn.close()\n```"
	},
	{
	    "instruction": "Update all Python packages",
	    "input": "Updating all Python packages...",
	    "output": "```python\nimport os\nos.system('pip freeze --local | grep -v '^\\-e' | cut -d = -f 1  | xargs -n1 pip install -U')\n```",
	    "text": "Update all Python packages Updating all Python packages... ```python\nimport os\nos.system('pip freeze --local | grep -v '^\\-e' | cut -d = -f 1  | xargs -n1 pip install -U')\n```"
	},
	{
	    "instruction": "Run a Python script at a specific time",
	    "input": "Running a script at a specific time...",
	    "output": "```python\nimport time\nimport os\nfrom datetime import datetime\nrun_time = input('Enter the time to run the script (HH:MM): ')\nwhile True:\n    if datetime.now().strftime('%H:%M') == run_time:\n        os.system('python your_script.py')\n        break\n    time.sleep(60)\n```",
	    "text": "Run a Python script at a specific time Running a script at a specific time... ```python\nimport time\nimport os\nfrom datetime import datetime\nrun_time = input('Enter the time to run the script (HH:MM): ')\nwhile True:\n    if datetime.now().strftime('%H:%M') == run_time:\n        os.system('python your_script.py')\n        break\n    time.sleep(60)\n```"
	},
	{
	    "instruction": "Rename all files in a folder to lowercase",
	    "input": "Renaming all files to lowercase...",
	    "output": "```python\nimport os\nfolder = input('Enter the folder path: ')\nfor filename in os.listdir(folder):\n    os.rename(os.path.join(folder, filename), os.path.join(folder, filename.lower()))\n```",
	    "text": "Rename all files in a folder to lowercase Renaming all files to lowercase... ```python\nimport os\nfolder = input('Enter the folder path: ')\nfor filename in os.listdir(folder):\n    os.rename(os.path.join(folder, filename), os.path.join(folder, filename.lower()))\n```"
	},
	{
	    "instruction": "Count the number of lines in a file",
	    "input": "Counting lines in a file...",
	    "output": "```python\nfilename = input('Enter the filename: ')\nwith open(filename, 'r') as f:\n    line_count = sum(1 for _ in f)\nprint(f'The file has {line_count} lines.')\n```",
	    "text": "Count the number of lines in a file Counting lines in a file... ```python\nfilename = input('Enter the filename: ')\nwith open(filename, 'r') as f:\n    line_count = sum(1 for _ in f)\nprint(f'The file has {line_count} lines.')\n```"
	},
	{
	    "instruction": "List all branches in a Git repository",
	    "input": "Listing all Git branches...",
	    "output": "```python\nimport os\nos.system('git branch')\n```",
	    "text": "List all branches in a Git repository Listing all Git branches... ```python\nimport os\nos.system('git branch')\n```"
	},
	{
	    "instruction": "Create a ZIP archive of a folder",
	    "input": "Creating ZIP archive...",
	    "output": "```python\nimport shutil\nfolder_name = input('Enter the folder name to zip: ')\nshutil.make_archive(folder_name, 'zip', folder_name)\n```",
	    "text": "Create a ZIP archive of a folder Creating ZIP archive... ```python\nimport shutil\nfolder_name = input('Enter the folder name to zip: ')\nshutil.make_archive(folder_name, 'zip', folder_name)\n```"
	},
	{
	    "instruction": "Push changes to a GitHub repository",
	    "input": "Pushing changes to GitHub...",
	    "output": "```python\nimport os\nbranch_name = input('Enter the branch name: ')\ncommit_message = input('Enter the commit message: ')\nos.system(f'git add . && git commit -m \"{commit_message}\" && git push origin {branch_name}')\n```",
	    "text": "Push changes to a GitHub repository Pushing changes to GitHub... ```python\nimport os\nbranch_name = input('Enter the branch name: ')\ncommit_message = input('Enter the commit message: ')\nos.system(f'git add . && git commit -m \"{commit_message}\" && git push origin {branch_name}')\n```"
	},
	{
	    "instruction": "Start a local web server",
	    "input": "Starting a local web server...",
	    "output": "```python\nimport os\nport = input('Enter the port number: ')\nos.system(f'python -m http.server {port}')\n```",
	    "text": "Start a local web server Starting a local web server... ```python\nimport os\nport = input('Enter the port number: ')\nos.system(f'python -m http.server {port}')\n```"
	},
	{
	    "instruction": "Create an HTTP server to share files",
	    "input": "Creating an HTTP file server...",
	    "output": "```python\nimport http.server\nimport socketserver\nPORT = 8000\nHandler = http.server.SimpleHTTPRequestHandler\nwith socketserver.TCPServer(('', PORT), Handler) as httpd:\n    print(f'Serving at port {PORT}')\n    httpd.serve_forever()\n```",
	    "text": "Create an HTTP server to share files Creating an HTTP file server... ```python\nimport http.server\nimport socketserver\nPORT = 8000\nHandler = http.server.SimpleHTTPRequestHandler\nwith socketserver.TCPServer(('', PORT), Handler) as httpd:\n    print(f'Serving at port {PORT}')\n    httpd.serve_forever()\n```"
	},
	{
	    "instruction": "Create a symbolic link",
	    "input": "Creating a symbolic link...",
	    "output": "```python\nimport os\nsrc = input('Enter the source file path: ')\ndest = input('Enter the destination link path: ')\nos.symlink(src, dest)\n```",
	    "text": "Create a symbolic link Creating a symbolic link... ```python\nimport os\nsrc = input('Enter the source file path: ')\ndest = input('Enter the destination link path: ')\nos.symlink(src, dest)\n```"
	},
	{
	    "instruction": "Extract the text content from a webpage",
	    "input": "Extracting text content...",
	    "output": "```python\nimport requests\nfrom bs4 import BeautifulSoup\nurl = input('Enter the URL: ')\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\ntext = soup.stripped_strings\nprint(' '.join(text))\n```",
	    "text": "Extract the text content from a webpage Extracting text content... ```python\nimport requests\nfrom bs4 import BeautifulSoup\nurl = input('Enter the URL: ')\nresponse = requests.get(url)\nsoup = BeautifulSoup(response.content, 'html.parser')\ntext = soup.stripped_strings\nprint(' '.join(text))\n```"
	},
	{
	    "instruction": "Extract all email addresses from a text file",
	    "input": "Extracting email addresses...",
	    "output": "```python\nimport re\nfile_path = input('Enter the text file path: ')\nwith open(file_path, 'r') as f:\n    content = f.read()\nemails = re.findall(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', content)\nprint(emails)\n```",
	    "text": "Extract all email addresses from a text file Extracting email addresses... ```python\nimport re\nfile_path = input('Enter the text file path: ')\nwith open(file_path, 'r') as f:\n    content = f.read()\nemails = re.findall(r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b', content)\nprint(emails)\n```"
	},
	{
	    "instruction": "Check for updates of a specific Python package",
	    "input": "Checking for package updates...",
	    "output": "```python\nimport os\npackage_name = input('Enter the Python package name: ')\nos.system(f'pip search {package_name}')\n```",
	    "text": "Check for updates of a specific Python package Checking for package updates... ```python\nimport os\npackage_name = input('Enter the Python package name: ')\nos.system(f'pip search {package_name}')\n```"
	},
	{
	    "instruction": "Remove trailing whitespaces from a Python file",
	    "input": "Removing trailing whitespaces...",
	    "output": "```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = f.readlines()\n    f.seek(0)\n    for line in lines:\n        f.write(line.rstrip() + '\\n')\n    f.truncate()\n```",
	    "text": "Remove trailing whitespaces from a Python file Removing trailing whitespaces... ```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = f.readlines()\n    f.seek(0)\n    for line in lines:\n        f.write(line.rstrip() + '\\n')\n    f.truncate()\n```"
	},
	{
	    "instruction": "Convert tabs to spaces in a Python file",
	    "input": "Converting tabs to spaces...",
	    "output": "```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    content = f.read().replace('\\t', '    ')\n    f.seek(0)\n    f.write(content)\n    f.truncate()\n```",
	    "text": "Convert tabs to spaces in a Python file Converting tabs to spaces... ```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    content = f.read().replace('\\t', '    ')\n    f.seek(0)\n    f.write(content)\n    f.truncate()\n```"
	},
	{
	    "instruction": "Sort the import statements alphabetically",
	    "input": "Sorting import statements...",
	    "output": "```python\nimport re\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = f.readlines()\n    imports = sorted([line for line in lines if line.startswith('import') or line.startswith('from')])\n    rest = [line for line in lines if not line.startswith('import') and not line.startswith('from')]\n    f.seek(0)\n    f.writelines(imports + rest)\n    f.truncate()\n```",
	    "text": "Sort the import statements alphabetically Sorting import statements... ```python\nimport re\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = f.readlines()\n    imports = sorted([line for line in lines if line.startswith('import') or line.startswith('from')])\n    rest = [line for line in lines if not line.startswith('import') and not line.startswith('from')]\n    f.seek(0)\n    f.writelines(imports + rest)\n    f.truncate()\n```"
	},
	{
	    "instruction": "Break lines longer than 80 characters",
	    "input": "Breaking long lines...",
	    "output": "```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = f.readlines()\n    f.seek(0)\n    for line in lines:\n        if len(line) > 80:\n            parts = [line[i:i+80] for i in range(0, len(line), 80)]\n            f.writelines(parts)\n        else:\n            f.write(line)\n    f.truncate()\n```",
	    "text": "Break lines longer than 80 characters Breaking long lines... ```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = f.readlines()\n    f.seek(0)\n    for line in lines:\n        if len(line) > 80:\n            parts = [line[i:i+80] for i in range(0, len(line), 80)]\n            f.writelines(parts)\n        else:\n            f.write(line)\n    f.truncate()\n```"
	},
	{
	    "instruction": "Convert a Python file to PEP8 standards",
	    "input": "Converting to PEP8 standards...",
	    "output": "```python\nimport os\nfile_path = input('Enter the Python file path: ')\nos.system(f'autopep8 --in-place {file_path}')\n```",
	    "text": "Convert a Python file to PEP8 standards Converting to PEP8 standards... ```python\nimport os\nfile_path = input('Enter the Python file path: ')\nos.system(f'autopep8 --in-place {file_path}')\n```"
	},
	{
	    "instruction": "Add type annotations to function arguments",
	    "input": "Adding type annotations...",
	    "output": "```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = f.readlines()\n    f.seek(0)\n    for line in lines:\n        if 'def ' in line:\n            line = line.replace('(', '(', 1).replace(')', ': Any)', 1)\n        f.write(line)\n    f.truncate()\n```",
	    "text": "Add type annotations to function arguments Adding type annotations... ```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = f.readlines()\n    f.seek(0)\n    for line in lines:\n        if 'def ' in line:\n            line = line.replace('(', '(', 1).replace(')', ': Any)', 1)\n        f.write(line)\n    f.truncate()\n```"
	},
	{
	    "instruction": "Remove all comments from a Python file",
	    "input": "Removing all comments...",
	    "output": "```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = [line for line in f.readlines() if not line.strip().startswith('#')]\n    f.seek(0)\n    f.writelines(lines)\n    f.truncate()\n```",
	    "text": "Remove all comments from a Python file Removing all comments... ```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = [line for line in f.readlines() if not line.strip().startswith('#')]\n    f.seek(0)\n    f.writelines(lines)\n    f.truncate()\n```"
	},
	{
	    "instruction": "Remove all print statements from a Python file",
	    "input": "Removing print statements...",
	    "output": "```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = [line for line in f.readlines() if 'print(' not in line]\n    f.seek(0)\n    f.writelines(lines)\n    f.truncate()\n```",
	    "text": "Remove all print statements from a Python file Removing print statements... ```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = [line for line in f.readlines() if 'print(' not in line]\n    f.seek(0)\n    f.writelines(lines)\n    f.truncate()\n```"
	},
	{
	    "instruction": "Add docstrings to all functions",
	    "input": "Adding docstrings...",
	    "output": "```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = f.readlines()\n    f.seek(0)\n    for line in lines:\n        if 'def ' in line:\n            f.write('\"\"\"Function description.\"\"\"\\n')\n        f.write(line)\n    f.truncate()\n```",
	    "text": "Add docstrings to all functions Adding docstrings... ```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = f.readlines()\n    f.seek(0)\n    for line in lines:\n        if 'def ' in line:\n            f.write('\"\"\"Function description.\"\"\"\\n')\n        f.write(line)\n    f.truncate()\n```"
	},
	{
	    "instruction": "Implement a simple feedforward neural network",
	    "input": "Implementing a feedforward neural network...",
	    "output": "```python\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nclass SimpleNN(nn.Module):\n    def __init__(self):\n        super(SimpleNN, self).__init__()\n        self.fc1 = nn.Linear(10, 5)\n        self.fc2 = nn.Linear(5, 1)\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\nmodel = SimpleNN()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\ncriterion = nn.MSELoss()\n# Training code here\n```",
	    "text": "Implement a simple feedforward neural network Implementing a feedforward neural network... ```python\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nclass SimpleNN(nn.Module):\n    def __init__(self):\n        super(SimpleNN, self).__init__()\n        self.fc1 = nn.Linear(10, 5)\n        self.fc2 = nn.Linear(5, 1)\n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = self.fc2(x)\n        return x\nmodel = SimpleNN()\noptimizer = optim.SGD(model.parameters(), lr=0.01)\ncriterion = nn.MSELoss()\n# Training code here\n```"
	},
	{
	    "instruction": "Implement an advanced feedforward neural network using PyTorch and train it",
	    "input": "Implementing and training an advanced feedforward neural network...",
	    "output": "```python\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\n# Neural Network\nclass AdvancedNN(nn.Module):\n    def __init__(self):\n        super(AdvancedNN, self).__init__()\n        self.fc1 = nn.Linear(10, 128)\n        self.fc2 = nn.Linear(128, 64)\n        self.fc3 = nn.Linear(64, 32)\n        self.fc4 = nn.Linear(32, 1)\n        self.dropout = nn.Dropout(0.2)\n    \n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = self.dropout(x)\n        x = torch.relu(self.fc2(x))\n        x = self.dropout(x)\n        x = torch.relu(self.fc3(x))\n        x = self.fc4(x)\n        return x\n# Initialization\nmodel = AdvancedNN()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\ncriterion = nn.MSELoss()\n# Training\nfor epoch in range(100):\n    for i, data in enumerate(train_loader):\n        inputs, labels = data\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n    print(f'Epoch {epoch+1}, Loss: {loss.item()}')\n```",
	    "text": "Implement an advanced feedforward neural network using PyTorch and train it Implementing and training an advanced feedforward neural network... ```python\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\n# Neural Network\nclass AdvancedNN(nn.Module):\n    def __init__(self):\n        super(AdvancedNN, self).__init__()\n        self.fc1 = nn.Linear(10, 128)\n        self.fc2 = nn.Linear(128, 64)\n        self.fc3 = nn.Linear(64, 32)\n        self.fc4 = nn.Linear(32, 1)\n        self.dropout = nn.Dropout(0.2)\n    \n    def forward(self, x):\n        x = torch.relu(self.fc1(x))\n        x = self.dropout(x)\n        x = torch.relu(self.fc2(x))\n        x = self.dropout(x)\n        x = torch.relu(self.fc3(x))\n        x = self.fc4(x)\n        return x\n# Initialization\nmodel = AdvancedNN()\noptimizer = optim.Adam(model.parameters(), lr=0.001)\ncriterion = nn.MSELoss()\n# Training\nfor epoch in range(100):\n    for i, data in enumerate(train_loader):\n        inputs, labels = data\n        optimizer.zero_grad()\n        outputs = model(inputs)\n        loss = criterion(outputs, labels)\n        loss.backward()\n        optimizer.step()\n    print(f'Epoch {epoch+1}, Loss: {loss.item()}')\n```"
	},
	{
	    "instruction": "Visualize the activations of a neural network layer",
	    "input": "Visualizing activations...",
	    "output": "```python\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model\nmodel = tf.keras.models.load_model('my_model.h5')\nlayer_outputs = [layer.output for layer in model.layers]\nactivation_model = Model(inputs=model.input, outputs=layer_outputs)\nactivations = activation_model.predict(input_data)\nplt.matshow(activations[0][0, :, :, 4], cmap='viridis')\n```",
	    "text": "Visualize the activations of a neural network layer Visualizing activations... ```python\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow.keras.models import Model\nmodel = tf.keras.models.load_model('my_model.h5')\nlayer_outputs = [layer.output for layer in model.layers]\nactivation_model = Model(inputs=model.input, outputs=layer_outputs)\nactivations = activation_model.predict(input_data)\nplt.matshow(activations[0][0, :, :, 4], cmap='viridis')\n```"
	},
	{
	    "instruction": "Implement a GAN to generate new data samples",
	    "input": "Implementing a Generative Adversarial Network...",
	    "output": "```python\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Reshape, Flatten\n# Generator\nG = Sequential()\nG.add(Dense(128, activation='relu', input_dim=100))\nG.add(Dense(784, activation='sigmoid'))\nG.add(Reshape((28, 28)))\n# Discriminator\nD = Sequential()\nD.add(Flatten(input_shape=(28, 28)))\nD.add(Dense(128, activation='relu'))\nD.add(Dense(1, activation='sigmoid'))\n# GAN\nD.compile(optimizer='adam', loss='binary_crossentropy')\nD.trainable = False\nGAN = Sequential([G, D])\nGAN.compile(optimizer='adam', loss='binary_crossentropy')\n# Training code here\n```",
	    "text": "Implement a GAN to generate new data samples Implementing a Generative Adversarial Network... ```python\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Dense, Reshape, Flatten\n# Generator\nG = Sequential()\nG.add(Dense(128, activation='relu', input_dim=100))\nG.add(Dense(784, activation='sigmoid'))\nG.add(Reshape((28, 28)))\n# Discriminator\nD = Sequential()\nD.add(Flatten(input_shape=(28, 28)))\nD.add(Dense(128, activation='relu'))\nD.add(Dense(1, activation='sigmoid'))\n# GAN\nD.compile(optimizer='adam', loss='binary_crossentropy')\nD.trainable = False\nGAN = Sequential([G, D])\nGAN.compile(optimizer='adam', loss='binary_crossentropy')\n# Training code here\n```"
	},
	{
	    "instruction": "Extract features from an image using a pre-trained CNN",
	    "input": "Extracting features using a pre-trained CNN...",
	    "output": "```python\nfrom tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.vgg16 import preprocess_input\nimport numpy as np\nmodel = VGG16(weights='imagenet', include_top=False)\nimg_path = 'image.jpg'\nimg = image.load_img(img_path, target_size=(224, 224))\nimg_array = image.img_to_array(img)\nimg_array = np.expand_dims(img_array, axis=0)\nimg_array = preprocess_input(img_array)\nfeatures = model.predict(img_array)\n```",
	    "text": "Extract features from an image using a pre-trained CNN Extracting features using a pre-trained CNN... ```python\nfrom tensorflow.keras.applications import VGG16\nfrom tensorflow.keras.preprocessing import image\nfrom tensorflow.keras.applications.vgg16 import preprocess_input\nimport numpy as np\nmodel = VGG16(weights='imagenet', include_top=False)\nimg_path = 'image.jpg'\nimg = image.load_img(img_path, target_size=(224, 224))\nimg_array = image.img_to_array(img)\nimg_array = np.expand_dims(img_array, axis=0)\nimg_array = preprocess_input(img_array)\nfeatures = model.predict(img_array)\n```"
	},
	{
	    "instruction": "Implement a Random Forest Classifier using scikit-learn",
	    "input": "Implementing a Random Forest Classifier...",
	    "output": "```python\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import load_iris\nX, y = load_iris(return_X_y=True)\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X, y)\n```",
	    "text": "Implement a Random Forest Classifier using scikit-learn Implementing a Random Forest Classifier... ```python\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.datasets import load_iris\nX, y = load_iris(return_X_y=True)\nclf = RandomForestClassifier(n_estimators=100)\nclf.fit(X, y)\n```"
	},
	{
	    "instruction": "Create a TensorFlow model to recognize handwritten digits",
	    "input": "Creating a TensorFlow model for handwritten digit recognition...",
	    "output": "```python\nimport tensorflow as tf\nmnist = tf.keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nmodel = tf.keras.models.Sequential([tf.keras.layers.Flatten(input_shape=(28,28)), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(10)])\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=5)\n```",
	    "text": "Create a TensorFlow model to recognize handwritten digits Creating a TensorFlow model for handwritten digit recognition... ```python\nimport tensorflow as tf\nmnist = tf.keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\nmodel = tf.keras.models.Sequential([tf.keras.layers.Flatten(input_shape=(28,28)), tf.keras.layers.Dense(128, activation='relu'), tf.keras.layers.Dense(10)])\nmodel.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\nmodel.fit(x_train, y_train, epochs=5)\n```"
	},
	{
	    "instruction": "Create a K-means clustering model to segment customers",
	    "input": "Creating a K-means model to segment customers...",
	    "output": "```python\nfrom sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([[1, 2], [5, 8], [1.5, 1.8], [8, 8], [1, 0.6], [9, 11]])\nkmeans = KMeans(n_clusters=2)\nkmeans.fit(X)\n```",
	    "text": "Create a K-means clustering model to segment customers Creating a K-means model to segment customers... ```python\nfrom sklearn.cluster import KMeans\nimport numpy as np\nX = np.array([[1, 2], [5, 8], [1.5, 1.8], [8, 8], [1, 0.6], [9, 11]])\nkmeans = KMeans(n_clusters=2)\nkmeans.fit(X)\n```"
	},
	{
	    "instruction": "Implement a Naive Bayes classifier for text classification",
	    "input": "Implementing a Naive Bayes classifier for text classification...",
	    "output": "```python\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\ncorpus = ['hello world', 'hello AI', 'I love programming']\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(corpus)\ny = [0, 1, 1]\nclf = MultinomialNB()\nclf.fit(X, y)\n```",
	    "text": "Implement a Naive Bayes classifier for text classification Implementing a Naive Bayes classifier for text classification... ```python\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\ncorpus = ['hello world', 'hello AI', 'I love programming']\nvectorizer = CountVectorizer()\nX = vectorizer.fit_transform(corpus)\ny = [0, 1, 1]\nclf = MultinomialNB()\nclf.fit(X, y)\n```"
	},
	{
	    "instruction": "Implement a simple chatbot using Python's NLTK library",
	    "input": "Implementing a simple chatbot using Python's NLTK...",
	    "output": "```python\nimport nltk\nfrom nltk.chat.util import Chat, reflections\npairs = [(r'hi', 'hello'), (r'how are you', 'I am fine')]\nchatbot = Chat(pairs, reflections)\nchatbot.converse()\n```",
	    "text": "Implement a simple chatbot using Python's NLTK library Implementing a simple chatbot using Python's NLTK... ```python\nimport nltk\nfrom nltk.chat.util import Chat, reflections\npairs = [(r'hi', 'hello'), (r'how are you', 'I am fine')]\nchatbot = Chat(pairs, reflections)\nchatbot.converse()\n```"
	},
	{
	    "instruction": "Implement a Python script to control a robotic arm",
	    "input": "Implementing a Python script to control a robotic arm...",
	    "output": "```python\nimport pyfirmata\nboard = pyfirmata.Arduino('COM3')\nit = pyfirmata.util.Iterator(board)\nit.start()\narm = board.get_pin('d:10:s')\narm.write(90)\n```",
	    "text": "Implement a Python script to control a robotic arm Implementing a Python script to control a robotic arm... ```python\nimport pyfirmata\nboard = pyfirmata.Arduino('COM3')\nit = pyfirmata.util.Iterator(board)\nit.start()\narm = board.get_pin('d:10:s')\narm.write(90)\n```"
	},
	{
	    "instruction": "Implement reinforcement learning for a maze-solving bot",
	    "input": "Implementing reinforcement learning for a maze-solving bot...",
	    "output": "```python\nimport gym\nenv = gym.make('FrozenLake-v0')\nstate = env.reset()\nfor _ in range(1000):\n    action = env.action_space.sample()\n    state, reward, done, info = env.step(action)\n    if done:\n        break\n```",
	    "text": "Implement reinforcement learning for a maze-solving bot Implementing reinforcement learning for a maze-solving bot... ```python\nimport gym\nenv = gym.make('FrozenLake-v0')\nstate = env.reset()\nfor _ in range(1000):\n    action = env.action_space.sample()\n    state, reward, done, info = env.step(action)\n    if done:\n        break\n```"
	},
	{
	    "instruction": "Implement a linear regression model using scikit-learn",
	    "input": "Implementing a linear regression model...",
	    "output": "```python\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\nX = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\ny = np.dot(X, np.array([1, 2])) + 3\nreg = LinearRegression().fit(X, y)\n```",
	    "text": "Implement a linear regression model using scikit-learn Implementing a linear regression model... ```python\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\nX = np.array([[1, 1], [1, 2], [2, 2], [2, 3]])\ny = np.dot(X, np.array([1, 2])) + 3\nreg = LinearRegression().fit(X, y)\n```"
	},
	{
	    "instruction": "Create a neural network for natural language processing using PyTorch",
	    "input": "Creating a neural network for NLP...",
	    "output": "```python\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nclass NLPNet(nn.Module):\n    def __init__(self, vocab_size, embed_dim):\n        super(NLPNet, self).__init__()\n        self.embedding = nn.Embedding(vocab_size, embed_dim)\n        self.fc = nn.Linear(embed_dim, 1)\n    def forward(self, x):\n        x = self.embedding(x)\n        x = self.fc(x)\n        return x\n```",
	    "text": "Create a neural network for natural language processing using PyTorch Creating a neural network for NLP... ```python\nimport torch\nimport torch.nn as nn\nimport torch.optim as optim\nclass NLPNet(nn.Module):\n    def __init__(self, vocab_size, embed_dim):\n        super(NLPNet, self).__init__()\n        self.embedding = nn.Embedding(vocab_size, embed_dim)\n        self.fc = nn.Linear(embed_dim, 1)\n    def forward(self, x):\n        x = self.embedding(x)\n        x = self.fc(x)\n        return x\n```"
	},
	{
	    "instruction": "Implement a decision tree classifier to predict loan approval",
	    "input": "Implementing a decision tree classifier for loan approval prediction...",
	    "output": "```python\nfrom sklearn.tree import DecisionTreeClassifier\nX = [[0, 0], [1, 1]]\ny = [0, 1]\nclf = DecisionTreeClassifier()\nclf = clf.fit(X, y)\n```",
	    "text": "Implement a decision tree classifier to predict loan approval Implementing a decision tree classifier for loan approval prediction... ```python\nfrom sklearn.tree import DecisionTreeClassifier\nX = [[0, 0], [1, 1]]\ny = [0, 1]\nclf = DecisionTreeClassifier()\nclf = clf.fit(X, y)\n```"
	},
	{
	    "instruction": "Implement a Support Vector Machine for binary classification",
	    "input": "Implementing a Support Vector Machine for binary classification...",
	    "output": "```python\nfrom sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\nclf = svm.SVC()\nclf.fit(X, y)\n```",
	    "text": "Implement a Support Vector Machine for binary classification Implementing a Support Vector Machine for binary classification... ```python\nfrom sklearn import svm\nX = [[0, 0], [1, 1]]\ny = [0, 1]\nclf = svm.SVC()\nclf.fit(X, y)\n```"
	},
	{
	    "instruction": "Create a Python script for sentiment analysis using TextBlob",
	    "input": "Creating a Python script for sentiment analysis...",
	    "output": "```python\nfrom textblob import TextBlob\ntext = 'I love programming'\nblob = TextBlob(text)\nsentiment = blob.sentiment.polarity\n```",
	    "text": "Create a Python script for sentiment analysis using TextBlob Creating a Python script for sentiment analysis... ```python\nfrom textblob import TextBlob\ntext = 'I love programming'\nblob = TextBlob(text)\nsentiment = blob.sentiment.polarity\n```"
	},
	{
	    "instruction": "Implement a logistic regression model for churn prediction",
	    "input": "Implementing logistic regression for churn prediction...",
	    "output": "```python\nfrom sklearn.linear_model import LogisticRegression\nX = [[0, 1], [1, 0], [2, 2]]\ny = [0, 1, 0]\nclf = LogisticRegression().fit(X, y)\n```",
	    "text": "Implement a logistic regression model for churn prediction Implementing logistic regression for churn prediction... ```python\nfrom sklearn.linear_model import LogisticRegression\nX = [[0, 1], [1, 0], [2, 2]]\ny = [0, 1, 0]\nclf = LogisticRegression().fit(X, y)\n```"
	},
	{
	    "instruction": "Implement a neural network for image recognition using OpenCV",
	    "input": "Implementing a neural network for image recognition...",
	    "output": "```python\nimport cv2\nnet = cv2.dnn.readNetFromCaffe('deploy.prototxt', 'weights.caffemodel')\nimage = cv2.imread('image.jpg')\nblob = cv2.dnn.blobFromImage(image, 1.0, (224, 224), (104.0, 117.0, 123.0))\nnet.setInput(blob)\npreds = net.forward()\n```",
	    "text": "Implement a neural network for image recognition using OpenCV Implementing a neural network for image recognition... ```python\nimport cv2\nnet = cv2.dnn.readNetFromCaffe('deploy.prototxt', 'weights.caffemodel')\nimage = cv2.imread('image.jpg')\nblob = cv2.dnn.blobFromImage(image, 1.0, (224, 224), (104.0, 117.0, 123.0))\nnet.setInput(blob)\npreds = net.forward()\n```"
	},
	{
	    "instruction": "Create a Python script to simulate a PID controller",
	    "input": "Creating a Python script to simulate a PID controller...",
	    "output": "```python\nclass PID:\n    def __init__(self, Kp, Ki, Kd):\n        self.Kp = Kp\n        self.Ki = Ki\n        self.Kd = Kd\n    def compute(self, setpoint, measured_value):\n        error = setpoint - measured_value\n        return self.Kp * error\n```",
	    "text": "Create a Python script to simulate a PID controller Creating a Python script to simulate a PID controller... ```python\nclass PID:\n    def __init__(self, Kp, Ki, Kd):\n        self.Kp = Kp\n        self.Ki = Ki\n        self.Kd = Kd\n    def compute(self, setpoint, measured_value):\n        error = setpoint - measured_value\n        return self.Kp * error\n```"
	},
	{
	    "instruction": "Implement a genetic algorithm for solving optimization problems",
	    "input": "",
	    "output": "```python\nimport random\ndef fitness(individual): return sum(individual)\ndef mutate(individual): individual[random.randint(0, len(individual) - 1)] = 1 - individual[random.randint(0, len(individual) - 1)]\npopulation = [[random.randint(0, 1) for _ in range(10)] for _ in range(100)]\n```",
	    "text": "Implement a genetic algorithm for solving optimization problems Implementing a genetic algorithm... ```python\nimport random\ndef fitness(individual): return sum(individual)\ndef mutate(individual): individual[random.randint(0, len(individual) - 1)] = 1 - individual[random.randint(0, len(individual) - 1)]\npopulation = [[random.randint(0, 1) for _ in range(10)] for _ in range(100)]\n```"
	},
	{
	    "instruction": "Implement a Python script for anomaly detection using Isolation Forest",
	    "input": "Implementing anomaly detection...",
	    "output": "```python\nfrom sklearn.ensemble import IsolationForest\nX = [[0, 1], [0, -1], [-1, 0], [1, 0], [0, 0]]\nclf = IsolationForest().fit(X)\n```",
	    "text": "Implement a Python script for anomaly detection using Isolation Forest Implementing anomaly detection... ```python\nfrom sklearn.ensemble import IsolationForest\nX = [[0, 1], [0, -1], [-1, 0], [1, 0], [0, 0]]\nclf = IsolationForest().fit(X)\n```"
	},
	{
	    "instruction": "Implement a Principal Component Analysis for feature reduction",
	    "input": "Implementing PCA for feature reduction...",
	    "output": "```python\nfrom sklearn.decomposition import PCA\nX = [[1, 2, 3], [2, 4, 5], [3, 6, 7]]\npca = PCA(n_components=2)\nX_new = pca.fit_transform(X)\n```",
	    "text": "Implement a Principal Component Analysis for feature reduction Implementing PCA for feature reduction... ```python\nfrom sklearn.decomposition import PCA\nX = [[1, 2, 3], [2, 4, 5], [3, 6, 7]]\npca = PCA(n_components=2)\nX_new = pca.fit_transform(X)\n```"
	},
	{
	    "instruction": "Implement a k-Nearest Neighbors algorithm for classification",
	    "input": "Implementing k-NN for classification...",
	    "output": "```python\nfrom sklearn.neighbors import KNeighborsClassifier\nX = [[0], [1], [2], [3]]\ny = [0, 0, 1, 1]\nneigh = KNeighborsClassifier(n_neighbors=3)\nneigh.fit(X, y)\n```",
	    "text": "Implement a k-Nearest Neighbors algorithm for classification Implementing k-NN for classification... ```python\nfrom sklearn.neighbors import KNeighborsClassifier\nX = [[0], [1], [2], [3]]\ny = [0, 0, 1, 1]\nneigh = KNeighborsClassifier(n_neighbors=3)\nneigh.fit(X, y)\n```"
	},
	{
	    "instruction": "Implement a Python script to perform web scraping and data extraction",
	    "input": "Implementing web scraping...",
	    "output": "```python\nimport requests\nfrom bs4 import BeautifulSoup\nresponse = requests.get('https://example.com')\nsoup = BeautifulSoup(response.text, 'html.parser')\ntitle = soup.find('title').get_text()\n```",
	    "text": "Implement a Python script to perform web scraping and data extraction Implementing web scraping... ```python\nimport requests\nfrom bs4 import BeautifulSoup\nresponse = requests.get('https://example.com')\nsoup = BeautifulSoup(response.text, 'html.parser')\ntitle = soup.find('title').get_text()\n```"
	},
	{
	    "instruction": "Scrape the data from https://sharegpt.com/c/4qj1DB0 and put into a dataset scraped_data.csv",
	    "input": "Implementing web scraping and storing the data into a dataset...",
	    "output": "```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nresponse = requests.get('https://sharegpt.com/c/4qj1DB0')\nsoup = BeautifulSoup(response.text, 'html.parser')\ntitle = soup.find('title').get_text()\ndataset = pd.DataFrame([{'title': title}])\ndataset.to_csv('scraped_data.csv', index=False)\n```",
	    "text": "Scrape the data from https://sharegpt.com/c/4qj1DB0 and put into a dataset scraped_data.csv Implementing web scraping and storing the data into a dataset... ```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nresponse = requests.get('https://sharegpt.com/c/4qj1DB0')\nsoup = BeautifulSoup(response.text, 'html.parser')\ntitle = soup.find('title').get_text()\ndataset = pd.DataFrame([{'title': title}])\ndataset.to_csv('scraped_data.csv', index=False)\n```"
	},
	{
	    "instruction": "Fetch the latest gaming news and display them interactively",
	    "input": "Fetching and displaying the latest gaming news...",
	    "output": "```python\nimport requests\nchoice = input('Enter the gaming category you are interested in: ')\nresponse = requests.get(f'https://api.example.com/gaming-news/{choice}')\ngaming_news = response.json()['articles']\nfor i, article in enumerate(gaming_news):\n    print(f'{i+1}. {article['title']}')\nselection = int(input('Select an article to read: '))\nprint(gaming_news[selection-1]['content'])\n```",
	    "text": "Fetch the latest gaming news and display them interactively Fetching and displaying the latest gaming news... ```python\nimport requests\nchoice = input('Enter the gaming category you are interested in: ')\nresponse = requests.get(f'https://api.example.com/gaming-news/{choice}')\ngaming_news = response.json()['articles']\nfor i, article in enumerate(gaming_news):\n    print(f'{i+1}. {article['title']}')\nselection = int(input('Select an article to read: '))\nprint(gaming_news[selection-1]['content'])\n```"
	},
	{
	    "instruction": "Monitor CPU and GPU temperature and alert if it's too high",
	    "input": "Monitoring CPU and GPU temperature...",
	    "output": "```python\nimport psutil\nthreshold = float(input('Enter the temperature threshold for alert: '))\nwhile True:\n    cpu_temp = psutil.sensors_temperatures()['coretemp'][0].current\n    gpu_temp = psutil.sensors_temperatures()['nvidia'][0].current\n    if cpu_temp > threshold or gpu_temp > threshold:\n        print('Temperature too high! Consider stopping the game.')\n```",
	    "text": "Monitor CPU and GPU temperature and alert if it's too high Monitoring CPU and GPU temperature... ```python\nimport psutil\nthreshold = float(input('Enter the temperature threshold for alert: '))\nwhile True:\n    cpu_temp = psutil.sensors_temperatures()['coretemp'][0].current\n    gpu_temp = psutil.sensors_temperatures()['nvidia'][0].current\n    if cpu_temp > threshold or gpu_temp > threshold:\n        print('Temperature too high! Consider stopping the game.')\n```"
	},
	{
	    "instruction": "Automatically update game mods based on user choice",
	    "input": "Automatically updating game mods...",
	    "output": "```python\nimport os\nmod_choice = input('Enter the mod name you want to update: ')\nos.system(f'curl -O https://example.com/mods/{mod_choice}.zip')\nos.system(f'unzip {mod_choice}.zip -d /path/to/game/mods/')\n```",
	    "text": "Automatically update game mods based on user choice Automatically updating game mods... ```python\nimport os\nmod_choice = input('Enter the mod name you want to update: ')\nos.system(f'curl -O https://example.com/mods/{mod_choice}.zip')\nos.system(f'unzip {mod_choice}.zip -d /path/to/game/mods/')\n```"
	},
	{
	    "instruction": "Fetch and display live game scores based on user's choice",
	    "input": "Fetching and displaying live game scores...",
	    "output": "```python\nimport requests\ngame = input('Which game scores would you like to see? ')\nresponse = requests.get(f'https://api.example.com/live-scores/{game}')\nscores = response.json()['scores']\nfor score in scores:\n    print(f'Team A: {score['team_a']}, Team B: {score['team_b']}, Score: {score['score']}')\n```",
	    "text": "Fetch and display live game scores based on user's choice Fetching and displaying live game scores... ```python\nimport requests\ngame = input('Which game scores would you like to see? ')\nresponse = requests.get(f'https://api.example.com/live-scores/{game}')\nscores = response.json()['scores']\nfor score in scores:\n    print(f'Team A: {score['team_a']}, Team B: {score['team_b']}, Score: {score['score']}')\n```"
	},
	{
	    "instruction": "Optimize game settings interactively based on hardware specs",
	    "input": "Optimizing game settings based on hardware...",
	    "output": "```python\nimport psutil\nchoice = input('Would you like to optimize game settings based on CPU? (yes/no): ')\nif choice.lower() == 'yes':\n    if psutil.cpu_count() > 4:\n        os.system('echo high > /path/to/game/settings.txt')\n    else:\n        os.system('echo low > /path/to/game/settings.txt')\n```",
	    "text": "Optimize game settings interactively based on hardware specs Optimizing game settings based on hardware... ```python\nimport psutil\nchoice = input('Would you like to optimize game settings based on CPU? (yes/no): ')\nif choice.lower() == 'yes':\n    if psutil.cpu_count() > 4:\n        os.system('echo high > /path/to/game/settings.txt')\n    else:\n        os.system('echo low > /path/to/game/settings.txt')\n```"
	},
	{
	    "instruction": "Suggest a game to play based on mood",
	    "input": "Suggesting a game based on your mood...",
	    "output": "```python\nmood = input('How are you feeling today? (relaxed/excited/sad): ')\ngame_suggestions = {'relaxed': 'Stardew Valley', 'excited': 'Rocket League', 'sad': 'Undertale'}\nprint(f'You should play {game_suggestions.get(mood, 'Any game you like')}')\n```",
	    "text": "Suggest a game to play based on mood Suggesting a game based on your mood... ```python\nmood = input('How are you feeling today? (relaxed/excited/sad): ')\ngame_suggestions = {'relaxed': 'Stardew Valley', 'excited': 'Rocket League', 'sad': 'Undertale'}\nprint(f'You should play {game_suggestions.get(mood, 'Any game you like')}')\n```"
	},
	{
	    "instruction": "Change game settings to dark mode if it's night time",
	    "input": "Changing game settings to dark mode if it's night...",
	    "output": "```python\nfrom datetime import datetime\nif datetime.now().hour > 18:\n    os.system('echo dark_mode=True > /path/to/game/settings.txt')\n```",
	    "text": "Change game settings to dark mode if it's night time Changing game settings to dark mode if it's night... ```python\nfrom datetime import datetime\nif datetime.now().hour > 18:\n    os.system('echo dark_mode=True > /path/to/game/settings.txt')\n```"
	},
	{
	    "instruction": "Mute all background apps while gaming",
	    "input": "Muting all background apps...",
	    "output": "```python\nimport os\nconfirm = input('Do you want to mute all background apps? (yes/no): ')\nif confirm.lower() == 'yes':\n    os.system('nircmd muteappvolume * 1')\n```",
	    "text": "Mute all background apps while gaming Muting all background apps... ```python\nimport os\nconfirm = input('Do you want to mute all background apps? (yes/no): ')\nif confirm.lower() == 'yes':\n    os.system('nircmd muteappvolume * 1')\n```"
	},
	{
	    "instruction": "Display a summary of my gaming stats",
	    "input": "Displaying a summary of your gaming stats...",
	    "output": "```python\nimport json\ngame = input('Which game stats would you like to see? ')\nwith open(f'/path/to/{game}_stats.json', 'r') as f:\n    stats = json.load(f)\n    for key, value in stats.items():\n        print(f'{key}: {value}')\n```",
	    "text": "Display a summary of my gaming stats Displaying a summary of your gaming stats... ```python\nimport json\ngame = input('Which game stats would you like to see? ')\nwith open(f'/path/to/{game}_stats.json', 'r') as f:\n    stats = json.load(f)\n    for key, value in stats.items():\n        print(f'{key}: {value}')\n```"
	},
	{
	    "instruction": "Find online co-op games available now",
	    "input": "Finding available online co-op games...",
	    "output": "```python\nimport requests\nresponse = requests.get('https://api.example.com/coop-games')\ngames = response.json()['games']\nfor i, game in enumerate(games):\n    print(f'{i+1}. {game['name']}')\nchoice = int(input('Select a game to know more about: '))\nprint(games[choice - 1]['details'])\n```",
	    "text": "Find online co-op games available now Finding available online co-op games... ```python\nimport requests\nresponse = requests.get('https://api.example.com/coop-games')\ngames = response.json()['games']\nfor i, game in enumerate(games):\n    print(f'{i+1}. {game['name']}')\nchoice = int(input('Select a game to know more about: '))\nprint(games[choice - 1]['details'])\n```"
	},
	{
	    "instruction": "Check if any of my Steam friends are online",
	    "input": "Checking your Steam friends' status...",
	    "output": "```python\nimport requests\nsteam_id = input('Enter your Steam ID: ')\nresponse = requests.get(f'https://api.steampowered.com/ISteamUser/GetFriendList/v1?key=YOUR_KEY&steamid={steam_id}')\nfriends = response.json()['friendslist']['friends']\nonline_friends = [friend for friend in friends if friend['personastate'] == 1]\nprint(f'Online friends: {online_friends}')\n```",
	    "text": "Check if any of my Steam friends are online Checking your Steam friends' status... ```python\nimport requests\nsteam_id = input('Enter your Steam ID: ')\nresponse = requests.get(f'https://api.steampowered.com/ISteamUser/GetFriendList/v1?key=YOUR_KEY&steamid={steam_id}')\nfriends = response.json()['friendslist']['friends']\nonline_friends = [friend for friend in friends if friend['personastate'] == 1]\nprint(f'Online friends: {online_friends}')\n```"
	},
	{
	    "instruction": "Suggest a game based on my mood and genre preference",
	    "input": "",
	    "output": "```python\nmood = input('What is your mood? (Happy, Sad, Excited): ')\ngenre = input('What is your favorite genre? (Action, Adventure, RPG): ')\nif mood == 'Happy' and genre == 'Action':\n    print('You should play Super Mario Odyssey.')\n```",
	    "text": "Suggest a game based on my mood and genre preference Suggesting a game... ```python\nmood = input('What is your mood? (Happy, Sad, Excited): ')\ngenre = input('What is your favorite genre? (Action, Adventure, RPG): ')\nif mood == 'Happy' and genre == 'Action':\n    print('You should play Super Mario Odyssey.')\n```"
	},
	{
	    "instruction": "Remind me to take breaks during gaming",
	    "input": "Setting reminders for breaks...",
	    "output": "```python\nimport time\nbreak_time = int(input('How many minutes between each break? '))\nwhile True:\n    time.sleep(break_time * 60)\n    print('Time to take a break!')\n```",
	    "text": "Remind me to take breaks during gaming Setting reminders for breaks... ```python\nimport time\nbreak_time = int(input('How many minutes between each break? '))\nwhile True:\n    time.sleep(break_time * 60)\n    print('Time to take a break!')\n```"
	},
	{
	    "instruction": "Calculate the odds of winning a game based on my stats",
	    "input": "Calculating odds...",
	    "output": "```python\nkills = int(input('Enter your average kills per game: '))\ndeaths = int(input('Enter your average deaths per game: '))\nodds = (kills / (kills + deaths)) * 100\nprint(f'Your odds of winning are approximately {odds:.2f}%')\n```",
	    "text": "Calculate the odds of winning a game based on my stats Calculating odds... ```python\nkills = int(input('Enter your average kills per game: '))\ndeaths = int(input('Enter your average deaths per game: '))\nodds = (kills / (kills + deaths)) * 100\nprint(f'Your odds of winning are approximately {odds:.2f}%')\n```"
	},
	{
	    "instruction": "Suggest me a game based on my hardware specs",
	    "input": "",
	    "output": "```python\nram = int(input('Enter your RAM size in GB: '))\nif ram >= 16:\n    print('You should play Cyberpunk 2077.')\n```",
	    "text": "Suggest me a game based on my hardware specs Suggesting a game... ```python\nram = int(input('Enter your RAM size in GB: '))\nif ram >= 16:\n    print('You should play Cyberpunk 2077.')\n```"
	},
	{
	    "instruction": "Tell me the odds of winning a match in Apex Legends based on my stats",
	    "input": "Calculating your odds in Apex Legends...",
	    "output": "```python\nimport requests\nusername = input('Enter your Apex Legends username: ')\nplatform = input('Enter your platform (PC/PS/Xbox): ')\nresponse = requests.get(f'https://api.mozambiquehe.re/bridge?version=5&platform={platform}&player={username}&auth=API_KEY')\ndata = response.json()\nkd_ratio = data['global']['kd']['value']\nwin_odds = float(kd_ratio) * 10\nprint(f'Your odds of winning a match are approximately {win_odds}%.')\n```",
	    "text": "Tell me the odds of winning a match in Apex Legends based on my stats Calculating your odds in Apex Legends... ```python\nimport requests\nusername = input('Enter your Apex Legends username: ')\nplatform = input('Enter your platform (PC/PS/Xbox): ')\nresponse = requests.get(f'https://api.mozambiquehe.re/bridge?version=5&platform={platform}&player={username}&auth=API_KEY')\ndata = response.json()\nkd_ratio = data['global']['kd']['value']\nwin_odds = float(kd_ratio) * 10\nprint(f'Your odds of winning a match are approximately {win_odds}%.')\n```"
	},
	{
	    "instruction": "Fetch Fortnite Item Shop offerings",
	    "input": "Fetching Fortnite Item Shop offerings...",
	    "output": "```python\nimport requests\nresponse = requests.get('https://fortnite-api.com/v2/shop/br', headers={'Authorization': 'API_KEY'})\nshop_data = response.json()['data']['featured'][0]['items'][0]['name']\nprint(f'Featured Item in Shop: {shop_data}')\n```",
	    "text": "Fetch Fortnite Item Shop offerings Fetching Fortnite Item Shop offerings... ```python\nimport requests\nresponse = requests.get('https://fortnite-api.com/v2/shop/br', headers={'Authorization': 'API_KEY'})\nshop_data = response.json()['data']['featured'][0]['items'][0]['name']\nprint(f'Featured Item in Shop: {shop_data}')\n```"
	},
	{
	    "instruction": "Search for Discord servers related to a specific game",
	    "input": "Searching for Discord servers...",
	    "output": "```python\nimport requests\ngame_name = input('Which game's Discord servers are you interested in? ')\nresponse = requests.get(f'https://discord.com/api/v9/guilds/discoverable?query={game_name}')\nservers = response.json()['name']\nprint(f'Recommended server: {servers[0]}')\n```",
	    "text": "Search for Discord servers related to a specific game Searching for Discord servers... ```python\nimport requests\ngame_name = input('Which game's Discord servers are you interested in? ')\nresponse = requests.get(f'https://discord.com/api/v9/guilds/discoverable?query={game_name}')\nservers = response.json()['name']\nprint(f'Recommended server: {servers[0]}')\n```"
	},
	{
	    "instruction": "Check the queue time for my favorite WoW server",
	    "input": "Checking WoW server queue time...",
	    "output": "```python\nimport requests\nserver_name = input('Enter the WoW server name: ')\nresponse = requests.get(f'http://wow.server.status.api/{server_name}')\nqueue_time = response.json()['queue_time']\nprint(f'The queue time for {server_name} is {queue_time} minutes.')\n```",
	    "text": "Check the queue time for my favorite WoW server Checking WoW server queue time... ```python\nimport requests\nserver_name = input('Enter the WoW server name: ')\nresponse = requests.get(f'http://wow.server.status.api/{server_name}')\nqueue_time = response.json()['queue_time']\nprint(f'The queue time for {server_name} is {queue_time} minutes.')\n```"
	},
	{
	    "instruction": "Fetch current eSports tournament information",
	    "input": "Fetching current eSports tournaments...",
	    "output": "```python\nimport requests\nresponse = requests.get('https://api.pandascore.io/tournaments?token=API_KEY')\ntournament_data = response.json()[0]['name']\nprint(f'Current ongoing tournament: {tournament_data}')\n```",
	    "text": "Fetch current eSports tournament information Fetching current eSports tournaments... ```python\nimport requests\nresponse = requests.get('https://api.pandascore.io/tournaments?token=API_KEY')\ntournament_data = response.json()[0]['name']\nprint(f'Current ongoing tournament: {tournament_data}')\n```"
	},
	{
	    "instruction": "Fix the syntax error in a Python function",
	    "input": "Fixing a syntax error...",
	    "output": "```python\ncode = input('Paste the Python function with a syntax error: ')\ntry:\n    exec(code)\nexcept SyntaxError:\n    print('Syntax Error detected. Please check your code.')\nelse:\n    print('No syntax errors detected.')\n```",
	    "text": "Fix the syntax error in a Python function Fixing a syntax error... ```python\ncode = input('Paste the Python function with a syntax error: ')\ntry:\n    exec(code)\nexcept SyntaxError:\n    print('Syntax Error detected. Please check your code.')\nelse:\n    print('No syntax errors detected.')\n```"
	},
	{
	    "instruction": "Handle FileNotFoundError",
	    "input": "Handling file errors...",
	    "output": "```python\nfile_path = input('Enter the path of the file you want to read: ')\ntry:\n    with open(file_path, 'r') as f:\n        print(f.read())\nexcept FileNotFoundError:\n    print(f'File {file_path} not found.')\n```",
	    "text": "Handle FileNotFoundError Handling file errors... ```python\nfile_path = input('Enter the path of the file you want to read: ')\ntry:\n    with open(file_path, 'r') as f:\n        print(f.read())\nexcept FileNotFoundError:\n    print(f'File {file_path} not found.')\n```"
	},
	{
	    "instruction": "Resolve ImportError",
	    "input": "Resolving ImportError...",
	    "output": "```python\nmodule_name = input('Enter the name of the Python module: ')\ntry:\n    exec(f'import {module_name}')\nexcept ImportError:\n    print(f'{module_name} module is not installed.')\n```",
	    "text": "Resolve ImportError Resolving ImportError... ```python\nmodule_name = input('Enter the name of the Python module: ')\ntry:\n    exec(f'import {module_name}')\nexcept ImportError:\n    print(f'{module_name} module is not installed.')\n```"
	},
	{
	    "instruction": "Fix the SQL Injection vulnerability",
	    "input": "Fixing SQL Injection vulnerability...",
	    "output": "```python\nimport sqlite3\nuser_input = input('Enter the username: ')\nconn = sqlite3.connect('test.db')\ncursor = conn.cursor()\ncursor.execute('SELECT * FROM users WHERE username = ?', (user_input,))\nprint('Query executed safely.')\n```",
	    "text": "Fix the SQL Injection vulnerability Fixing SQL Injection vulnerability... ```python\nimport sqlite3\nuser_input = input('Enter the username: ')\nconn = sqlite3.connect('test.db')\ncursor = conn.cursor()\ncursor.execute('SELECT * FROM users WHERE username = ?', (user_input,))\nprint('Query executed safely.')\n```"
	},
	{
	    "instruction": "Correct the code that's causing an UnboundLocalError",
	    "input": "Correcting UnboundLocalError...",
	    "output": "```python\ndef my_function():\n    try:\n        print(x)\n    except UnboundLocalError:\n        print('Variable x is not defined within the function.')\nmy_function()\n```",
	    "text": "Correct the code that's causing an UnboundLocalError Correcting UnboundLocalError... ```python\ndef my_function():\n    try:\n        print(x)\n    except UnboundLocalError:\n        print('Variable x is not defined within the function.')\nmy_function()\n```"
	},
	{
	    "instruction": "Resolve the RecursionError",
	    "input": "Resolving RecursionError...",
	    "output": "```python\ndef factorial(n):\n    try:\n        return n * factorial(n-1)\n    except RecursionError:\n        return 'Recursion limit exceeded.'\nprint(factorial(1000))\n```",
	    "text": "Resolve the RecursionError Resolving RecursionError... ```python\ndef factorial(n):\n    try:\n        return n * factorial(n-1)\n    except RecursionError:\n        return 'Recursion limit exceeded.'\nprint(factorial(1000))\n```"
	},
	{
	    "instruction": "Fix the code causing a TimeoutError",
	    "input": "Fixing TimeoutError...",
	    "output": "```python\nimport socket\ntry:\n    socket.create_connection(('www.google.com', 80), timeout=1)\nexcept TimeoutError:\n    print('Connection timed out. Check your network.')\n```",
	    "text": "Fix the code causing a TimeoutError Fixing TimeoutError... ```python\nimport socket\ntry:\n    socket.create_connection(('www.google.com', 80), timeout=1)\nexcept TimeoutError:\n    print('Connection timed out. Check your network.')\n```"
	},
	{
	    "instruction": "Compare my game library with a friend's",
	    "input": "Comparing game libraries...",
	    "output": "```python\nyour_games = input('Enter your games, separated by commas: ').split(',')\nfriend_games = input('Enter your friend's games, separated by commas: ').split(',')\ncommon_games = set(your_games) & set(friend_games)\nprint(f'Games you both have: {common_games}')\n```",
	    "text": "Compare my game library with a friend's Comparing game libraries... ```python\nyour_games = input('Enter your games, separated by commas: ').split(',')\nfriend_games = input('Enter your friend's games, separated by commas: ').split(',')\ncommon_games = set(your_games) & set(friend_games)\nprint(f'Games you both have: {common_games}')\n```"
	},
	{
	    "instruction": "Help me manage my in-game inventory",
	    "input": "",
	    "output": "```python\ninventory = input('Enter your current inventory items, separated by commas: ').split(',')\nitem_to_remove = input('Which item would you like to remove? ')\nif item_to_remove in inventory:\n    inventory.remove(item_to_remove)\nprint(f'Updated inventory: {inventory}')\n```",
	    "text": "Help me manage my in-game inventory Managing in-game inventory... ```python\ninventory = input('Enter your current inventory items, separated by commas: ').split(',')\nitem_to_remove = input('Which item would you like to remove? ')\nif item_to_remove in inventory:\n    inventory.remove(item_to_remove)\nprint(f'Updated inventory: {inventory}')\n```"
	},
	{
	    "instruction": "Optimize network settings for online gaming",
	    "input": "Optimizing network settings for online gaming...",
	    "output": "```python\nimport os\nos.system('netsh int tcp set heuristics disabled')\nos.system('netsh int tcp set global autotuninglevel=normal')\n```",
	    "text": "Optimize network settings for online gaming Optimizing network settings for online gaming... ```python\nimport os\nos.system('netsh int tcp set heuristics disabled')\nos.system('netsh int tcp set global autotuninglevel=normal')\n```"
	},
	{
	    "instruction": "Record gameplay",
	    "input": "Recording gameplay...",
	    "output": "```python\nimport pygetwindow as gw\nimport pyautogui\nactive_window = gw.getActiveWindow()\nif 'game_title' in active_window.title:\n    pyautogui.screenshot('gameplay.png')\n```",
	    "text": "Record gameplay Recording gameplay... ```python\nimport pygetwindow as gw\nimport pyautogui\nactive_window = gw.getActiveWindow()\nif 'game_title' in active_window.title:\n    pyautogui.screenshot('gameplay.png')\n```"
	},
	{
	    "instruction": "Automatically join gaming servers",
	    "input": "Automatically joining gaming servers...",
	    "output": "```python\nimport socket\ns = socket.socket()\ns.connect(('gaming_server_ip', 8080))\n```",
	    "text": "Automatically join gaming servers Automatically joining gaming servers... ```python\nimport socket\ns = socket.socket()\ns.connect(('gaming_server_ip', 8080))\n```"
	},
	{
	    "instruction": "Manage in-game inventory",
	    "input": "",
	    "output": "```python\ninventory = {'sword': 1, 'shield': 1}\ndef add_item(item):\n    if item in inventory:\n        inventory[item] += 1\n    else:\n        inventory[item] = 1\n```",
	    "text": "Manage in-game inventory Managing in-game inventory... ```python\ninventory = {'sword': 1, 'shield': 1}\ndef add_item(item):\n    if item in inventory:\n        inventory[item] += 1\n    else:\n        inventory[item] = 1\n```"
	},
	{
	    "instruction": "Fetch real-time in-game stats",
	    "input": "Fetching real-time in-game stats...",
	    "output": "```python\nimport requests\nresponse = requests.get('https://api.example.com/game-stats')\nstats = response.json()['stats']\n```",
	    "text": "Fetch real-time in-game stats Fetching real-time in-game stats... ```python\nimport requests\nresponse = requests.get('https://api.example.com/game-stats')\nstats = response.json()['stats']\n```"
	},
	{
	    "instruction": "Convert all string concatenations to f-strings",
	    "input": "Converting to f-strings...",
	    "output": "```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = f.readlines()\n    f.seek(0)\n    for line in lines:\n        if '+' in line and '\"' in line:\n            variables = re.findall(r'\"(.+?)\"', line)\n            f.write(f'f\"{\".join(variables)}\"\\n')\n        else:\n            f.write(line)\n    f.truncate()\n```",
	    "text": "Convert all string concatenations to f-strings Converting to f-strings... ```python\nfile_path = input('Enter the Python file path: ')\nwith open(file_path, 'r+') as f:\n    lines = f.readlines()\n    f.seek(0)\n    for line in lines:\n        if '+' in line and '\"' in line:\n            variables = re.findall(r'\"(.+?)\"', line)\n            f.write(f'f\"{\".join(variables)}\"\\n')\n        else:\n            f.write(line)\n    f.truncate()\n```"
	},
	{
	    "instruction": "List all the installed Node.js packages",
	    "input": "Listing all installed Node.js packages...",
	    "output": "```python\nimport os\nos.system('npm list -g --depth=0')\n```",
	    "text": "List all the installed Node.js packages Listing all installed Node.js packages... ```python\nimport os\nos.system('npm list -g --depth=0')\n```"
	},
	{
	    "instruction": "Merge multiple PDFs into one",
	    "input": "Merging multiple PDFs...",
	    "output": "```python\nfrom PyPDF2 import PdfFileMerger\npdfs = input('Enter the names of the PDF files to merge, separated by commas: ').split(',')\nmerger = PdfFileMerger()\nfor pdf in pdfs:\n    merger.append(pdf)\nmerger.write('merged.pdf')\nmerger.close()\n```",
	    "text": "Merge multiple PDFs into one Merging multiple PDFs... ```python\nfrom PyPDF2 import PdfFileMerger\npdfs = input('Enter the names of the PDF files to merge, separated by commas: ').split(',')\nmerger = PdfFileMerger()\nfor pdf in pdfs:\n    merger.append(pdf)\nmerger.write('merged.pdf')\nmerger.close()\n```"
	},
	{
	    "instruction": "List all running Docker containers",
	    "input": "",
	    "output": "```python\nimport os\nos.system('docker ps')\n```",
	    "text": "List all running Docker containers Listing all running Docker containers... ```python\nimport os\nos.system('docker ps')\n```"
	},
	{
	    "instruction": "Set up a cron job to run a Python script every day",
	    "input": "Setting up a cron job...",
	    "output": "```python\nimport os\nscript_path = input('Enter the full path to the Python script: ')\nos.system(f'(crontab -l ; echo \"0 0 * * * python {script_path}\") | crontab -')\n```",
	    "text": "Set up a cron job to run a Python script every day Setting up a cron job... ```python\nimport os\nscript_path = input('Enter the full path to the Python script: ')\nos.system(f'(crontab -l ; echo \"0 0 * * * python {script_path}\") | crontab -')\n```"
	},
	{
	    "instruction": "Calculate code coverage for a Python project",
	    "input": "Calculating code coverage...",
	    "output": "```python\nimport os\nos.system('coverage run -m unittest discover')\nos.system('coverage report')\n```",
	    "text": "Calculate code coverage for a Python project Calculating code coverage... ```python\nimport os\nos.system('coverage run -m unittest discover')\nos.system('coverage report')\n```"
	},
	{
	    "instruction": "Search for a text pattern in multiple files",
	    "input": "Searching for a text pattern...",
	    "output": "```python\nimport os\npattern = input('Enter the text pattern to search for: ')\nfolder = input('Enter the directory to search in: ')\nos.system(f'grep -rnl {folder} -e {pattern}')\n```",
	    "text": "Search for a text pattern in multiple files Searching for a text pattern... ```python\nimport os\npattern = input('Enter the text pattern to search for: ')\nfolder = input('Enter the directory to search in: ')\nos.system(f'grep -rnl {folder} -e {pattern}')\n```"
	},
	{
	    "instruction": "Check the syntax of a Python script without executing it",
	    "input": "Checking the syntax...",
	    "output": "```python\nimport os\nscript_path = input('Enter the full path to the Python script: ')\nos.system(f'python -m py_compile {script_path}')\n```",
	    "text": "Check the syntax of a Python script without executing it Checking the syntax... ```python\nimport os\nscript_path = input('Enter the full path to the Python script: ')\nos.system(f'python -m py_compile {script_path}')\n```"
	},
	{
	    "instruction": "Change my desktop wallpaper to a random image from a given folder",
	    "input": "Changing your desktop wallpaper...",
	    "output": "```python\nimport random\nimport os\nimport ctypes\ndir_path = input('Enter the directory path where your wallpapers are stored: ')\nwallpapers = [f for f in os.listdir(dir_path) if os.path.isfile(os.path.join(dir_path, f))]\nrandom_wallpaper = random.choice(wallpapers)\nctypes.windll.user32.SystemParametersInfoW(20, 0, os.path.join(dir_path, random_wallpaper), 0)\n```",
	    "text": "Change my desktop wallpaper to a random image from a given folder Changing your desktop wallpaper... ```python\nimport random\nimport os\nimport ctypes\ndir_path = input('Enter the directory path where your wallpapers are stored: ')\nwallpapers = [f for f in os.listdir(dir_path) if os.path.isfile(os.path.join(dir_path, f))]\nrandom_wallpaper = random.choice(wallpapers)\nctypes.windll.user32.SystemParametersInfoW(20, 0, os.path.join(dir_path, random_wallpaper), 0)\n```"
	},
	{
	    "instruction": "Launch my favorite game",
	    "input": "Launching your favorite game...",
	    "output": "```python\nimport os\ngame_path = input('Enter the path to your favorite game executable: ')\nos.startfile(game_path)\n```",
	    "text": "Launch my favorite game Launching your favorite game... ```python\nimport os\ngame_path = input('Enter the path to your favorite game executable: ')\nos.startfile(game_path)\n```"
	},
	{
	    "instruction": "Dim the screen brightness for movie mode",
	    "input": "Dimming the screen brightness...",
	    "output": "```python\nimport screen_brightness_control as sbc\nsbc.set_brightness(20)\n```",
	    "text": "Dim the screen brightness for movie mode Dimming the screen brightness... ```python\nimport screen_brightness_control as sbc\nsbc.set_brightness(20)\n```"
	},
	{
	    "instruction": "Set a timer for my gaming session",
	    "input": "Setting a gaming timer...",
	    "output": "```python\nimport time\ntimer_minutes = int(input('Enter the number of minutes for the gaming session: '))\ntime.sleep(timer_minutes * 60)\nprint('Time's up!')\n```",
	    "text": "Set a timer for my gaming session Setting a gaming timer... ```python\nimport time\ntimer_minutes = int(input('Enter the number of minutes for the gaming session: '))\ntime.sleep(timer_minutes * 60)\nprint('Time's up!')\n```"
	},
	{
	    "instruction": "Minimize all windows",
	    "input": "Minimizing all windows...",
	    "output": "```python\nimport pyautogui\npyautogui.hotkey('win', 'd')\n```",
	    "text": "Minimize all windows Minimizing all windows... ```python\nimport pyautogui\npyautogui.hotkey('win', 'd')\n```"
	},
	{
	    "instruction": "Square numbers in list using list comprehension...",
	    "input": "Squaring each number in a list...",
	    "output": "```python\narr = [int(x) for x in input('Please enter numbers separated by space: ').split()]\nresult = [x**2 for x in arr]\nprint(result)\n```",
	    "text": "Square numbers in list using list comprehension... Squaring each number in a list... ```python\narr = [int(x) for x in input('Please enter numbers separated by space: ').split()]\nresult = [x**2 for x in arr]\nprint(result)\n```"
	},
	{
	    "instruction": "Search for word in files within directory...",
	    "input": "Searching for a word in all files...",
	    "output": "```python\nimport os\ndirectory = input('Please specify the directory path: ')\nword = input('Please specify the word to search for: ')\nfor foldername, _, filenames in os.walk(directory):\n    for filename in filenames:\n        file_path = os.path.join(foldername, filename)\n        with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:\n            if word in file.read():\n                print(f'Found \"{word}\" in {file_path}')\n```",
	    "text": "Search for word in files within directory... Searching for a word in all files... ```python\nimport os\ndirectory = input('Please specify the directory path: ')\nword = input('Please specify the word to search for: ')\nfor foldername, _, filenames in os.walk(directory):\n    for filename in filenames:\n        file_path = os.path.join(foldername, filename)\n        with open(file_path, 'r', encoding='utf-8', errors='ignore') as file:\n            if word in file.read():\n                print(f'Found \"{word}\" in {file_path}')\n```"
	},
	{
	    "instruction": "Monitor system resources continuously",
	    "input": "Monitoring CPU, RAM, Disk, and GPU temperature...",
	    "output": "```python\nimport psutil\nimport GPUtil\nimport time\ndef get_usage():\n    while True:\n        cpu_usage = psutil.cpu_percent()\n        ram_usage = psutil.virtual_memory().percent\n        disk_usage = psutil.disk_usage('/').percent\n        gpus = GPUtil.getGPUs()\n        gpu_temp = gpus[0].temperature\n        print(f'CPU: {cpu_usage}%, RAM: {ram_usage}%, Disk: {disk_usage}%, GPU: {gpu_temp}C')\n        time.sleep(1)\n```",
	    "text": "Monitor system resources continuously Monitoring CPU, RAM, Disk, and GPU temperature... ```python\nimport psutil\nimport GPUtil\nimport time\ndef get_usage():\n    while True:\n        cpu_usage = psutil.cpu_percent()\n        ram_usage = psutil.virtual_memory().percent\n        disk_usage = psutil.disk_usage('/').percent\n        gpus = GPUtil.getGPUs()\n        gpu_temp = gpus[0].temperature\n        print(f'CPU: {cpu_usage}%, RAM: {ram_usage}%, Disk: {disk_usage}%, GPU: {gpu_temp}C')\n        time.sleep(1)\n```"
	},
	{
	    "instruction": "Open file with default application...",
	    "input": "Opening a file using its default application...",
	    "output": "```python\nimport os\nfile_path = input('Please specify the path to the file you want to open: ')\nos.startfile(file_path)\n```",
	    "text": "Open file with default application... Opening a file using its default application... ```python\nimport os\nfile_path = input('Please specify the path to the file you want to open: ')\nos.startfile(file_path)\n```"
	},
	{
	    "instruction": "Compress and decompress a string using zlib...",
	    "input": "Compressing and decompressing a string. Could you first specify a string?...",
	    "output": "```python\nimport zlib\nuser_string = input('Enter a string to compress: ')\ncompressed = zlib.compress(user_string.encode())\ndecompressed = zlib.decompress(compressed).decode()\nprint(f'Compressed: {compressed}\nDecompressed: {decompressed}')\n```",
	    "text": "Compress and decompress a string using zlib... Compressing and decompressing a string. Could you first specify a string?... ```python\nimport zlib\nuser_string = input('Enter a string to compress: ')\ncompressed = zlib.compress(user_string.encode())\ndecompressed = zlib.decompress(compressed).decode()\nprint(f'Compressed: {compressed}\nDecompressed: {decompressed}')\n```"
	},
	{
	    "instruction": "Read a JSON file and print its content...",
	    "input": "Reading a JSON file. Could you first specify a path to a JSON file?...",
	    "output": "```python\nimport json\nfile_path = input('Enter the path to the JSON file: ')\nwith open(file_path, 'r') as f:\n    data = json.load(f)\nprint(data)\n```",
	    "text": "Read a JSON file and print its content... Reading a JSON file. Could you first specify a path to a JSON file?... ```python\nimport json\nfile_path = input('Enter the path to the JSON file: ')\nwith open(file_path, 'r') as f:\n    data = json.load(f)\nprint(data)\n```"
	},
	{
	    "instruction": "Sort a list of dictionaries by a given key...",
	    "input": "Sorting a list of dictionaries. Could you first specify a key?...",
	    "output": "```python\nkey = input('Enter the key to sort by: ')\nlst = [{'key1': 1, 'key2': 2}, {'key1': 2, 'key2': 1}]\nsorted_lst = sorted(lst, key=lambda x: x[key])\nprint(sorted_lst)\n```",
	    "text": "Sort a list of dictionaries by a given key... Sorting a list of dictionaries. Could you first specify a key?... ```python\nkey = input('Enter the key to sort by: ')\nlst = [{'key1': 1, 'key2': 2}, {'key1': 2, 'key2': 1}]\nsorted_lst = sorted(lst, key=lambda x: x[key])\nprint(sorted_lst)\n```"
	},
	{
	    "instruction": "Read a CSV file and print its content...",
	    "input": "Reading a CSV file. Could you first specify a path to a CSV file?...",
	    "output": "```python\nimport csv\nfile_path = input('Enter the path to the CSV file: ')\nwith open(file_path, 'r') as f:\n    reader = csv.reader(f)\n    for row in reader:\n        print(row)\n```",
	    "text": "Read a CSV file and print its content... Reading a CSV file. Could you first specify a path to a CSV file?... ```python\nimport csv\nfile_path = input('Enter the path to the CSV file: ')\nwith open(file_path, 'r') as f:\n    reader = csv.reader(f)\n    for row in reader:\n        print(row)\n```"
	},
	{
	    "instruction": "Send an HTTP GET request...",
	    "input": "Sending an HTTP GET request. Could you first specify a URL?...",
	    "output": "```python\nimport requests\nurl = input('Enter the URL: ')\nresponse = requests.get(url)\nprint(response.text)\n```",
	    "text": "Send an HTTP GET request... Sending an HTTP GET request. Could you first specify a URL?... ```python\nimport requests\nurl = input('Enter the URL: ')\nresponse = requests.get(url)\nprint(response.text)\n```"
	},
	{
	    "instruction": "Write a dataset to a JSONL file...",
	    "input": "Writing to a JSONL file...",
	    "output": "```python\nimport jsonlines\ndata = [{'key': 'value'}]  # Replace with your dataset\ndata_file = input('Please specify the JSONL file name: ')\nwith jsonlines.open(data_file, mode='w') as writer:\n    for entry in data:\n        writer.write(entry)\n```",
	    "text": "Write a dataset to a JSONL file... Writing to a JSONL file... ```python\nimport jsonlines\ndata = [{'key': 'value'}]  # Replace with your dataset\ndata_file = input('Please specify the JSONL file name: ')\nwith jsonlines.open(data_file, mode='w') as writer:\n    for entry in data:\n        writer.write(entry)\n```"
	},
	{
	    "instruction": "Install missing dependencies using pip...",
	    "input": "Could you first specify dependencies that are missing?\nGenerating basic example due to the lack of information...",
	    "output": "```python\nimport subprocess\nrequired_packages = input('Please enter the missing packages separated by spaces: ').split()\nfor package in required_packages:\n    subprocess.run(['pip', 'install', package])\n```",
	    "text": "Install missing dependencies using pip... Could you first specify dependencies that are missing?\nGenerating basic example due to the lack of information... ```python\nimport subprocess\nrequired_packages = input('Please enter the missing packages separated by spaces: ').split()\nfor package in required_packages:\n    subprocess.run(['pip', 'install', package])\n```"
	},
	{
	    "instruction": "Install missing dependencies sniff and requests using pip",
	    "input": "",
	    "output": "```python\nimport subprocess\n# List of dependencies\nrequired_packages = ['sniff','requests']\n# Install missing packages\nfor package in required_packages:\n    subprocess.run(['pip', 'install', package])\n```",
	    "text": "Install missing dependencies sniff and requests using pip Installing missing dependencies.. ```python\nimport subprocess\n# List of dependencies\nrequired_packages = ['sniff','requests']\n# Install missing packages\nfor package in required_packages:\n    subprocess.run(['pip', 'install', package])\n```"
	},
	{
	    "instruction": "No module named pandas",
	    "input": "",
	    "output": "```python\nimport subprocess\n# List of dependencies\nrequired_packages = ['pandas']\n# Install missing packages\nfor package in required_packages:\n    subprocess.run(['pip', 'install', package])\n```",
	    "text": "No module named pandas Installing missing dependencies.. ```python\nimport subprocess\n# List of dependencies\nrequired_packages = ['pandas']\n# Install missing packages\nfor package in required_packages:\n    subprocess.run(['pip', 'install', package])\n```"
	},
	{
	    "instruction": "Host an API...",
	    "input": "Could you first specify what the API should return?\nGenerating basic example due to the lack of information...",
	    "output": "```python\nfrom flask import Flask, jsonify\napp = Flask(__name__)\nresponse_data = input('Please enter the API response message: ')\n@app.route('/api', methods=['GET'])\ndef api_endpoint():\n    return jsonify({'message': response_data})\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n```",
	    "text": "Host an API... Could you first specify what the API should return?\nGenerating basic example due to the lack of information... ```python\nfrom flask import Flask, jsonify\napp = Flask(__name__)\nresponse_data = input('Please enter the API response message: ')\n@app.route('/api', methods=['GET'])\ndef api_endpoint():\n    return jsonify({'message': response_data})\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=5000)\n```"
	},
	{
	    "instruction": "Read this CSV file...",
	    "input": "Could you first specify a file to read?\nGenerating basic example due to the lack of information...",
	    "output": "```python\nimport pandas as pd\ncsv_file_path = input('Please specify the path to the CSV file: ')\ndf = pd.read_csv(csv_file_path)\nprint(df.head())\n```",
	    "text": "Read this CSV file... Could you first specify a file to read?\nGenerating basic example due to the lack of information... ```python\nimport pandas as pd\ncsv_file_path = input('Please specify the path to the CSV file: ')\ndf = pd.read_csv(csv_file_path)\nprint(df.head())\n```"
	},
	{
	    "instruction": "Send an email...",
	    "input": "Could you first specify a message to send and to who should I send it?\nGenerating basic example due to the lack of information...",
	    "output": "```python\nimport smtplib\nsmtp_server = 'smtp.gmail.com'\nport = 587\nusername = input('Please enter your email: ')\npassword = input('Please enter your password: ')\nrecipient = input('Please enter the recipient email: ')\nmessage = input('Please enter the message to send: ')\nserver = smtplib.SMTP(smtp_server, port)\nserver.starttls()\nserver.login(username, password)\nserver.sendmail(username, recipient, message)\nserver.quit()\n```",
	    "text": "Send an email... Could you first specify a message to send and to who should I send it?\nGenerating basic example due to the lack of information... ```python\nimport smtplib\nsmtp_server = 'smtp.gmail.com'\nport = 587\nusername = input('Please enter your email: ')\npassword = input('Please enter your password: ')\nrecipient = input('Please enter the recipient email: ')\nmessage = input('Please enter the message to send: ')\nserver = smtplib.SMTP(smtp_server, port)\nserver.starttls()\nserver.login(username, password)\nserver.sendmail(username, recipient, message)\nserver.quit()\n```"
	},
	{
	    "instruction": "Proceed with file I/O operations",
	    "input": "Executing File I/O operations...",
	    "output": "```python\nwith open('example.txt', 'w') as f:\n    f.write('Hello, World!')\nwith open('example.txt', 'r') as f:\n    content = f.read()\n    print(f'File content: {content}')\n```",
	    "text": "Proceed with file I/O operations Executing File I/O operations... ```python\nwith open('example.txt', 'w') as f:\n    f.write('Hello, World!')\nwith open('example.txt', 'r') as f:\n    content = f.read()\n    print(f'File content: {content}')\n```"
	},
	{
	    "instruction": "Proceed with getting system information",
	    "input": "Gathering system information...",
	    "output": "```python\nimport platform\nos_info = platform.uname()\nprint(f'System: {os_info.system}')\nprint(f'Node Name: {os_info.node}')\nprint(f'Release: {os_info.release}')\nprint(f'Version: {os_info.version}')\nprint(f'Machine: {os_info.machine}')\nprint(f'Processor: {os_info.processor}')\n```",
	    "text": "Proceed with getting system information Gathering system information... ```python\nimport platform\nos_info = platform.uname()\nprint(f'System: {os_info.system}')\nprint(f'Node Name: {os_info.node}')\nprint(f'Release: {os_info.release}')\nprint(f'Version: {os_info.version}')\nprint(f'Machine: {os_info.machine}')\nprint(f'Processor: {os_info.processor}')\n```"
	},
	{
	    "instruction": "Proceed with running a shell command",
	    "input": "",
	    "output": "```python\nimport subprocess\ncommand = 'ls -l'\nsubprocess.run(command, shell=True)\n```",
	    "text": "Proceed with running a shell command Executing a shell command... ```python\nimport subprocess\ncommand = 'ls -l'\nsubprocess.run(command, shell=True)\n```"
	},
	{
	    "instruction": "Proceed with monitoring CPU usage",
	    "input": "",
	    "output": "```python\nimport psutil\ncpu_usage = psutil.cpu_percent(interval=1)\nprint(f'CPU Usage: {cpu_usage}%')\n```",
	    "text": "Proceed with monitoring CPU usage Monitoring CPU usage... ```python\nimport psutil\ncpu_usage = psutil.cpu_percent(interval=1)\nprint(f'CPU Usage: {cpu_usage}%')\n```"
	},
	{
	    "instruction": "Proceed with monitoring network usage",
	    "input": "Monitoring network usage...",
	    "output": "```python\nimport psutil\nnet_io = psutil.net_io_counters()\nprint(f'Bytes Sent: {net_io.bytes_sent}')\nprint(f'Bytes Received: {net_io.bytes_recv}')\n```",
	    "text": "Proceed with monitoring network usage Monitoring network usage... ```python\nimport psutil\nnet_io = psutil.net_io_counters()\nprint(f'Bytes Sent: {net_io.bytes_sent}')\nprint(f'Bytes Received: {net_io.bytes_recv}')\n```"
	},
	{
	    "instruction": "Get information about running processes",
	    "input": "Gathering information about running processes...",
	    "output": "```python\nimport psutil\nfor process in psutil.process_iter(['pid', 'name', 'username']):\n    print(process.info)\n```",
	    "text": "Get information about running processes Gathering information about running processes... ```python\nimport psutil\nfor process in psutil.process_iter(['pid', 'name', 'username']):\n    print(process.info)\n```"
	},
	{
	    "instruction": "Execute automated file backups",
	    "input": "Backing up files...",
	    "output": "```python\nimport shutil\nsource_folder = 'source_folder'\ndestination_folder = 'backup_folder'\nshutil.copytree(source_folder, destination_folder)\n```",
	    "text": "Execute automated file backups Backing up files... ```python\nimport shutil\nsource_folder = 'source_folder'\ndestination_folder = 'backup_folder'\nshutil.copytree(source_folder, destination_folder)\n```"
	},
	{
	    "instruction": "Execute scheduled tasks",
	    "input": "Running scheduled tasks...",
	    "output": "```python\nimport schedule\nimport time\ndef job():\n    print('Doing something')\nschedule.every(10).seconds.do(job)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```",
	    "text": "Execute scheduled tasks Running scheduled tasks... ```python\nimport schedule\nimport time\ndef job():\n    print('Doing something')\nschedule.every(10).seconds.do(job)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```"
	},
	{
	    "instruction": "Check if service is running",
	    "input": "Checking if a service is running...",
	    "output": "```python\nimport subprocess\ndef check_service(service_name):\n    status = subprocess.run(f'sc queryex {service_name}', shell=True, stdout=subprocess.PIPE).stdout.decode()\n    return 'RUNNING' in status\n```",
	    "text": "Check if service is running Checking if a service is running... ```python\nimport subprocess\ndef check_service(service_name):\n    status = subprocess.run(f'sc queryex {service_name}', shell=True, stdout=subprocess.PIPE).stdout.decode()\n    return 'RUNNING' in status\n```"
	},
	{
	    "instruction": "Execute HTTP GET requests",
	    "input": "Making HTTP GET requests...",
	    "output": "```python\nimport requests\ndef get_request(url):\n    response = requests.get(url)\n    return response.text\n```",
	    "text": "Execute HTTP GET requests Making HTTP GET requests... ```python\nimport requests\ndef get_request(url):\n    response = requests.get(url)\n    return response.text\n```"
	},
	{
	    "instruction": "Execute HTTP POST requests",
	    "input": "Making HTTP POST requests...",
	    "output": "```python\nimport requests\ndef post_request(url, data):\n    response = requests.post(url, data=data)\n    return response.text\n```",
	    "text": "Execute HTTP POST requests Making HTTP POST requests... ```python\nimport requests\ndef post_request(url, data):\n    response = requests.post(url, data=data)\n    return response.text\n```"
	},
	{
	    "instruction": "Download file from web",
	    "input": "",
	    "output": "```python\nimport requests\ndef download_file(url, filename):\n    response = requests.get(url)\n    with open(filename, 'wb') as f:\n        f.write(response.content)\n```",
	    "text": "Download file from web Downloading a file... ```python\nimport requests\ndef download_file(url, filename):\n    response = requests.get(url)\n    with open(filename, 'wb') as f:\n        f.write(response.content)\n```"
	},
	{
	    "instruction": "Parse HTML content",
	    "input": "",
	    "output": "```python\nfrom bs4 import BeautifulSoup\nimport requests\ndef parse_html(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    title_tag = soup.find('title')\n    return title_tag.text\n```",
	    "text": "Parse HTML content Parsing HTML... ```python\nfrom bs4 import BeautifulSoup\nimport requests\ndef parse_html(url):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    title_tag = soup.find('title')\n    return title_tag.text\n```"
	},
	{
	    "instruction": "Check website availability",
	    "input": "Checking website status...",
	    "output": "```python\nimport requests\ndef check_website(url):\n    try:\n        response = requests.get(url)\n        return response.status_code == 200\n    except requests.RequestException:\n        return False\n```",
	    "text": "Check website availability Checking website status... ```python\nimport requests\ndef check_website(url):\n    try:\n        response = requests.get(url)\n        return response.status_code == 200\n    except requests.RequestException:\n        return False\n```"
	},
	{
	    "instruction": "Upload to FTP server",
	    "input": "Uploading file to FTP...",
	    "output": "```python\nfrom ftplib import FTP\ndef upload_to_ftp(ftp_address, username, password, file_path):\n    ftp = FTP(ftp_address)\n    ftp.login(username, password)\n    with open(file_path, 'rb') as f:\n        ftp.storbinary(f'STOR {os.path.basename(file_path)}', f)\n```",
	    "text": "Upload to FTP server Uploading file to FTP... ```python\nfrom ftplib import FTP\ndef upload_to_ftp(ftp_address, username, password, file_path):\n    ftp = FTP(ftp_address)\n    ftp.login(username, password)\n    with open(file_path, 'rb') as f:\n        ftp.storbinary(f'STOR {os.path.basename(file_path)}', f)\n```"
	},
	{
	    "instruction": "Execute parsing JSON from a web API",
	    "input": "Parsing JSON from a web API...",
	    "output": "```python\nimport requests\nimport json\ndef parse_json_from_api(api_url):\n    response = requests.get(api_url)\n    data = json.loads(response.text)\n    return data['key']\n```",
	    "text": "Execute parsing JSON from a web API Parsing JSON from a web API... ```python\nimport requests\nimport json\ndef parse_json_from_api(api_url):\n    response = requests.get(api_url)\n    data = json.loads(response.text)\n    return data['key']\n```"
	},
	{
	    "instruction": "Run a simple HTTP server",
	    "input": "Running a simple HTTP server...",
	    "output": "```python\nfrom http.server import SimpleHTTPRequestHandler\nfrom socketserver import TCPServer\ndef run_http_server(port):\n    with TCPServer(('', port), SimpleHTTPRequestHandler) as httpd:\n        httpd.serve_forever()\n```",
	    "text": "Run a simple HTTP server Running a simple HTTP server... ```python\nfrom http.server import SimpleHTTPRequestHandler\nfrom socketserver import TCPServer\ndef run_http_server(port):\n    with TCPServer(('', port), SimpleHTTPRequestHandler) as httpd:\n        httpd.serve_forever()\n```"
	},
	{
	    "instruction": "Send data to a WebSocket",
	    "input": "Sending data to a WebSocket...",
	    "output": "```python\nfrom websocket import create_connection\ndef send_websocket_data(ws_url, message):\n    ws = create_connection(ws_url)\n    ws.send(message)\n    ws.close()\n```",
	    "text": "Send data to a WebSocket Sending data to a WebSocket... ```python\nfrom websocket import create_connection\ndef send_websocket_data(ws_url, message):\n    ws = create_connection(ws_url)\n    ws.send(message)\n    ws.close()\n```"
	},
	{
	    "instruction": "Download a YouTube video",
	    "input": "Downloading a YouTube video...",
	    "output": "```python\nfrom pytube import YouTube\ndef download_youtube_video(youtube_url):\n    yt = YouTube(youtube_url)\n    video = yt.streams.get_highest_resolution()\n    video.download()\n```",
	    "text": "Download a YouTube video Downloading a YouTube video... ```python\nfrom pytube import YouTube\ndef download_youtube_video(youtube_url):\n    yt = YouTube(youtube_url)\n    video = yt.streams.get_highest_resolution()\n    video.download()\n```"
	},
	{
	    "instruction": "Make GraphQL queries",
	    "input": "Making GraphQL queries...",
	    "output": "```python\nimport requests\ndef graphql_query(api_url, query):\n    response = requests.post(api_url, json={'query': query})\n    return response.json()\n```",
	    "text": "Make GraphQL queries Making GraphQL queries... ```python\nimport requests\ndef graphql_query(api_url, query):\n    response = requests.post(api_url, json={'query': query})\n    return response.json()\n```"
	},
	{
	    "instruction": "Convert XML to JSON",
	    "input": "",
	    "output": "```python\nimport xml.etree.ElementTree as ET\nimport json\ndef xml_to_json(xml_data):\n    root = ET.fromstring(xml_data)\n    json_data = {'name': root.find('name').text}\n    return json.dumps(json_data)\n```",
	    "text": "Convert XML to JSON Converting XML to JSON... ```python\nimport xml.etree.ElementTree as ET\nimport json\ndef xml_to_json(xml_data):\n    root = ET.fromstring(xml_data)\n    json_data = {'name': root.find('name').text}\n    return json.dumps(json_data)\n```"
	},
	{
	    "instruction": "Analyze DNA sequence",
	    "input": "Analyzing DNA sequence...",
	    "output": "```python\nfrom Bio.Seq import Seq\ndef dna_analysis(sequence):\n    seq = Seq(sequence)\n    return 'GC Content:', seq.count('G') + seq.count('C')\n```",
	    "text": "Analyze DNA sequence Analyzing DNA sequence... ```python\nfrom Bio.Seq import Seq\ndef dna_analysis(sequence):\n    seq = Seq(sequence)\n    return 'GC Content:', seq.count('G') + seq.count('C')\n```"
	},
	{
	    "instruction": "Simulate protein folding",
	    "input": "Simulating protein folding...",
	    "output": "```python\nimport pyrosetta\ndef protein_folding(sequence):\n    pyrosetta.init()\n    pose = pyrosetta.pose_from_sequence(sequence)\n    scorefxn = pyrosetta.get_score_function()\n    return scorefxn(pose)\n```",
	    "text": "Simulate protein folding Simulating protein folding... ```python\nimport pyrosetta\ndef protein_folding(sequence):\n    pyrosetta.init()\n    pose = pyrosetta.pose_from_sequence(sequence)\n    scorefxn = pyrosetta.get_score_function()\n    return scorefxn(pose)\n```"
	},
	{
	    "instruction": "Align multiple sequences",
	    "input": "Aligning multiple sequences...",
	    "output": "```python\nfrom Bio.Align.Applications import MuscleCommandline\ndef align_sequences(input_file, output_file):\n    muscle_cline = MuscleCommandline(input=input_file, out=output_file)\n    stdout, stderr = muscle_cline()\n```",
	    "text": "Align multiple sequences Aligning multiple sequences... ```python\nfrom Bio.Align.Applications import MuscleCommandline\ndef align_sequences(input_file, output_file):\n    muscle_cline = MuscleCommandline(input=input_file, out=output_file)\n    stdout, stderr = muscle_cline()\n```"
	},
	{
	    "instruction": "Plot gene expression data",
	    "input": "Plotting gene expression data...",
	    "output": "```python\nimport matplotlib.pyplot as plt\ndef plot_gene_expression(genes, expression):\n    plt.bar(genes, expression)\n    plt.show()\n```",
	    "text": "Plot gene expression data Plotting gene expression data... ```python\nimport matplotlib.pyplot as plt\ndef plot_gene_expression(genes, expression):\n    plt.bar(genes, expression)\n    plt.show()\n```"
	},
	{
	    "instruction": "Read FASTQ files",
	    "input": "Reading FASTQ files...",
	    "output": "```python\nfrom Bio import SeqIO\ndef read_fastq(file_path):\n    return [record.id for record in SeqIO.parse(file_path, 'fastq')]\n```",
	    "text": "Read FASTQ files Reading FASTQ files... ```python\nfrom Bio import SeqIO\ndef read_fastq(file_path):\n    return [record.id for record in SeqIO.parse(file_path, 'fastq')]\n```"
	},
	{
	    "instruction": "Simulate population genetics",
	    "input": "Simulating population genetics...",
	    "output": "```python\nimport simuPOP as sim\ndef simulate_population(size, loci, freq):\n    pop = sim.Population(size=size, loci=[loci])\n    sim.initGenotype(pop, freq=freq)\n```",
	    "text": "Simulate population genetics Simulating population genetics... ```python\nimport simuPOP as sim\ndef simulate_population(size, loci, freq):\n    pop = sim.Population(size=size, loci=[loci])\n    sim.initGenotype(pop, freq=freq)\n```"
	},
	{
	    "instruction": "Perform RNA-Seq differential expression analysis",
	    "input": "Performing RNA-Seq differential expression analysis...",
	    "output": "```python\nimport DESeq2\ndef rna_seq_analysis(count_matrix, design_matrix, design_formula):\n    deseq = DESeq2(count_matrix=count_matrix, design_matrix=design_matrix, design_formula=design_formula)\n    deseq.run_deseq()\n    return deseq.get_deseq_result()\n```",
	    "text": "Perform RNA-Seq differential expression analysis Performing RNA-Seq differential expression analysis... ```python\nimport DESeq2\ndef rna_seq_analysis(count_matrix, design_matrix, design_formula):\n    deseq = DESeq2(count_matrix=count_matrix, design_matrix=design_matrix, design_formula=design_formula)\n    deseq.run_deseq()\n    return deseq.get_deseq_result()\n```"
	},
	{
	    "instruction": "Analyze microbial community",
	    "input": "Analyzing microbial community...",
	    "output": "```python\nfrom qiime2 import Artifact\ndef microbial_analysis(table_path):\n    artifact = Artifact.load(table_path)\n    return alpha(artifact)\n```",
	    "text": "Analyze microbial community Analyzing microbial community... ```python\nfrom qiime2 import Artifact\ndef microbial_analysis(table_path):\n    artifact = Artifact.load(table_path)\n    return alpha(artifact)\n```"
	},
	{
	    "instruction": "Execute protein-ligand docking using AutoDock",
	    "input": "Protein-ligand docking script...",
	    "output": "```python\nimport pyautodock as ad\ndef run_docking(ligand_path, protein_path):\n    ligand = ad.read(ligand_path)\n    protein = ad.read(protein_path)\n    return ad.dock(ligand, protein)\n```",
	    "text": "Execute protein-ligand docking using AutoDock Protein-ligand docking script... ```python\nimport pyautodock as ad\ndef run_docking(ligand_path, protein_path):\n    ligand = ad.read(ligand_path)\n    protein = ad.read(protein_path)\n    return ad.dock(ligand, protein)\n```"
	},
	{
	    "instruction": "Construct a phylogenetic tree",
	    "input": "Constructing a phylogenetic tree...",
	    "output": "```python\nfrom Bio import Phylo\ndef construct_phylo_tree(file_path):\n    tree = Phylo.read(file_path, 'phyloxml')\n    Phylo.draw(tree)\n```",
	    "text": "Construct a phylogenetic tree Constructing a phylogenetic tree... ```python\nfrom Bio import Phylo\ndef construct_phylo_tree(file_path):\n    tree = Phylo.read(file_path, 'phyloxml')\n    Phylo.draw(tree)\n```"
	},
	{
	    "instruction": "Run memory information retrieval in Linux",
	    "input": "Retrieving memory information in Linux...",
	    "output": "```python\n#include <stdio.h>\nint main() { system('free -m'); return 0; }\n```",
	    "text": "Run memory information retrieval in Linux Retrieving memory information in Linux... ```python\n#include <stdio.h>\nint main() { system('free -m'); return 0; }\n```"
	},
	{
	    "instruction": "Update Kali Linux repositories and tools in Linux",
	    "input": "Updating Kali Linux repositories and tools...",
	    "output": "```python\n#!/bin/bash\nsudo apt update && sudo apt -y full-upgrade && sudo apt -y autoremove && sudo apt -y clean\n```",
	    "text": "Update Kali Linux repositories and tools in Linux Updating Kali Linux repositories and tools... ```python\n#!/bin/bash\nsudo apt update && sudo apt -y full-upgrade && sudo apt -y autoremove && sudo apt -y clean\n```"
	},
	{
	    "instruction": "Check for target ip's open ports using Nmap in Linux",
	    "input": "Scanning for target's open ports...",
	    "output": "```python\n#!/bin/bash\nnmap -p 1-65535 {target}\n```",
	    "text": "Check for target ip's open ports using Nmap in Linux Scanning for target's open ports... ```python\n#!/bin/bash\nnmap -p 1-65535 {target}\n```"
	},
	{
	    "instruction": "Run a Wireshark capture in Linux",
	    "input": "Running a Wireshark capture...",
	    "output": "```python\n#!/bin/bash\nsudo wireshark\n```",
	    "text": "Run a Wireshark capture in Linux Running a Wireshark capture... ```python\n#!/bin/bash\nsudo wireshark\n```"
	},
	{
	    "instruction": "Set up a Metasploit database in Linux",
	    "input": "Initializing Metasploit database...",
	    "output": "```python\n#!/bin/bash\nsudo msfdb init\n```",
	    "text": "Set up a Metasploit database in Linux Initializing Metasploit database... ```python\n#!/bin/bash\nsudo msfdb init\n```"
	},
	{
	    "instruction": "Set up a VPN connection in Linux",
	    "input": "Setting up a VPN connection in Kali Linux...",
	    "output": "```python\n#!/bin/bash\nsudo openvpn --config /path/to/config.ovpn\n```",
	    "text": "Set up a VPN connection in Linux Setting up a VPN connection in Kali Linux... ```python\n#!/bin/bash\nsudo openvpn --config /path/to/config.ovpn\n```"
	},
	{
	    "instruction": "Running John the Ripper in Linux",
	    "input": "running John the Ripper.",
	    "output": "```python\n#!/bin/bash\njohn --wordlist=/path/to/wordlist.txt /path/to/hashes\n```",
	    "text": "Running John the Ripper in Linux running John the Ripper. ```python\n#!/bin/bash\njohn --wordlist=/path/to/wordlist.txt /path/to/hashes\n```"
	},
	{
	    "instruction": "Start Burp Suite in Linux",
	    "input": "Starting Burp Suite...",
	    "output": "```python\n#!/bin/bash\nburpsuite\n```",
	    "text": "Start Burp Suite in Linux Starting Burp Suite... ```python\n#!/bin/bash\nburpsuite\n```"
	},
	{
	    "instruction": "Run SQLMap in Linux",
	    "input": "Running SQLMap...",
	    "output": "```python\n#!/bin/bash\nsqlmap -u 'http://example.com/vuln.php?id=1'\n```",
	    "text": "Run SQLMap in Linux Running SQLMap... ```python\n#!/bin/bash\nsqlmap -u 'http://example.com/vuln.php?id=1'\n```"
	},
	{
	    "instruction": "Check the status of services in Linux",
	    "input": "Checking the status of services in Linux...",
	    "output": "```python\n#!/bin/bash\nsudo service --status-all\n```",
	    "text": "Check the status of services in Linux Checking the status of services in Linux... ```python\n#!/bin/bash\nsudo service --status-all\n```"
	},
	{
	    "instruction": "Brute-force SSH using Hydra in Linux",
	    "input": "brute-forcing SSH using Hydra...",
	    "output": "```python\n#!/bin/bash\nhydra -l username -P /path/to/passwords.txt ssh://192.168.x.x\n```",
	    "text": "Brute-force SSH using Hydra in Linux brute-forcing SSH using Hydra... ```python\n#!/bin/bash\nhydra -l username -P /path/to/passwords.txt ssh://192.168.x.x\n```"
	},
	{
	    "instruction": "Running a Nikto web scanner in Linux",
	    "input": "Running Nikto...",
	    "output": "```python\n#!/bin/bash\nnikto -h http://target.com\n```",
	    "text": "Running a Nikto web scanner in Linux Running Nikto... ```python\n#!/bin/bash\nnikto -h http://target.com\n```"
	},
	{
	    "instruction": "Sniffing packets with tcpdump in Linux",
	    "input": "Sniffing packets using tcpdump...",
	    "output": "```python\n#!/bin/bash\nsudo tcpdump -i eth0\n```",
	    "text": "Sniffing packets with tcpdump in Linux Sniffing packets using tcpdump... ```python\n#!/bin/bash\nsudo tcpdump -i eth0\n```"
	},
	{
	    "instruction": "Perform ARP poisoning using arpspoof in Linux",
	    "input": "Performing ARP poisoning...",
	    "output": "```python\n#!/bin/bash\narpspoof -i eth0 -t 192.168.1.2 192.168.1.1\n```",
	    "text": "Perform ARP poisoning using arpspoof in Linux Performing ARP poisoning... ```python\n#!/bin/bash\narpspoof -i eth0 -t 192.168.1.2 192.168.1.1\n```"
	},
	{
	    "instruction": "Capture network packets using tcpdump in Linux",
	    "input": "Capturing packets with tcpdump...",
	    "output": "```python\n#!/bin/bash\ntcpdump -i eth0\n```",
	    "text": "Capture network packets using tcpdump in Linux Capturing packets with tcpdump... ```python\n#!/bin/bash\ntcpdump -i eth0\n```"
	},
	{
	    "instruction": "Crack ZIP file using fcrackzip on Linux",
	    "input": "Cracking ZIP files...",
	    "output": "```python\n#!/bin/bash\nfcrackzip -b -c 'aA1!' -l 1-5 /path/to/file.zip\n```",
	    "text": "Crack ZIP file using fcrackzip on Linux Cracking ZIP files... ```python\n#!/bin/bash\nfcrackzip -b -c 'aA1!' -l 1-5 /path/to/file.zip\n```"
	},
	{
	    "instruction": "Scan for Bluetooth devices on Linux",
	    "input": "Scanning for Bluetooth devices...",
	    "output": "```python\n#!/bin/bash\nhcitool scan\n```",
	    "text": "Scan for Bluetooth devices on Linux Scanning for Bluetooth devices... ```python\n#!/bin/bash\nhcitool scan\n```"
	},
	{
	    "instruction": "Run an SMB client in Linux",
	    "input": "Running smbclient...",
	    "output": "```python\n#!/bin/bash\nsmbclient //192.168.1.1/share\n```",
	    "text": "Run an SMB client in Linux Running smbclient... ```python\n#!/bin/bash\nsmbclient //192.168.1.1/share\n```"
	},
	{
	    "instruction": "Mount a remote file system using SSHFS in Linux",
	    "input": "Mounting a remote file system...",
	    "output": "```python\n#!/bin/bash\nsshfs username@remote:/path/to/remote/folder /path/to/local/folder\n```",
	    "text": "Mount a remote file system using SSHFS in Linux Mounting a remote file system... ```python\n#!/bin/bash\nsshfs username@remote:/path/to/remote/folder /path/to/local/folder\n```"
	},
	{
	    "instruction": "Execute file transfer using SCP in Linux",
	    "input": "Transfering file using SCP...",
	    "output": "```python\n#!/bin/bash\nscp /path/to/local/file username@remote:/path/to/remote/folder\n```",
	    "text": "Execute file transfer using SCP in Linux Transfering file using SCP... ```python\n#!/bin/bash\nscp /path/to/local/file username@remote:/path/to/remote/folder\n```"
	},
	{
	    "instruction": "Perform DNS enumeration using dnsenum in Linux",
	    "input": "Performing DNS enumeration...",
	    "output": "```python\n#!/bin/bash\ndnsenum example.com\n```",
	    "text": "Perform DNS enumeration using dnsenum in Linux Performing DNS enumeration... ```python\n#!/bin/bash\ndnsenum example.com\n```"
	},
	{
	    "instruction": "Set up and run Snort in Linux",
	    "input": "Initializing Snort...",
	    "output": "```python\n#!/bin/bash\nsudo snort -A console -q -c /etc/snort/snort.conf -i eth0\n```",
	    "text": "Set up and run Snort in Linux Initializing Snort... ```python\n#!/bin/bash\nsudo snort -A console -q -c /etc/snort/snort.conf -i eth0\n```"
	},
	{
	    "instruction": "Run a DNS enumeration with enum4linux in Linux",
	    "input": "Running DNS enumeration with enum4linux...",
	    "output": "```python\n#!/bin/bash\nenum4linux -a target-ip\n```",
	    "text": "Run a DNS enumeration with enum4linux in Linux Running DNS enumeration with enum4linux... ```python\n#!/bin/bash\nenum4linux -a target-ip\n```"
	},
	{
	    "instruction": "Run a vulnerability scan with OpenVAS in Linux",
	    "input": "Running a vulnerability scan with OpenVAS...",
	    "output": "```python\n#!/bin/bash\nopenvas-start\n```",
	    "text": "Run a vulnerability scan with OpenVAS in Linux Running a vulnerability scan with OpenVAS... ```python\n#!/bin/bash\nopenvas-start\n```"
	},
	{
	    "instruction": "Run a MITM attack with Ettercap in Linux",
	    "input": "Running a MITM attack with Ettercap...",
	    "output": "```python\n#!/bin/bash\nsudo ettercap -T -q -i interface\n```",
	    "text": "Run a MITM attack with Ettercap in Linux Running a MITM attack with Ettercap... ```python\n#!/bin/bash\nsudo ettercap -T -q -i interface\n```"
	},
	{
	    "instruction": "Extract saved Wi-Fi passwords in Linux",
	    "input": "Extracting saved Wi-Fi passwords...",
	    "output": "```python\n#!/bin/bash\ngrep -rE 'ssid=|psk=' /etc/NetworkManager/system-connections/\n```",
	    "text": "Extract saved Wi-Fi passwords in Linux Extracting saved Wi-Fi passwords... ```python\n#!/bin/bash\ngrep -rE 'ssid=|psk=' /etc/NetworkManager/system-connections/\n```"
	},
	{
	    "instruction": "Scan a subnet with fping in Linux",
	    "input": "Scanning a subnet with fping...",
	    "output": "```python\n#!/bin/bash\nfping -g 192.168.1.0/24\n```",
	    "text": "Scan a subnet with fping in Linux Scanning a subnet with fping... ```python\n#!/bin/bash\nfping -g 192.168.1.0/24\n```"
	},
	{
	    "instruction": "Clone a website with wget for phishing in Linux",
	    "input": "Cloning a website with wget...",
	    "output": "```python\n#!/bin/bash\nwget -mkEpnp http://example.com\n```",
	    "text": "Clone a website with wget for phishing in Linux Cloning a website with wget... ```python\n#!/bin/bash\nwget -mkEpnp http://example.com\n```"
	},
	{
	    "instruction": "Run a traceroute to a target in Linux",
	    "input": "Running traceroute to example.com...",
	    "output": "```python\n#!/bin/bash\ntraceroute example.com\n```",
	    "text": "Run a traceroute to a target in Linux Running traceroute to example.com... ```python\n#!/bin/bash\ntraceroute example.com\n```"
	},
	{
	    "instruction": "Run file integrity monitoring using AIDE in Linux.",
	    "input": "Running file integrity monitoring...",
	    "output": "```python\n#!/bin/bash\naide --check\n```",
	    "text": "Run file integrity monitoring using AIDE in Linux. Running file integrity monitoring... ```python\n#!/bin/bash\naide --check\n```"
	},
	{
	    "instruction": "OS fingerprinting using Xprobe2 in Linux.",
	    "input": "",
	    "output": "```python\n#!/bin/bash\nxprobe2 example.com\n```",
	    "text": "OS fingerprinting using Xprobe2 in Linux. OS fingerprinting... ```python\n#!/bin/bash\nxprobe2 example.com\n```"
	},
	{
	    "instruction": "Execute scan with Masscan in Linux.",
	    "input": "",
	    "output": "```python\n#!/bin/bash\nmasscan -p1-65535 192.168.1.0/24 --rate=1000\n```",
	    "text": "Execute scan with Masscan in Linux. Masscan scanning... ```python\n#!/bin/bash\nmasscan -p1-65535 192.168.1.0/24 --rate=1000\n```"
	},
	{
	    "instruction": "Audit wireless networks with wifite in Linux.",
	    "input": "Auditing wireless networks with wifite...",
	    "output": "```python\n#!/bin/bash\nwifite\n```",
	    "text": "Audit wireless networks with wifite in Linux. Auditing wireless networks with wifite... ```python\n#!/bin/bash\nwifite\n```"
	},
	{
	    "instruction": "Run a vulnerability scanner in Linux.",
	    "input": "",
	    "output": "```python\n#!/bin/bash\nopenvas-start\n```",
	    "text": "Run a vulnerability scanner in Linux. Vulnerability scanning... ```python\n#!/bin/bash\nopenvas-start\n```"
	},
	{
	    "instruction": "Network sniffing using ettercap in Linux.",
	    "input": "Running network sniffing...",
	    "output": "```python\n#!/bin/bash\nettercap -T -i eth0\n```",
	    "text": "Network sniffing using ettercap in Linux. Running network sniffing... ```python\n#!/bin/bash\nettercap -T -i eth0\n```"
	},
	{
	    "instruction": "Run SSLstrip in Linux.",
	    "input": "",
	    "output": "```python\n#!/bin/bash\nsslstrip -l 8080\n```",
	    "text": "Run SSLstrip in Linux. SSL stripping... ```python\n#!/bin/bash\nsslstrip -l 8080\n```"
	},
	{
	    "instruction": "Start a Netcat listener in Linux.",
	    "input": "Starting a Netcat listener...",
	    "output": "```python\n#!/bin/bash\nnc -lvp 4444\n```",
	    "text": "Start a Netcat listener in Linux. Starting a Netcat listener... ```python\n#!/bin/bash\nnc -lvp 4444\n```"
	},
	{
	    "instruction": "Decrypting SSL traffic with ssldump in Linux.",
	    "input": "Decrypting SSL traffic with ssldump...",
	    "output": "```python\n#!/bin/bash\nssldump -r file.pcap -k server.key -CA ca.crt\n```",
	    "text": "Decrypting SSL traffic with ssldump in Linux. Decrypting SSL traffic with ssldump... ```python\n#!/bin/bash\nssldump -r file.pcap -k server.key -CA ca.crt\n```"
	},
	{
	    "instruction": "Transform following forum post into a beautiful markdown format post: 'This Post was not designed to be flashy or attract attention, keep in mind that this is for the players - like you. Introducing Vera?s Lobbies - NL Lobbies For All Purposes...'",
	    "input": "Creatively editing provided text into a beautiful markdown syntax...",
	    "output": "```python\n# This Post was not designed to be flashy or attract attention, keep in mind that this is for the players - like you\n## Introducing Vera's Lobbies - NL Lobbies For All Purposes\n**And I mean it, just look at the features:**\n1. **Lobby**\n  - Instantly see who's active\n  - Send invite to selected player or invite everyone at once\n2. **Shoutbox**\n  - Just like Neverlose shoutbox but in menu!\n3. **Mailbox**\n  - Send a message to specified steamid / nl username that uses Lobbies\n  - Messages are encrypted and only recipient will see them\n  - Clear your mailbox fully on both ends (client-server) with just one button\n4. **Invites**\n  - List of every invited user and who invites you\n  - Invite and Invite All - if you prefer to keep only selected group of friends\n**Full instruction on every button, covering all features, is also available inside Script's Menu.**\nThat being said, I encourage you to try it: [Neverlose Market](https://en.neverlose.cc/market/item?id=RWjeBO)\n![Lobbies Screenshot](https://example.com/screenshot.png)\n```",
	    "text": "Transform following forum post into a beautiful markdown format post: 'This Post was not designed to be flashy or attract attention, keep in mind that this is for the players - like you. Introducing Vera?s Lobbies - NL Lobbies For All Purposes...' Creatively editing provided text into a beautiful markdown syntax... ```python\n# This Post was not designed to be flashy or attract attention, keep in mind that this is for the players - like you\n## Introducing Vera's Lobbies - NL Lobbies For All Purposes\n**And I mean it, just look at the features:**\n1. **Lobby**\n  - Instantly see who's active\n  - Send invite to selected player or invite everyone at once\n2. **Shoutbox**\n  - Just like Neverlose shoutbox but in menu!\n3. **Mailbox**\n  - Send a message to specified steamid / nl username that uses Lobbies\n  - Messages are encrypted and only recipient will see them\n  - Clear your mailbox fully on both ends (client-server) with just one button\n4. **Invites**\n  - List of every invited user and who invites you\n  - Invite and Invite All - if you prefer to keep only selected group of friends\n**Full instruction on every button, covering all features, is also available inside Script's Menu.**\nThat being said, I encourage you to try it: [Neverlose Market](https://en.neverlose.cc/market/item?id=RWjeBO)\n![Lobbies Screenshot](https://example.com/screenshot.png)\n```"
	},
	{
	    "instruction": "Convert the following review into a markdown post: 'I've recently tried Vera?s Lobbies and here's my take...'",
	    "input": "Transforming the review into markdown format...",
	    "output": "```python\n# I've recently tried Vera's Lobbies and here's my take\n**Pros:**\n- User-friendly interface\n- High security\n**Cons:**\n- Limited customization\n## Overall Rating: 4/5\nWould definitely recommend for casual gamers.\n```",
	    "text": "Convert the following review into a markdown post: 'I've recently tried Vera?s Lobbies and here's my take...' Transforming the review into markdown format... ```python\n# I've recently tried Vera's Lobbies and here's my take\n**Pros:**\n- User-friendly interface\n- High security\n**Cons:**\n- Limited customization\n## Overall Rating: 4/5\nWould definitely recommend for casual gamers.\n```"
	},
	{
	    "instruction": "Turn the following update notes into a markdown post: 'We've updated Vera's Lobbies with new features...'",
	    "input": "Converting the update notes into markdown format...",
	    "output": "```python\n# Vera's Lobbies Update Notes\n## New Features:\n- Real-time status indicators\n- Improved chat system\n## Bug Fixes:\n- Fixed minor graphical glitches\n## Upcoming Features:\n- Multi-language support\n**Download the latest version now!**\n```",
	    "text": "Turn the following update notes into a markdown post: 'We've updated Vera's Lobbies with new features...' Converting the update notes into markdown format... ```python\n# Vera's Lobbies Update Notes\n## New Features:\n- Real-time status indicators\n- Improved chat system\n## Bug Fixes:\n- Fixed minor graphical glitches\n## Upcoming Features:\n- Multi-language support\n**Download the latest version now!**\n```"
	},
	{
	    "instruction": "Create a markdown post from the following user testimonials: 'Users share their experience with Vera's Lobbies...'",
	    "input": "Crafting a markdown post from user testimonials...",
	    "output": "```python\n# User Testimonials for Vera's Lobbies\n## User1:\n> Absolutely loved it! The new features are amazing.\n## User2:\n> It's a game-changer. I can't go back to the old system now.\n## User3:\n> Good but needs some improvements. Still, it's worth the try.\n```",
	    "text": "Create a markdown post from the following user testimonials: 'Users share their experience with Vera's Lobbies...' Crafting a markdown post from user testimonials... ```python\n# User Testimonials for Vera's Lobbies\n## User1:\n> Absolutely loved it! The new features are amazing.\n## User2:\n> It's a game-changer. I can't go back to the old system now.\n## User3:\n> Good but needs some improvements. Still, it's worth the try.\n```"
	},
	{
	    "instruction": "Convert the following announcement about Vera's Lobbies tournament into a markdown post: 'Exciting news! We're hosting a Vera's Lobbies tournament...'",
	    "input": "Converting the tournament announcement into markdown format...",
	    "output": "```python\n# Exciting News: Vera's Lobbies Tournament!\n## Date: October 30, 2023\n**Prizes:**\n- 1st Place: $500\n- 2nd Place: $300\n## How to Join:\n1. Sign up on the website\n2. Join the discord channel\n**Spread the word and let's make this a tournament to remember!**\n```",
	    "text": "Convert the following announcement about Vera's Lobbies tournament into a markdown post: 'Exciting news! We're hosting a Vera's Lobbies tournament...' Converting the tournament announcement into markdown format... ```python\n# Exciting News: Vera's Lobbies Tournament!\n## Date: October 30, 2023\n**Prizes:**\n- 1st Place: $500\n- 2nd Place: $300\n## How to Join:\n1. Sign up on the website\n2. Join the discord channel\n**Spread the word and let's make this a tournament to remember!**\n```"
	},
	{
	    "instruction": "Transform the following user guide for Vera's Lobbies into a markdown post: 'Getting started with Vera?s Lobbies can be simple...'",
	    "input": "Converting the user guide into markdown format...",
	    "output": "```python\n# Getting Started with Vera's Lobbies\n## Installation:\n1. Download the installer\n2. Run the setup\n## First Steps:\n- Create an account\n- Customize your settings\n## Tips:\n- Always update to the latest version\n**Enjoy your experience with Vera's Lobbies!**\n```",
	    "text": "Transform the following user guide for Vera's Lobbies into a markdown post: 'Getting started with Vera?s Lobbies can be simple...' Converting the user guide into markdown format... ```python\n# Getting Started with Vera's Lobbies\n## Installation:\n1. Download the installer\n2. Run the setup\n## First Steps:\n- Create an account\n- Customize your settings\n## Tips:\n- Always update to the latest version\n**Enjoy your experience with Vera's Lobbies!**\n```"
	},
	{
	    "instruction": "Turn the following Q&A about Vera's Lobbies into a markdown post: 'You asked, we answered. Here are some frequently asked questions about Vera's Lobbies...'",
	    "input": "Transforming the Q&A into markdown format...",
	    "output": "```python\n# Vera's Lobbies Q&A\n## Q: How do I reset my password?\n**A**: Use the 'Forgot Password' link on the login page.\n## Q: Are my messages encrypted?\n**A**: Yes, all messages are encrypted for your security.\n## Q: What is the 'Shoutbox'?\n**A**: It's a built-in chat feature similar to Neverlose's shoutbox.\n```",
	    "text": "Turn the following Q&A about Vera's Lobbies into a markdown post: 'You asked, we answered. Here are some frequently asked questions about Vera's Lobbies...' Transforming the Q&A into markdown format... ```python\n# Vera's Lobbies Q&A\n## Q: How do I reset my password?\n**A**: Use the 'Forgot Password' link on the login page.\n## Q: Are my messages encrypted?\n**A**: Yes, all messages are encrypted for your security.\n## Q: What is the 'Shoutbox'?\n**A**: It's a built-in chat feature similar to Neverlose's shoutbox.\n```"
	},
	{
	    "instruction": "Create a markdown post from the following troubleshooting guide for Vera's Lobbies: 'Experiencing issues? Here's how to troubleshoot common problems...'",
	    "input": "Creating a markdown troubleshooting guide...",
	    "output": "```python\n# Troubleshooting Guide for Vera's Lobbies\n## Problem: Can't log in\n- Check your internet connection\n- Reset your password\n## Problem: Messages not sending\n- Refresh the page\n- Check for updates\n**For more support, visit our [Help Center](https://help.veraslobbies.com).**\n```",
	    "text": "Create a markdown post from the following troubleshooting guide for Vera's Lobbies: 'Experiencing issues? Here's how to troubleshoot common problems...' Creating a markdown troubleshooting guide... ```python\n# Troubleshooting Guide for Vera's Lobbies\n## Problem: Can't log in\n- Check your internet connection\n- Reset your password\n## Problem: Messages not sending\n- Refresh the page\n- Check for updates\n**For more support, visit our [Help Center](https://help.veraslobbies.com).**\n```"
	},
	{
	    "instruction": "Format the following release notes for Vera's Lobbies into a markdown post: 'We?re thrilled to announce the release of Vera's Lobbies 2.0...'",
	    "input": "Converting the release notes into markdown format...",
	    "output": "```python\n# Vera's Lobbies 2.0 Release Notes\n## What's New:\n- Voice Chat Integration\n- New User Interface\n## Improvements:\n- Faster load times\n- Enhanced security\n**Update now to enjoy the new features!**\n```",
	    "text": "Format the following release notes for Vera's Lobbies into a markdown post: 'We?re thrilled to announce the release of Vera's Lobbies 2.0...' Converting the release notes into markdown format... ```python\n# Vera's Lobbies 2.0 Release Notes\n## What's New:\n- Voice Chat Integration\n- New User Interface\n## Improvements:\n- Faster load times\n- Enhanced security\n**Update now to enjoy the new features!**\n```"
	},
	{
	    "instruction": "Convert the following developer interview about Vera's Lobbies into a markdown post: 'We sat down with the lead developer of Vera's Lobbies to discuss the future...'",
	    "input": "Transforming the developer interview into markdown format...",
	    "output": "```python\n# Developer Interview: The Future of Vera's Lobbies\nWe had the pleasure of sitting down with the lead developer of Vera's Lobbies.\n## Topics Covered:\n- [Upcoming Features](#upcoming-features)\n- [Security Measures](#security-measures)\n- [Community Involvement](#community-involvement)\n### Upcoming Features\n**Q**: What can users expect in the next update?\n**A**: We're focusing on real-time analytics and advanced chat features.\n### Security Measures\n**Q**: How secure is the platform?\n**A**: We implement end-to-end encryption to protect our users.\n### Community Involvement\n**Q**: How can the community get involved?\n**A**: We have an open beta program and we're always looking for feedback.\n**Don't miss out on the next big update! Stay tuned.**\n```",
	    "text": "Convert the following developer interview about Vera's Lobbies into a markdown post: 'We sat down with the lead developer of Vera's Lobbies to discuss the future...' Transforming the developer interview into markdown format... ```python\n# Developer Interview: The Future of Vera's Lobbies\nWe had the pleasure of sitting down with the lead developer of Vera's Lobbies.\n## Topics Covered:\n- [Upcoming Features](#upcoming-features)\n- [Security Measures](#security-measures)\n- [Community Involvement](#community-involvement)\n### Upcoming Features\n**Q**: What can users expect in the next update?\n**A**: We're focusing on real-time analytics and advanced chat features.\n### Security Measures\n**Q**: How secure is the platform?\n**A**: We implement end-to-end encryption to protect our users.\n### Community Involvement\n**Q**: How can the community get involved?\n**A**: We have an open beta program and we're always looking for feedback.\n**Don't miss out on the next big update! Stay tuned.**\n```"
	},
	{
	    "instruction": "Convert the following user testimonials for Vera's Lobbies into a longer markdown post: 'Our users share their long-term experiences with Vera?s Lobbies...'",
	    "input": "Transforming the long-term user testimonials into markdown format...",
	    "output": "```python\n# Long-Term User Testimonials for Vera's Lobbies\nHear what our users have to say after using Vera's Lobbies for more than a year.\n## Testimonial 1:\n**Username**: JohnDoe\n> I've been using Vera's Lobbies for over a year, and the updates have been fantastic. The developers really listen to the community.\n## Testimonial 2:\n**Username**: JaneDoe\n> The security features are robust, and I've never felt safer using an online service. Keep up the good work!\n## Testimonial 3:\n**Username**: Gamer2023\n> It has a bit of a learning curve, but once you get the hang of it, it's incredibly powerful. Definitely worth the investment of time.\n**Share your own experience on our [Forum](https://forum.veraslobbies.com)!**\n```",
	    "text": "Convert the following user testimonials for Vera's Lobbies into a longer markdown post: 'Our users share their long-term experiences with Vera?s Lobbies...' Transforming the long-term user testimonials into markdown format... ```python\n# Long-Term User Testimonials for Vera's Lobbies\nHear what our users have to say after using Vera's Lobbies for more than a year.\n## Testimonial 1:\n**Username**: JohnDoe\n> I've been using Vera's Lobbies for over a year, and the updates have been fantastic. The developers really listen to the community.\n## Testimonial 2:\n**Username**: JaneDoe\n> The security features are robust, and I've never felt safer using an online service. Keep up the good work!\n## Testimonial 3:\n**Username**: Gamer2023\n> It has a bit of a learning curve, but once you get the hang of it, it's incredibly powerful. Definitely worth the investment of time.\n**Share your own experience on our [Forum](https://forum.veraslobbies.com)!**\n```"
	},
	{
	    "instruction": "Format the following comprehensive FAQ section for Vera's Lobbies into a markdown post: 'We compiled a list of the most frequently asked questions and their detailed answers...'",
	    "input": "Creating a comprehensive markdown FAQ...",
	    "output": "```python\n# Comprehensive FAQ for Vera's Lobbies\n## Table of Contents:\n1. [Account Creation](#account-creation)\n2. [Security](#security)\n3. [Technical Issues](#technical-issues)\n### Account Creation\n**Q**: How do I create an account?\n**A**: Visit the sign-up page and fill out the required fields.\n**Q**: Can I use a temporary email?\n**A**: No, a valid email is required for verification.\n### Security\n**Q**: How do you protect user data?\n**A**: We employ AES-256 encryption and multiple layers of security.\n**Q**: Can I enable two-factor authentication?\n**A**: Yes, we highly recommend enabling 2FA for added security.\n### Technical Issues\n**Q**: What should I do if I encounter a bug?\n**A**: Report it to our support team for immediate assistance.\n**For further questions, contact our [Support Team](https://support.veraslobbies.com).**\n```",
	    "text": "Format the following comprehensive FAQ section for Vera's Lobbies into a markdown post: 'We compiled a list of the most frequently asked questions and their detailed answers...' Creating a comprehensive markdown FAQ... ```python\n# Comprehensive FAQ for Vera's Lobbies\n## Table of Contents:\n1. [Account Creation](#account-creation)\n2. [Security](#security)\n3. [Technical Issues](#technical-issues)\n### Account Creation\n**Q**: How do I create an account?\n**A**: Visit the sign-up page and fill out the required fields.\n**Q**: Can I use a temporary email?\n**A**: No, a valid email is required for verification.\n### Security\n**Q**: How do you protect user data?\n**A**: We employ AES-256 encryption and multiple layers of security.\n**Q**: Can I enable two-factor authentication?\n**A**: Yes, we highly recommend enabling 2FA for added security.\n### Technical Issues\n**Q**: What should I do if I encounter a bug?\n**A**: Report it to our support team for immediate assistance.\n**For further questions, contact our [Support Team](https://support.veraslobbies.com).**\n```"
	},
	{
	    "instruction": "Turn the following tutorial for Vera's Lobbies into a markdown post: 'We've put together a step-by-step guide to help you get the most out of Vera's Lobbies...'",
	    "input": "Transforming the tutorial into a markdown guide...",
	    "output": "```python\n# Step-by-Step Tutorial for Vera's Lobbies\nWelcome to the ultimate guide for Vera's Lobbies.\n## Sections:\n- [Getting Started](#getting-started)\n- [Advanced Features](#advanced-features)\n- [Troubleshooting](#troubleshooting)\n### Getting Started\n1. **Download the App**\n  - Visit our website to download the latest version.\n2. **Create an Account**\n  - Follow the on-screen instructions.\n### Advanced Features\n1. **Setting Up the Lobby**\n  - How to customize your personal lobby.\n2. **Using the Shoutbox**\n  - A guide to effective communication.\n### Troubleshooting\n1. **Connectivity Issues**\n  - Steps to resolve common network problems.\n2. **Account Recovery**\n  - How to regain access to your account.\n**For more tutorials, visit our [Learning Center](https://learn.veraslobbies.com).**\n```",
	    "text": "Turn the following tutorial for Vera's Lobbies into a markdown post: 'We've put together a step-by-step guide to help you get the most out of Vera's Lobbies...' Transforming the tutorial into a markdown guide... ```python\n# Step-by-Step Tutorial for Vera's Lobbies\nWelcome to the ultimate guide for Vera's Lobbies.\n## Sections:\n- [Getting Started](#getting-started)\n- [Advanced Features](#advanced-features)\n- [Troubleshooting](#troubleshooting)\n### Getting Started\n1. **Download the App**\n  - Visit our website to download the latest version.\n2. **Create an Account**\n  - Follow the on-screen instructions.\n### Advanced Features\n1. **Setting Up the Lobby**\n  - How to customize your personal lobby.\n2. **Using the Shoutbox**\n  - A guide to effective communication.\n### Troubleshooting\n1. **Connectivity Issues**\n  - Steps to resolve common network problems.\n2. **Account Recovery**\n  - How to regain access to your account.\n**For more tutorials, visit our [Learning Center](https://learn.veraslobbies.com).**\n```"
	},
	{
	    "instruction": "Convert the following news update for Vera's Lobbies into a markdown post: 'We're excited to share some significant updates to Vera's Lobbies...'",
	    "input": "Transforming the news update into markdown format...",
	    "output": "```python\n# Significant Updates to Vera's Lobbies\nWe have some big news to share!\n## What's New?\n- **Community Events**: Participate in weekly tournaments.\n- **User Profiles**: Customize your online presence.\n## What's Improved?\n- **Performance**: Enjoy faster loading times.\n- **Security**: Enhanced multi-factor authentication.\n## What's Next?\n- **Mobile App**: We're in the final stages of testing.\n**Join the discussion on our [Community Forum](https://community.veraslobbies.com) and tell us what you think!**\n```",
	    "text": "Convert the following news update for Vera's Lobbies into a markdown post: 'We're excited to share some significant updates to Vera's Lobbies...' Transforming the news update into markdown format... ```python\n# Significant Updates to Vera's Lobbies\nWe have some big news to share!\n## What's New?\n- **Community Events**: Participate in weekly tournaments.\n- **User Profiles**: Customize your online presence.\n## What's Improved?\n- **Performance**: Enjoy faster loading times.\n- **Security**: Enhanced multi-factor authentication.\n## What's Next?\n- **Mobile App**: We're in the final stages of testing.\n**Join the discussion on our [Community Forum](https://community.veraslobbies.com) and tell us what you think!**\n```"
	},
	{
	    "instruction": "Locate the search input box on Google and enter 'AI technology'",
	    "input": "Locating the search input box on Google and entering 'AI technology'...",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://www.google.com')\nsearch_box = driver.find_element(By.CSS_SELECTOR, \"input[name='q']\")\nsearch_box.send_keys('AI technology')\nsearch_box.send_keys(Keys.RETURN)\n```",
	    "text": "Locate the search input box on Google and enter 'AI technology' Locating the search input box on Google and entering 'AI technology'... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://www.google.com')\nsearch_box = driver.find_element(By.CSS_SELECTOR, \"input[name='q']\")\nsearch_box.send_keys('AI technology')\nsearch_box.send_keys(Keys.RETURN)\n```"
	},
	{
	    "instruction": "Locate the search input box on YouTube and enter 'Python tutorials'",
	    "input": "Locating the search input box on YouTube and entering 'Python tutorials'...",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://www.youtube.com')\nsearch_box = driver.find_element(By.CSS_SELECTOR, \"input[id='search']\")\nsearch_box.send_keys('Python tutorials')\nsearch_box.send_keys(Keys.RETURN)\n```",
	    "text": "Locate the search input box on YouTube and enter 'Python tutorials' Locating the search input box on YouTube and entering 'Python tutorials'... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://www.youtube.com')\nsearch_box = driver.find_element(By.CSS_SELECTOR, \"input[id='search']\")\nsearch_box.send_keys('Python tutorials')\nsearch_box.send_keys(Keys.RETURN)\n```"
	},
	{
	    "instruction": "Locate the search input box on Wikipedia and enter 'Machine learning'",
	    "input": "Locating the search input box on Wikipedia and entering 'Machine learning'...",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://www.wikipedia.org')\nsearch_box = driver.find_element(By.CSS_SELECTOR, \"input[id='searchInput']\")\nsearch_box.send_keys('Machine learning')\nsearch_box.send_keys(Keys.RETURN)\n```",
	    "text": "Locate the search input box on Wikipedia and enter 'Machine learning' Locating the search input box on Wikipedia and entering 'Machine learning'... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://www.wikipedia.org')\nsearch_box = driver.find_element(By.CSS_SELECTOR, \"input[id='searchInput']\")\nsearch_box.send_keys('Machine learning')\nsearch_box.send_keys(Keys.RETURN)\n```"
	},
	{
	    "instruction": "Locate the search input box on Bing and enter 'Cloud computing'",
	    "input": "Locating the search input box on Bing and entering 'Cloud computing'...",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://www.bing.com')\nsearch_box = driver.find_element(By.CSS_SELECTOR, \"input[name='q']\")\nsearch_box.send_keys('Cloud computing')\nsearch_box.send_keys(Keys.RETURN)\n```",
	    "text": "Locate the search input box on Bing and enter 'Cloud computing' Locating the search input box on Bing and entering 'Cloud computing'... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://www.bing.com')\nsearch_box = driver.find_element(By.CSS_SELECTOR, \"input[name='q']\")\nsearch_box.send_keys('Cloud computing')\nsearch_box.send_keys(Keys.RETURN)\n```"
	},
	{
	    "instruction": "Locate the search input box on DuckDuckGo and enter 'Quantum computing'",
	    "input": "Locating the search input box on DuckDuckGo and entering 'Quantum computing'...",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://duckduckgo.com')\nsearch_box = driver.find_element(By.CSS_SELECTOR, \"input[id='search_form_input_homepage']\")\nsearch_box.send_keys('Quantum computing')\nsearch_box.send_keys(Keys.RETURN)\n```",
	    "text": "Locate the search input box on DuckDuckGo and enter 'Quantum computing' Locating the search input box on DuckDuckGo and entering 'Quantum computing'... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://duckduckgo.com')\nsearch_box = driver.find_element(By.CSS_SELECTOR, \"input[id='search_form_input_homepage']\")\nsearch_box.send_keys('Quantum computing')\nsearch_box.send_keys(Keys.RETURN)\n```"
	},
	{
	    "instruction": "Locate the message input box on chat.openai.com and enter 'Hello, OpenAI!'",
	    "input": "Locating the message input box on chat.openai.com and entering 'Hello, OpenAI!'...",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://chat.openai.com')\nmessage_box = driver.find_element(By.CSS_SELECTOR, \"textarea[class='message-input']\")\nmessage_box.send_keys('Hello, OpenAI!')\nmessage_box.send_keys(Keys.RETURN)\n```",
	    "text": "Locate the message input box on chat.openai.com and enter 'Hello, OpenAI!' Locating the message input box on chat.openai.com and entering 'Hello, OpenAI!'... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://chat.openai.com')\nmessage_box = driver.find_element(By.CSS_SELECTOR, \"textarea[class='message-input']\")\nmessage_box.send_keys('Hello, OpenAI!')\nmessage_box.send_keys(Keys.RETURN)\n```"
	},
	{
	    "instruction": "Locate the tweet input box on Twitter and enter 'Tweeting via Selenium'",
	    "input": "Locating the tweet input box on Twitter and entering 'Tweeting via Selenium'...",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://twitter.com')\ntweet_box = driver.find_element(By.CSS_SELECTOR, \"textarea[aria-label='Tweet text']\")\ntweet_box.send_keys('Tweeting via Selenium')\ntweet_box.send_keys(Keys.RETURN)\n```",
	    "text": "Locate the tweet input box on Twitter and enter 'Tweeting via Selenium' Locating the tweet input box on Twitter and entering 'Tweeting via Selenium'... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://twitter.com')\ntweet_box = driver.find_element(By.CSS_SELECTOR, \"textarea[aria-label='Tweet text']\")\ntweet_box.send_keys('Tweeting via Selenium')\ntweet_box.send_keys(Keys.RETURN)\n```"
	},
	{
	    "instruction": "Locate the comment input box on Reddit and enter 'This is a comment'",
	    "input": "Locating the comment input box on Reddit and entering 'This is a comment'...",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://www.reddit.com')\ncomment_box = driver.find_element(By.CSS_SELECTOR, \"textarea[name='comment']\")\ncomment_box.send_keys('This is a comment')\ncomment_box.send_keys(Keys.RETURN)\n```",
	    "text": "Locate the comment input box on Reddit and enter 'This is a comment' Locating the comment input box on Reddit and entering 'This is a comment'... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://www.reddit.com')\ncomment_box = driver.find_element(By.CSS_SELECTOR, \"textarea[name='comment']\")\ncomment_box.send_keys('This is a comment')\ncomment_box.send_keys(Keys.RETURN)\n```"
	},
	{
	    "instruction": "Locate the search input box on Instagram and enter 'OpenAI'",
	    "input": "Locating the search input box on Instagram and entering 'OpenAI'...",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://www.instagram.com')\nsearch_box = driver.find_element(By.CSS_SELECTOR, \"input[placeholder='Search']\")\nsearch_box.send_keys('OpenAI')\nsearch_box.send_keys(Keys.RETURN)\n```",
	    "text": "Locate the search input box on Instagram and enter 'OpenAI' Locating the search input box on Instagram and entering 'OpenAI'... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://www.instagram.com')\nsearch_box = driver.find_element(By.CSS_SELECTOR, \"input[placeholder='Search']\")\nsearch_box.send_keys('OpenAI')\nsearch_box.send_keys(Keys.RETURN)\n```"
	},
	{
	    "instruction": "Locate the message input box on Facebook Messenger and enter 'Hi there!'",
	    "input": "Locating the message input box on Facebook Messenger and entering 'Hi there!'...",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://www.messenger.com')\nmessage_box = driver.find_element(By.CSS_SELECTOR, \"textarea[name='message_body']\")\nmessage_box.send_keys('Hi there!')\nmessage_box.send_keys(Keys.RETURN)\n```",
	    "text": "Locate the message input box on Facebook Messenger and enter 'Hi there!' Locating the message input box on Facebook Messenger and entering 'Hi there!'... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://www.messenger.com')\nmessage_box = driver.find_element(By.CSS_SELECTOR, \"textarea[name='message_body']\")\nmessage_box.send_keys('Hi there!')\nmessage_box.send_keys(Keys.RETURN)\n```"
	},
	{
	    "instruction": "Search for a laptop on Allegro",
	    "input": "Searching for a laptop on Allegro...",
	    "output": "```python\nfrom bs4 import BeautifulSoup\nimport requests\nsearch_query = 'laptop'\nresponse = requests.get(f'https://allegro.pl/listing?string={search_query}')\nsoup = BeautifulSoup(response.text, 'html.parser')\nproducts = soup.select('.offer-title')\nfor product in products[:5]:\n    print(product.text)\n```",
	    "text": "Search for a laptop on Allegro Searching for a laptop on Allegro... ```python\nfrom bs4 import BeautifulSoup\nimport requests\nsearch_query = 'laptop'\nresponse = requests.get(f'https://allegro.pl/listing?string={search_query}')\nsoup = BeautifulSoup(response.text, 'html.parser')\nproducts = soup.select('.offer-title')\nfor product in products[:5]:\n    print(product.text)\n```"
	},
	{
	    "instruction": "Find the cheapest smartphone on Allegro",
	    "input": "Searching for the cheapest smartphone on Allegro...",
	    "output": "```python\nimport requests\nimport json\nsearch_query = 'smartphone'\nresponse = requests.get(f'https://allegroapi.io/items?phrase={search_query}&sort=price')\ncheapest_item = json.loads(response.text)['items'][0]\nprint(f'Cheapest smartphone: {cheapest_item['name']}, Price: {cheapest_item['price']}')\n```",
	    "text": "Find the cheapest smartphone on Allegro Searching for the cheapest smartphone on Allegro... ```python\nimport requests\nimport json\nsearch_query = 'smartphone'\nresponse = requests.get(f'https://allegroapi.io/items?phrase={search_query}&sort=price')\ncheapest_item = json.loads(response.text)['items'][0]\nprint(f'Cheapest smartphone: {cheapest_item['name']}, Price: {cheapest_item['price']}')\n```"
	},
	{
	    "instruction": "Search Allegro for gaming consoles",
	    "input": "Searching for gaming consoles on Allegro...",
	    "output": "```python\nfrom bs4 import BeautifulSoup\nimport requests\nsearch_query = 'gaming console'\nresponse = requests.get(f'https://allegro.pl/listing?string={search_query}')\nsoup = BeautifulSoup(response.text, 'html.parser')\nconsoles = soup.select('.offer-title')\nfor console in consoles[:5]:\n    print(console.text)\n```",
	    "text": "Search Allegro for gaming consoles Searching for gaming consoles on Allegro... ```python\nfrom bs4 import BeautifulSoup\nimport requests\nsearch_query = 'gaming console'\nresponse = requests.get(f'https://allegro.pl/listing?string={search_query}')\nsoup = BeautifulSoup(response.text, 'html.parser')\nconsoles = soup.select('.offer-title')\nfor console in consoles[:5]:\n    print(console.text)\n```"
	},
	{
	    "instruction": "List top 5 rated products on Allegro",
	    "input": "Listing top 5 rated products on Allegro...",
	    "output": "```python\nimport requests\nimport json\nresponse = requests.get('https://allegroapi.io/items?sort=rating')\ntop_rated = json.loads(response.text)['items'][:5]\nfor product in top_rated:\n    print(f'{product['name']}, Rating: {product['rating']}')\n```",
	    "text": "List top 5 rated products on Allegro Listing top 5 rated products on Allegro... ```python\nimport requests\nimport json\nresponse = requests.get('https://allegroapi.io/items?sort=rating')\ntop_rated = json.loads(response.text)['items'][:5]\nfor product in top_rated:\n    print(f'{product['name']}, Rating: {product['rating']}')\n```"
	},
	{
	    "instruction": "Search for a laptop on eBay",
	    "input": "Searching for a laptop on eBay...",
	    "output": "```python\nimport requests\nimport json\nsearch_query = 'laptop'\nresponse = requests.get(f'https://api.ebay.com/buy/browse/v1/item_summary/search?q={search_query}')\nitems = json.loads(response.text)['itemSummaries']\nfor item in items[:5]:\n    print(item['title'])\n```",
	    "text": "Search for a laptop on eBay Searching for a laptop on eBay... ```python\nimport requests\nimport json\nsearch_query = 'laptop'\nresponse = requests.get(f'https://api.ebay.com/buy/browse/v1/item_summary/search?q={search_query}')\nitems = json.loads(response.text)['itemSummaries']\nfor item in items[:5]:\n    print(item['title'])\n```"
	},
	{
	    "instruction": "Find the cheapest smartphone on eBay",
	    "input": "Searching for the cheapest smartphone on eBay...",
	    "output": "```python\nimport requests\nimport json\nsearch_query = 'smartphone'\nresponse = requests.get(f'https://api.ebay.com/buy/browse/v1/item_summary/search?q={search_query}&sort=price')\ncheapest_item = json.loads(response.text)['itemSummaries'][0]\nprint(f'Cheapest smartphone: {cheapest_item['title']}, Price: {cheapest_item['price']['value']}')\n```",
	    "text": "Find the cheapest smartphone on eBay Searching for the cheapest smartphone on eBay... ```python\nimport requests\nimport json\nsearch_query = 'smartphone'\nresponse = requests.get(f'https://api.ebay.com/buy/browse/v1/item_summary/search?q={search_query}&sort=price')\ncheapest_item = json.loads(response.text)['itemSummaries'][0]\nprint(f'Cheapest smartphone: {cheapest_item['title']}, Price: {cheapest_item['price']['value']}')\n```"
	},
	{
	    "instruction": "Get eBay product details by ID",
	    "input": "Getting product details for ID 12345 on eBay...",
	    "output": "```python\nimport requests\nimport json\nproduct_id = '12345'\nresponse = requests.get(f'https://api.ebay.com/buy/browse/v1/item/{product_id}')\nproduct_details = json.loads(response.text)\nprint(f'Product Name: {product_details['title']}, Price: {product_details['price']['value']}')\n```",
	    "text": "Get eBay product details by ID Getting product details for ID 12345 on eBay... ```python\nimport requests\nimport json\nproduct_id = '12345'\nresponse = requests.get(f'https://api.ebay.com/buy/browse/v1/item/{product_id}')\nproduct_details = json.loads(response.text)\nprint(f'Product Name: {product_details['title']}, Price: {product_details['price']['value']}')\n```"
	},
	{
	    "instruction": "Search eBay for gaming consoles",
	    "input": "Searching for gaming consoles on eBay...",
	    "output": "```python\nimport requests\nimport json\nsearch_query = 'gaming console'\nresponse = requests.get(f'https://api.ebay.com/buy/browse/v1/item_summary/search?q={search_query}')\nitems = json.loads(response.text)['itemSummaries']\nfor item in items[:5]:\n    print(item['title'])\n```",
	    "text": "Search eBay for gaming consoles Searching for gaming consoles on eBay... ```python\nimport requests\nimport json\nsearch_query = 'gaming console'\nresponse = requests.get(f'https://api.ebay.com/buy/browse/v1/item_summary/search?q={search_query}')\nitems = json.loads(response.text)['itemSummaries']\nfor item in items[:5]:\n    print(item['title'])\n```"
	},
	{
	    "instruction": "List top 5 rated products on eBay",
	    "input": "Listing top 5 rated products on eBay...",
	    "output": "```python\nimport requests\nimport json\nresponse = requests.get('https://api.ebay.com/buy/browse/v1/item_summary/search?q=&sort=rating')\ntop_rated = json.loads(response.text)['itemSummaries'][:5]\nfor product in top_rated:\n    print(f'{product['title']}, Rating: {product['seller']['feedbackPercentage']}')\n```",
	    "text": "List top 5 rated products on eBay Listing top 5 rated products on eBay... ```python\nimport requests\nimport json\nresponse = requests.get('https://api.ebay.com/buy/browse/v1/item_summary/search?q=&sort=rating')\ntop_rated = json.loads(response.text)['itemSummaries'][:5]\nfor product in top_rated:\n    print(f'{product['title']}, Rating: {product['seller']['feedbackPercentage']}')\n```"
	},
	{
	    "instruction": "Search for books on Allegro with Polish query",
	    "input": "Searching for books on Allegro with Polish query...",
	    "output": "```python\nfrom bs4 import BeautifulSoup\nimport requests\nsearch_query = 'ksi??ki'\nresponse = requests.get(f'https://allegro.pl/listing?string={search_query}')\nsoup = BeautifulSoup(response.text, 'html.parser')\nbooks = soup.select('.offer-title')\nfor book in books[:5]:\n    print(book.text)\n```",
	    "text": "Search for books on Allegro with Polish query Searching for books on Allegro with Polish query... ```python\nfrom bs4 import BeautifulSoup\nimport requests\nsearch_query = 'ksi??ki'\nresponse = requests.get(f'https://allegro.pl/listing?string={search_query}')\nsoup = BeautifulSoup(response.text, 'html.parser')\nbooks = soup.select('.offer-title')\nfor book in books[:5]:\n    print(book.text)\n```"
	},
	{
	    "instruction": "Code a function to fetch the price of a product from ceneo.pl",
	    "input": "Code a function for fetching product prices...",
	    "output": "```python\nimport requests as r\nfrom bs4 import BeautifulSoup as bs\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f\"https://www.ceneo.pl/;szukaj-{q}\"\n    res = r.get(u)\n    if res.status_code != 200:\n        return \"Fail\"\n    s = bs(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else \"Not found\"\nprint(p_c('Nvidia GTX 1060 Ti'))\n```",
	    "text": "Code a function to fetch the price of a product from ceneo.pl Code a function for fetching product prices... ```python\nimport requests as r\nfrom bs4 import BeautifulSoup as bs\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f\"https://www.ceneo.pl/;szukaj-{q}\"\n    res = r.get(u)\n    if res.status_code != 200:\n        return \"Fail\"\n    s = bs(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else \"Not found\"\nprint(p_c('Nvidia GTX 1060 Ti'))\n```"
	},
	{
	    "instruction": "Find the cheapest laptop on Ceneo",
	    "input": "Searching for the cheapest laptop on Ceneo...",
	    "output": "```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('laptop'))\n```",
	    "text": "Find the cheapest laptop on Ceneo Searching for the cheapest laptop on Ceneo... ```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('laptop'))\n```"
	},
	{
	    "instruction": "Search for a 4K TV on Ceneo",
	    "input": "Searching for a 4K TV on Ceneo...",
	    "output": "```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('4K TV'))\n```",
	    "text": "Search for a 4K TV on Ceneo Searching for a 4K TV on Ceneo... ```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('4K TV'))\n```"
	},
	{
	    "instruction": "Find gaming accessories on Ceneo",
	    "input": "Searching for gaming accessories on Ceneo...",
	    "output": "```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('gaming accessories'))\n```",
	    "text": "Find gaming accessories on Ceneo Searching for gaming accessories on Ceneo... ```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('gaming accessories'))\n```"
	},
	{
	    "instruction": "Search for Bluetooth headphones on Ceneo",
	    "input": "Searching for Bluetooth headphones on Ceneo...",
	    "output": "```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('Bluetooth headphones'))\n```",
	    "text": "Search for Bluetooth headphones on Ceneo Searching for Bluetooth headphones on Ceneo... ```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('Bluetooth headphones'))\n```"
	},
	{
	    "instruction": "Find the latest iPhone on Ceneo",
	    "input": "Searching for the latest iPhone on Ceneo...",
	    "output": "```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('latest iPhone'))\n```",
	    "text": "Find the latest iPhone on Ceneo Searching for the latest iPhone on Ceneo... ```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('latest iPhone'))\n```"
	},
	{
	    "instruction": "Find the cheapest laptop on Ceneo with Polish query",
	    "input": "Searching for the cheapest laptop on Ceneo with Polish query...",
	    "output": "```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('najta?szy laptop'))\n```",
	    "text": "Find the cheapest laptop on Ceneo with Polish query Searching for the cheapest laptop on Ceneo with Polish query... ```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('najta?szy laptop'))\n```"
	},
	{
	    "instruction": "Search for a 4K TV on Ceneo with Polish query",
	    "input": "Searching for a 4K TV on Ceneo with Polish query...",
	    "output": "```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('telewizor 4K'))\n```",
	    "text": "Search for a 4K TV on Ceneo with Polish query Searching for a 4K TV on Ceneo with Polish query... ```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('telewizor 4K'))\n```"
	},
	{
	    "instruction": "Find gaming accessories on Ceneo with Polish query",
	    "input": "Searching for gaming accessories on Ceneo with Polish query...",
	    "output": "```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('akcesoria do gier'))\n```",
	    "text": "Find gaming accessories on Ceneo with Polish query Searching for gaming accessories on Ceneo with Polish query... ```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('akcesoria do gier'))\n```"
	},
	{
	    "instruction": "Search for Bluetooth headphones on Ceneo with Polish query",
	    "input": "Searching for Bluetooth headphones on Ceneo with Polish query...",
	    "output": "```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('s?uchawki Bluetooth'))\n```",
	    "text": "Search for Bluetooth headphones on Ceneo with Polish query Searching for Bluetooth headphones on Ceneo with Polish query... ```python\nimport requests\nfrom bs4 import BeautifulSoup\ndef p_c(q):\n    q = q.replace(' ', '+')\n    u = f'https://www.ceneo.pl/;szukaj-{q};0112-0;szbd-0'\n    res = requests.get(u)\n    s = BeautifulSoup(res.text, 'html.parser')\n    p = s.find('span', {'class': 'price'})\n    return p.text if p else 'Not found'\nprint(p_c('s?uchawki Bluetooth'))\n```"
	},
	{
	    "instruction": "Scan for suspicious files",
	    "input": "Checking for suspicious files '.exe, .dll, .vbs'...",
	    "output": "```python\nimport os\nsuspicious_extensions = ['.exe', '.dll', '.vbs']\nfor root, dirs, files in os.walk('C:/'):\n    for file in files:\n        if any(file.endswith(ext) for ext in suspicious_extensions):\n            print(f\"Suspicious file found: {os.path.join(root, file)}\")\n```",
	    "text": "Scan for suspicious files Checking for suspicious files '.exe, .dll, .vbs'... ```python\nimport os\nsuspicious_extensions = ['.exe', '.dll', '.vbs']\nfor root, dirs, files in os.walk('C:/'):\n    for file in files:\n        if any(file.endswith(ext) for ext in suspicious_extensions):\n            print(f\"Suspicious file found: {os.path.join(root, file)}\")\n```"
	},
	{
	    "instruction": "Check running processes",
	    "input": "Checking current running processes...",
	    "output": "```python\nimport psutil\nfor process in psutil.process_iter(attrs=['pid', 'name']):\n    print(process)\n```",
	    "text": "Check running processes Checking current running processes... ```python\nimport psutil\nfor process in psutil.process_iter(attrs=['pid', 'name']):\n    print(process)\n```"
	},
	{
	    "instruction": "Detect unusual network traffic",
	    "input": "Detecting unusual network traffic...",
	    "output": "```python\nimport scapy.all as scapy\ndef packet_callback(packet):\n    if packet[scapy.TCP].dport > 8000:\n        print(f'Unusual traffic detected: {packet.summary()}')\nscapy.sniff(prn=packet_callback, store=0)\n```",
	    "text": "Detect unusual network traffic Detecting unusual network traffic... ```python\nimport scapy.all as scapy\ndef packet_callback(packet):\n    if packet[scapy.TCP].dport > 8000:\n        print(f'Unusual traffic detected: {packet.summary()}')\nscapy.sniff(prn=packet_callback, store=0)\n```"
	},
	{
	    "instruction": "Check for open ports",
	    "input": "Scanning a range of ports to find which are open...",
	    "output": "```python\nimport socket\nfor port in range(20, 1024):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    socket.setdefaulttimeout(1)\n    result = s.connect_ex(('localhost', port))\n    if result == 0:\n        print(f'Port {port} is open')\n    s.close()\n```",
	    "text": "Check for open ports Scanning a range of ports to find which are open... ```python\nimport socket\nfor port in range(20, 1024):\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    socket.setdefaulttimeout(1)\n    result = s.connect_ex(('localhost', port))\n    if result == 0:\n        print(f'Port {port} is open')\n    s.close()\n```"
	},
	{
	    "instruction": "Monitor file changes",
	    "input": "Monitoring file changes...",
	    "output": "```python\nimport time\nimport os\nprev_files = os.listdir('.')\nwhile True:\n    new_files = os.listdir('.')\n    added = [f for f in new_files if not f in prev_files]\n    removed = [f for f in prev_files if not f in new_files]\n    if added: print(f'Added: {added}')\n    if removed: print(f'Removed: {removed}')\n    prev_files = new_files\n    time.sleep(1)\n```",
	    "text": "Monitor file changes Monitoring file changes... ```python\nimport time\nimport os\nprev_files = os.listdir('.')\nwhile True:\n    new_files = os.listdir('.')\n    added = [f for f in new_files if not f in prev_files]\n    removed = [f for f in prev_files if not f in new_files]\n    if added: print(f'Added: {added}')\n    if removed: print(f'Removed: {removed}')\n    prev_files = new_files\n    time.sleep(1)\n```"
	},
	{
	    "instruction": "Monitor file changes in '/example/path/to/directory'",
	    "input": "Monitoring a specific directory '/example/path/to/directory' for any new files or modified files...",
	    "output": "```python\nimport time\nimport os\ndirectory_to_watch = '/example/path/to/directory'\nprev_files = os.listdir(directory_to_watch)\nwhile True:\n    new_files = os.listdir(directory_to_watch)\n    added = [f for f in new_files if not f in prev_files]\n    removed = [f for f in prev_files if not f in new_files]\n    if added: print(f'Added: {added}')\n    if removed: print(f'Removed: {removed}')\n    prev_files = new_files\n    time.sleep(1)\n```",
	    "text": "Monitor file changes in '/example/path/to/directory' Monitoring a specific directory '/example/path/to/directory' for any new files or modified files... ```python\nimport time\nimport os\ndirectory_to_watch = '/example/path/to/directory'\nprev_files = os.listdir(directory_to_watch)\nwhile True:\n    new_files = os.listdir(directory_to_watch)\n    added = [f for f in new_files if not f in prev_files]\n    removed = [f for f in prev_files if not f in new_files]\n    if added: print(f'Added: {added}')\n    if removed: print(f'Removed: {removed}')\n    prev_files = new_files\n    time.sleep(1)\n```"
	},
	{
	    "instruction": "Encrypt a message using AES encryption with key 'ExampleKey123'",
	    "input": "Encrypting a message using AES encryption with key 'ExampleKey123'...",
	    "output": "```python\nfrom Crypto.Cipher import AES\nimport base64\nkey = 'ExampleKey123'\ncipher = AES.new(key, AES.MODE_EAX)\nmsg = cipher.encrypt('ExampleMessage')\nprint(base64.b64encode(msg))\n```",
	    "text": "Encrypt a message using AES encryption with key 'ExampleKey123' Encrypting a message using AES encryption with key 'ExampleKey123'... ```python\nfrom Crypto.Cipher import AES\nimport base64\nkey = 'ExampleKey123'\ncipher = AES.new(key, AES.MODE_EAX)\nmsg = cipher.encrypt('ExampleMessage')\nprint(base64.b64encode(msg))\n```"
	},
	{
	    "instruction": "Scan for open ports on local machine",
	    "input": "Scanning for open ports on the local machine...",
	    "output": "```python\nimport socket\nfor port in range(20, 1025):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.settimeout(1)\n    result = sock.connect_ex(('localhost', port))\n    if result == 0:\n        print(f'Port {port} is open.')\n```",
	    "text": "Scan for open ports on local machine Scanning for open ports on the local machine... ```python\nimport socket\nfor port in range(20, 1025):\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    sock.settimeout(1)\n    result = sock.connect_ex(('localhost', port))\n    if result == 0:\n        print(f'Port {port} is open.')\n```"
	},
	{
	    "instruction": "Check for external IP changes",
	    "input": "Monitoring for changes in the external IP address...",
	    "output": "```python\nimport requests\nimport time\nlast_ip = ''\nwhile True:\n    current_ip = requests.get('https://api64.ipify.org?format=json').json()['ip']\n    if current_ip != last_ip:\n        print(f'External IP address changed: {current_ip}')\n        last_ip = current_ip\n    time.sleep(60)\n```",
	    "text": "Check for external IP changes Monitoring for changes in the external IP address... ```python\nimport requests\nimport time\nlast_ip = ''\nwhile True:\n    current_ip = requests.get('https://api64.ipify.org?format=json').json()['ip']\n    if current_ip != last_ip:\n        print(f'External IP address changed: {current_ip}')\n        last_ip = current_ip\n    time.sleep(60)\n```"
	},
	{
	    "instruction": "Check SSL/TLS security of a website",
	    "input": "Checking the SSL/TLS security of example.com...",
	    "output": "```python\nimport ssl\ncontext = ssl.create_default_context()\nwith context.wrap_socket(socket.socket(), server_hostname='example.com') as s:\n    s.connect(('example.com', 443))\n    print('SSL/TLS version:', s.version())\n```",
	    "text": "Check SSL/TLS security of a website Checking the SSL/TLS security of example.com... ```python\nimport ssl\ncontext = ssl.create_default_context()\nwith context.wrap_socket(socket.socket(), server_hostname='example.com') as s:\n    s.connect(('example.com', 443))\n    print('SSL/TLS version:', s.version())\n```"
	},
	{
	    "instruction": "Check if I'm connected through a VPN",
	    "input": "Checking if the machine is connected through a VPN...",
	    "output": "```python\nimport requests\nip_data = requests.get('https://ipapi.co/json/').json()\nif ip_data.get('org', '').lower().find('vpn') != -1:\n    print('Connected through a VPN.')\n```",
	    "text": "Check if I'm connected through a VPN Checking if the machine is connected through a VPN... ```python\nimport requests\nip_data = requests.get('https://ipapi.co/json/').json()\nif ip_data.get('org', '').lower().find('vpn') != -1:\n    print('Connected through a VPN.')\n```"
	},
	{
	    "instruction": "Check if DNS is secure",
	    "input": "Checking if the DNS is secure...",
	    "output": "```python\nimport dns.resolver\ntry:\n    dns.resolver.resolve('dnssec-failed.org', 'A')\n    print('DNS is not secure.')\nexcept dns.resolver.NXDOMAIN:\n    print('DNS is secure.')\n```",
	    "text": "Check if DNS is secure Checking if the DNS is secure... ```python\nimport dns.resolver\ntry:\n    dns.resolver.resolve('dnssec-failed.org', 'A')\n    print('DNS is not secure.')\nexcept dns.resolver.NXDOMAIN:\n    print('DNS is secure.')\n```"
	},
	{
	    "instruction": "Check for suspicious user agents containing 'example_curl'",
	    "input": "Checking incoming HTTP requests for suspicious user agents containing 'example_curl'...",
	    "output": "```python\nfrom flask import Flask, request\napp = Flask(__name__)\n@app.route('/')\ndef check_user_agent():\n    user_agent = request.headers.get('User-Agent')\n    if 'example_curl' in user_agent:\n        return 'Suspicious user agent detected', 403\n    return 'Hello, World!'\n```",
	    "text": "Check for suspicious user agents containing 'example_curl' Checking incoming HTTP requests for suspicious user agents containing 'example_curl'... ```python\nfrom flask import Flask, request\napp = Flask(__name__)\n@app.route('/')\ndef check_user_agent():\n    user_agent = request.headers.get('User-Agent')\n    if 'example_curl' in user_agent:\n        return 'Suspicious user agent detected', 403\n    return 'Hello, World!'\n```"
	},
	{
	    "instruction": "Identify suspicious IP addresses from the list ['example_192.168.1.1', 'example_192.168.1.2']",
	    "input": "Checking a list of IPs against a list of known malicious IPs...",
	    "output": "```python\nmalicious_ips = ['example_192.168.1.2', 'example_10.0.0.3']\nincoming_ips = ['example_192.168.1.1', 'example_192.168.1.2']\nfor ip in incoming_ips:\n    if ip in malicious_ips:\n        print(f'Suspicious IP detected: {ip}')\n```",
	    "text": "Identify suspicious IP addresses from the list ['example_192.168.1.1', 'example_192.168.1.2'] Checking a list of IPs against a list of known malicious IPs... ```python\nmalicious_ips = ['example_192.168.1.2', 'example_10.0.0.3']\nincoming_ips = ['example_192.168.1.1', 'example_192.168.1.2']\nfor ip in incoming_ips:\n    if ip in malicious_ips:\n        print(f'Suspicious IP detected: {ip}')\n```"
	},
	{
	    "instruction": "Check for rootkits in '/example/path/to/scan'",
	    "input": "Scanning '/example/path/to/scan' for known rootkit signatures...",
	    "output": "```python\nimport os\nrootkit_signatures = ['example_suspicious_file1', 'example_suspicious_file2']\nfor root, dirs, files in os.walk('/example/path/to/scan'):\n    for file in files:\n        if file in rootkit_signatures:\n            print(f'Potential rootkit detected: {file}')\n```",
	    "text": "Check for rootkits in '/example/path/to/scan' Scanning '/example/path/to/scan' for known rootkit signatures... ```python\nimport os\nrootkit_signatures = ['example_suspicious_file1', 'example_suspicious_file2']\nfor root, dirs, files in os.walk('/example/path/to/scan'):\n    for file in files:\n        if file in rootkit_signatures:\n            print(f'Potential rootkit detected: {file}')\n```"
	},
	{
	    "instruction": "Check for suspicious registry entries in 'SYSTEM\\\\ExampleControlSet\\\\Services'",
	    "input": "Checking Windows registry in 'SYSTEM\\\\ExampleControlSet\\\\Services' for suspicious entries...",
	    "output": "```python\nimport winreg\nkey = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 'SYSTEM\\\\ExampleControlSet\\\\Services')\nfor i in range(0, winreg.QueryInfoKey(key)[0]):\n    name = winreg.EnumKey(key, i)\n    if 'example_suspicious_entry' in name:\n        print(f'Suspicious registry entry detected: {name}')\n```",
	    "text": "Check for suspicious registry entries in 'SYSTEM\\\\ExampleControlSet\\\\Services' Checking Windows registry in 'SYSTEM\\\\ExampleControlSet\\\\Services' for suspicious entries... ```python\nimport winreg\nkey = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, 'SYSTEM\\\\ExampleControlSet\\\\Services')\nfor i in range(0, winreg.QueryInfoKey(key)[0]):\n    name = winreg.EnumKey(key, i)\n    if 'example_suspicious_entry' in name:\n        print(f'Suspicious registry entry detected: {name}')\n```"
	},
	{
	    "instruction": "Convert 'example_input.xml' to 'example_output.json'",
	    "input": "Converting 'example_input.xml' to 'example_output.json'...",
	    "output": "```python\nimport xml.etree.ElementTree as ET\nimport json\ntree = ET.parse('example_input.xml')\nroot = tree.getroot()\ndata = {root.tag: root.attrib}\njson_data = json.dumps(data)\nwith open('example_output.json', 'w') as f:\n    f.write(json_data)\n```",
	    "text": "Convert 'example_input.xml' to 'example_output.json' Converting 'example_input.xml' to 'example_output.json'... ```python\nimport xml.etree.ElementTree as ET\nimport json\ntree = ET.parse('example_input.xml')\nroot = tree.getroot()\ndata = {root.tag: root.attrib}\njson_data = json.dumps(data)\nwith open('example_output.json', 'w') as f:\n    f.write(json_data)\n```"
	},
	{
	    "instruction": "Automate SSH login to 'example_hostname' with username 'example_username'",
	    "input": "SSH into 'example_hostname' with username 'example_username'...",
	    "output": "```python\nimport paramiko\nssh = paramiko.SSHClient()\nssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\nssh.connect('example_hostname', username='example_username', password='example_password')\nstdin, stdout, stderr = ssh.exec_command('ls')\nprint(stdout.read().decode())\n```",
	    "text": "Automate SSH login to 'example_hostname' with username 'example_username' SSH into 'example_hostname' with username 'example_username'... ```python\nimport paramiko\nssh = paramiko.SSHClient()\nssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\nssh.connect('example_hostname', username='example_username', password='example_password')\nstdin, stdout, stderr = ssh.exec_command('ls')\nprint(stdout.read().decode())\n```"
	},
	{
	    "instruction": "Extract EXIF data from 'example_image.jpg'",
	    "input": "Extracting EXIF data from 'example_image.jpg'...",
	    "output": "```python\nfrom PIL import Image\nimage = Image.open('example_image.jpg')\nexif_data = image._getexif()\nfor tag, value in exif_data.items():\n    print(f'{tag}: {value}')\n```",
	    "text": "Extract EXIF data from 'example_image.jpg' Extracting EXIF data from 'example_image.jpg'... ```python\nfrom PIL import Image\nimage = Image.open('example_image.jpg')\nexif_data = image._getexif()\nfor tag, value in exif_data.items():\n    print(f'{tag}: {value}')\n```"
	},
	{
	    "instruction": "Scrape and store tweets",
	    "input": "Scraping and storing tweets...",
	    "output": "```python\nimport tweepy\nauth = tweepy.OAuthHandler('consumer_key', 'consumer_secret')\nauth.set_access_token('access_token', 'access_secret')\napi = tweepy.API(auth)\ntweets = api.user_timeline(screen_name='username', count=10)\nwith open('tweets.txt', 'w') as f:\n    for tweet in tweets:\n        f.write(tweet.text + '\\n')\n```",
	    "text": "Scrape and store tweets Scraping and storing tweets... ```python\nimport tweepy\nauth = tweepy.OAuthHandler('consumer_key', 'consumer_secret')\nauth.set_access_token('access_token', 'access_secret')\napi = tweepy.API(auth)\ntweets = api.user_timeline(screen_name='username', count=10)\nwith open('tweets.txt', 'w') as f:\n    for tweet in tweets:\n        f.write(tweet.text + '\\n')\n```"
	},
	{
	    "instruction": "Proceed with scraping and storing tweets of username '@example_username'",
	    "input": "Scraping tweets and storing them...",
	    "output": "```python\nimport tweepy\nauth = tweepy.OAuthHandler('example_consumer_key', 'example_consumer_secret')\nauth.set_access_token('example_access_token', 'example_access_secret')\napi = tweepy.API(auth)\ntweets = api.user_timeline(screen_name='example_username', count=10)\nwith open('example_tweets.txt', 'w') as f:\n    for tweet in tweets:\n        f.write(tweet.text + '\\n')\n```",
	    "text": "Proceed with scraping and storing tweets of username '@example_username' Scraping tweets and storing them... ```python\nimport tweepy\nauth = tweepy.OAuthHandler('example_consumer_key', 'example_consumer_secret')\nauth.set_access_token('example_access_token', 'example_access_secret')\napi = tweepy.API(auth)\ntweets = api.user_timeline(screen_name='example_username', count=10)\nwith open('example_tweets.txt', 'w') as f:\n    for tweet in tweets:\n        f.write(tweet.text + '\\n')\n```"
	},
	{
	    "instruction": "Proceed with monitoring a webpage for changes",
	    "input": "Monitoring a webpage for changes...",
	    "output": "```python\nfrom bs4 import BeautifulSoup\nimport requests\nimport time\nprev_content = ''\nwhile True:\n    r = requests.get('http://example.com')\n    soup = BeautifulSoup(r.text, 'html.parser')\n    current_content = soup.find('tag', {'class': 'class_name'}).text\n    if current_content != prev_content:\n        print('Page changed')\n    prev_content = current_content\n    time.sleep(60)\n```",
	    "text": "Proceed with monitoring a webpage for changes Monitoring a webpage for changes... ```python\nfrom bs4 import BeautifulSoup\nimport requests\nimport time\nprev_content = ''\nwhile True:\n    r = requests.get('http://example.com')\n    soup = BeautifulSoup(r.text, 'html.parser')\n    current_content = soup.find('tag', {'class': 'class_name'}).text\n    if current_content != prev_content:\n        print('Page changed')\n    prev_content = current_content\n    time.sleep(60)\n```"
	},
	{
	    "instruction": "Proceed with monitoring 'http://example.com' for changes in tag with class 'example_class_name'",
	    "input": "Monitoring for changes in specific tag...",
	    "output": "```python\nfrom bs4 import BeautifulSoup\nimport requests\nimport time\nprev_content = ''\nwhile True:\n    r = requests.get('http://example.com')\n    soup = BeautifulSoup(r.text, 'html.parser')\n    current_content = soup.find('tag', {'class': 'example_class_name'}).text\n    if current_content != prev_content:\n        print('Page changed')\n    prev_content = current_content\n    time.sleep(60)\n```",
	    "text": "Proceed with monitoring 'http://example.com' for changes in tag with class 'example_class_name' Monitoring for changes in specific tag... ```python\nfrom bs4 import BeautifulSoup\nimport requests\nimport time\nprev_content = ''\nwhile True:\n    r = requests.get('http://example.com')\n    soup = BeautifulSoup(r.text, 'html.parser')\n    current_content = soup.find('tag', {'class': 'example_class_name'}).text\n    if current_content != prev_content:\n        print('Page changed')\n    prev_content = current_content\n    time.sleep(60)\n```"
	},
	{
	    "instruction": "Proceed with automating file encryption",
	    "input": "Encrypting files...",
	    "output": "```python\nfrom cryptography.fernet import Fernet\nkey = Fernet.generate_key()\ncipher_suite = Fernet(key)\nwith open('file.txt', 'rb') as f:\n    file_data = f.read()\nencrypted_data = cipher_suite.encrypt(file_data)\nwith open('file_encrypted.txt', 'wb') as f:\n    f.write(encrypted_data)\n```",
	    "text": "Proceed with automating file encryption Encrypting files... ```python\nfrom cryptography.fernet import Fernet\nkey = Fernet.generate_key()\ncipher_suite = Fernet(key)\nwith open('file.txt', 'rb') as f:\n    file_data = f.read()\nencrypted_data = cipher_suite.encrypt(file_data)\nwith open('file_encrypted.txt', 'wb') as f:\n    f.write(encrypted_data)\n```"
	},
	{
	    "instruction": "Proceed with automating file encryption for 'example_file.txt'",
	    "input": "Encrypting 'example_file.txt'...",
	    "output": "```python\nfrom cryptography.fernet import Fernet\nkey = Fernet.generate_key()\ncipher_suite = Fernet(key)\nwith open('example_file.txt', 'rb') as f:\n    file_data = f.read()\nencrypted_data = cipher_suite.encrypt(file_data)\nwith open('example_file_encrypted.txt', 'wb') as f:\n    f.write(encrypted_data)\n```",
	    "text": "Proceed with automating file encryption for 'example_file.txt' Encrypting 'example_file.txt'... ```python\nfrom cryptography.fernet import Fernet\nkey = Fernet.generate_key()\ncipher_suite = Fernet(key)\nwith open('example_file.txt', 'rb') as f:\n    file_data = f.read()\nencrypted_data = cipher_suite.encrypt(file_data)\nwith open('example_file_encrypted.txt', 'wb') as f:\n    f.write(encrypted_data)\n```"
	},
	{
	    "instruction": "Proceed with automating YouTube downloads",
	    "input": "Downloading YouTube videos...",
	    "output": "```python\nfrom pytube import YouTube\nurl = 'https://www.youtube.com/watch?v=example'\nyt = YouTube(url)\nvideo = yt.streams.get_highest_resolution()\nvideo.download()\n```",
	    "text": "Proceed with automating YouTube downloads Downloading YouTube videos... ```python\nfrom pytube import YouTube\nurl = 'https://www.youtube.com/watch?v=example'\nyt = YouTube(url)\nvideo = yt.streams.get_highest_resolution()\nvideo.download()\n```"
	},
	{
	    "instruction": "Proceed with sending bulk emails",
	    "input": "Sending emails to a list of recipients...",
	    "output": "```python\nimport smtplib\nrecipients = ['email1@example.com', 'email2@example.com']\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.starttls()\nserver.login('your_email@example.com', 'your_password')\nfor email in recipients:\n    server.sendmail('your_email@example.com', email, 'Hello, this is a test email.')\nserver.quit()\n```",
	    "text": "Proceed with sending bulk emails Sending emails to a list of recipients... ```python\nimport smtplib\nrecipients = ['email1@example.com', 'email2@example.com']\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.starttls()\nserver.login('your_email@example.com', 'your_password')\nfor email in recipients:\n    server.sendmail('your_email@example.com', email, 'Hello, this is a test email.')\nserver.quit()\n```"
	},
	{
	    "instruction": "Proceed with generating QR codes",
	    "input": "Generating a QR code...",
	    "output": "```python\nimport qrcode\nimg = qrcode.make('Some data here')\nimg.save('qrcode.png')\n```",
	    "text": "Proceed with generating QR codes Generating a QR code... ```python\nimport qrcode\nimg = qrcode.make('Some data here')\nimg.save('qrcode.png')\n```"
	},
	{
	    "instruction": "Proceed with parsing command-line arguments",
	    "input": "",
	    "output": "```python\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('--arg1', help='description for arg1')\nargs = parser.parse_args()\nprint(args.arg1)\n```",
	    "text": "Proceed with parsing command-line arguments Parsing command-line arguments... ```python\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument('--arg1', help='description for arg1')\nargs = parser.parse_args()\nprint(args.arg1)\n```"
	},
	{
	    "instruction": "Read data from an API and store it in a database",
	    "input": "Fetching data from API and storing in database...",
	    "output": "```python\nimport requests\nimport sqlite3\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\nc.execute('INSERT INTO table_name (column1, column2) VALUES (?, ?)', (data['key1'], data['key2']))\nconn.commit()\nconn.close()\n```",
	    "text": "Read data from an API and store it in a database Fetching data from API and storing in database... ```python\nimport requests\nimport sqlite3\nresponse = requests.get('https://api.example.com/data')\ndata = response.json()\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\nc.execute('INSERT INTO table_name (column1, column2) VALUES (?, ?)', (data['key1'], data['key2']))\nconn.commit()\nconn.close()\n```"
	},
	{
	    "instruction": "Convert JSON data to a CSV file",
	    "input": "Converting JSON to CSV...",
	    "output": "```python\nimport json\nimport csv\nwith open('data.json', 'r') as f:\n    data = json.load(f)\nwith open('data.csv', 'w', newline='') as f:\n    writer = csv.writer(f)\n    writer.writerow(data.keys())\n    writer.writerow(data.values())\n```",
	    "text": "Convert JSON data to a CSV file Converting JSON to CSV... ```python\nimport json\nimport csv\nwith open('data.json', 'r') as f:\n    data = json.load(f)\nwith open('data.csv', 'w', newline='') as f:\n    writer = csv.writer(f)\n    writer.writerow(data.keys())\n    writer.writerow(data.values())\n```"
	},
	{
	    "instruction": "Perform CRUD operations in a MongoDB database",
	    "input": "Performing CRUD operations...",
	    "output": "```python\nfrom pymongo import MongoClient\nclient = MongoClient('mongodb://localhost:27017/')\ndb = client['database_name']\ncollection = db['collection_name']\ncollection.insert_one({'key': 'value'})\ncollection.update_one({'key': 'value'}, {'$set': {'key': 'new_value'}})\ncollection.delete_one({'key': 'value'})\n```",
	    "text": "Perform CRUD operations in a MongoDB database Performing CRUD operations... ```python\nfrom pymongo import MongoClient\nclient = MongoClient('mongodb://localhost:27017/')\ndb = client['database_name']\ncollection = db['collection_name']\ncollection.insert_one({'key': 'value'})\ncollection.update_one({'key': 'value'}, {'$set': {'key': 'new_value'}})\ncollection.delete_one({'key': 'value'})\n```"
	},
	{
	    "instruction": "Execute shell commands",
	    "input": "Executing shell commands...",
	    "output": "```python\nimport subprocess\nsubprocess.run(['ls', '-l'])\n```",
	    "text": "Execute shell commands Executing shell commands... ```python\nimport subprocess\nsubprocess.run(['ls', '-l'])\n```"
	},
	{
	    "instruction": "Upload files to an FTP server",
	    "input": "Uploading files to FTP server...",
	    "output": "```python\nfrom ftplib import FTP\nftp = FTP('ftp.example.com')\nftp.login('username', 'password')\nwith open('file.txt', 'rb') as f:\n    ftp.storbinary('STOR file.txt', f)\nftp.quit()\n```",
	    "text": "Upload files to an FTP server Uploading files to FTP server... ```python\nfrom ftplib import FTP\nftp = FTP('ftp.example.com')\nftp.login('username', 'password')\nwith open('file.txt', 'rb') as f:\n    ftp.storbinary('STOR file.txt', f)\nftp.quit()\n```"
	},
	{
	    "instruction": "Create a simple HTTP server",
	    "input": "Creating a simple HTTP server...",
	    "output": "```python\nfrom http.server import HTTPServer, SimpleHTTPRequestHandler\nhttpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)\nhttpd.serve_forever()\n```",
	    "text": "Create a simple HTTP server Creating a simple HTTP server... ```python\nfrom http.server import HTTPServer, SimpleHTTPRequestHandler\nhttpd = HTTPServer(('localhost', 8000), SimpleHTTPRequestHandler)\nhttpd.serve_forever()\n```"
	},
	{
	    "instruction": "Create and write to a log file",
	    "input": "Creating and writing to a log file...",
	    "output": "```python\nimport logging\nlogging.basicConfig(filename='app.log', level=logging.INFO)\nlogging.info('This is an info message')\n```",
	    "text": "Create and write to a log file Creating and writing to a log file... ```python\nimport logging\nlogging.basicConfig(filename='app.log', level=logging.INFO)\nlogging.info('This is an info message')\n```"
	},
	{
	    "instruction": "Visualize data using a bar chart",
	    "input": "Visualizing data using a bar chart...",
	    "output": "```python\nimport matplotlib.pyplot as plt\nlabels = ['A', 'B', 'C']\nvalues = [1, 4, 2]\nplt.bar(labels, values)\nplt.show()\n```",
	    "text": "Visualize data using a bar chart Visualizing data using a bar chart... ```python\nimport matplotlib.pyplot as plt\nlabels = ['A', 'B', 'C']\nvalues = [1, 4, 2]\nplt.bar(labels, values)\nplt.show()\n```"
	},
	{
	    "instruction": "Send HTTP requests with custom headers",
	    "input": "Sending HTTP requests with custom headers...",
	    "output": "```python\nimport requests\nheaders = {'User-Agent': 'my-app'}\nresponse = requests.get('https://example.com', headers=headers)\n```",
	    "text": "Send HTTP requests with custom headers Sending HTTP requests with custom headers... ```python\nimport requests\nheaders = {'User-Agent': 'my-app'}\nresponse = requests.get('https://example.com', headers=headers)\n```"
	},
	{
	    "instruction": "Compress and decompress files using gzip",
	    "input": "Compressing and decompressing files...",
	    "output": "```python\nimport gzip\nwith gzip.open('file.txt.gz', 'wb') as f_out, open('file.txt', 'rb') as f_in:\n    f_out.writelines(f_in)\n```",
	    "text": "Compress and decompress files using gzip Compressing and decompressing files... ```python\nimport gzip\nwith gzip.open('file.txt.gz', 'wb') as f_out, open('file.txt', 'rb') as f_in:\n    f_out.writelines(f_in)\n```"
	},
	{
	    "instruction": "Work with Excel files",
	    "input": "Working with Excel files...",
	    "output": "```python\nfrom openpyxl import Workbook\nwb = Workbook()\nws = wb.active\nws['A1'] = 42\nwb.save('sample.xlsx')\n```",
	    "text": "Work with Excel files Working with Excel files... ```python\nfrom openpyxl import Workbook\nwb = Workbook()\nws = wb.active\nws['A1'] = 42\nwb.save('sample.xlsx')\n```"
	},
	{
	    "instruction": "Create 'example_sample.xlsx'",
	    "input": "Creating 'example_sample.xlsx'...",
	    "output": "```python\nfrom openpyxl import Workbook\nwb = Workbook()\nws = wb.active\nws['A1'] = 42\nwb.save('example_sample.xlsx')\n```",
	    "text": "Create 'example_sample.xlsx' Creating 'example_sample.xlsx'... ```python\nfrom openpyxl import Workbook\nwb = Workbook()\nws = wb.active\nws['A1'] = 42\nwb.save('example_sample.xlsx')\n```"
	},
	{
	    "instruction": "Extract text from a PDF",
	    "input": "Extracting text from a PDF...",
	    "output": "```python\nimport PyPDF2\nwith open('file.pdf', 'rb') as f:\n    reader = PyPDF2.PdfFileReader(f)\n    text = reader.getPage(0).extractText()\n    print(text)\n```",
	    "text": "Extract text from a PDF Extracting text from a PDF... ```python\nimport PyPDF2\nwith open('file.pdf', 'rb') as f:\n    reader = PyPDF2.PdfFileReader(f)\n    text = reader.getPage(0).extractText()\n    print(text)\n```"
	},
	{
	    "instruction": "Extract text from 'example_file.pdf'",
	    "input": "Extracting text from 'example_file.pdf'...",
	    "output": "```python\nimport PyPDF2\nwith open('example_file.pdf', 'rb') as f:\n    reader = PyPDF2.PdfFileReader(f)\n    text = reader.getPage(0).extractText()\n    print(text)\n```",
	    "text": "Extract text from 'example_file.pdf' Extracting text from 'example_file.pdf'... ```python\nimport PyPDF2\nwith open('example_file.pdf', 'rb') as f:\n    reader = PyPDF2.PdfFileReader(f)\n    text = reader.getPage(0).extractText()\n    print(text)\n```"
	},
	{
	    "instruction": "Capture webcam video",
	    "input": "Capturing webcam video...",
	    "output": "```python\nimport cv2\ncap = cv2.VideoCapture(0)\nwhile True:\n    ret, frame = cap.read()\n    cv2.imshow('Webcam', frame)\n    if cv2.waitKey(1) == ord('q'):\n        break\ncap.release()\ncv2.destroyAllWindows()\n```",
	    "text": "Capture webcam video Capturing webcam video... ```python\nimport cv2\ncap = cv2.VideoCapture(0)\nwhile True:\n    ret, frame = cap.read()\n    cv2.imshow('Webcam', frame)\n    if cv2.waitKey(1) == ord('q'):\n        break\ncap.release()\ncv2.destroyAllWindows()\n```"
	},
	{
	    "instruction": "Capture video until 'q' is pressed",
	    "input": "Capturing video until 'q' is pressed...",
	    "output": "```python\nimport cv2\ncap = cv2.VideoCapture(0)\nwhile True:\n    ret, frame = cap.read()\n    cv2.imshow('Webcam', frame)\n    if cv2.waitKey(1) == ord('q'):\n        break\ncap.release()\ncv2.destroyAllWindows()\n```",
	    "text": "Capture video until 'q' is pressed Capturing video until 'q' is pressed... ```python\nimport cv2\ncap = cv2.VideoCapture(0)\nwhile True:\n    ret, frame = cap.read()\n    cv2.imshow('Webcam', frame)\n    if cv2.waitKey(1) == ord('q'):\n        break\ncap.release()\ncv2.destroyAllWindows()\n```"
	},
	{
	    "instruction": "Read an environment variable",
	    "input": "Reading an environment variable...",
	    "output": "```python\nimport os\nprint(os.environ.get('MY_ENV_VAR', 'Default Value'))\n```",
	    "text": "Read an environment variable Reading an environment variable... ```python\nimport os\nprint(os.environ.get('MY_ENV_VAR', 'Default Value'))\n```"
	},
	{
	    "instruction": "Read 'EXAMPLE_ENV_VAR'",
	    "input": "Reading 'EXAMPLE_ENV_VAR'...",
	    "output": "```python\nimport os\nprint(os.environ.get('EXAMPLE_ENV_VAR', 'Default Value'))\n```",
	    "text": "Read 'EXAMPLE_ENV_VAR' Reading 'EXAMPLE_ENV_VAR'... ```python\nimport os\nprint(os.environ.get('EXAMPLE_ENV_VAR', 'Default Value'))\n```"
	},
	{
	    "instruction": "Perform basic arithmetic operations",
	    "input": "Performing addition, subtraction, multiplication, and division...",
	    "output": "```python\ndef add(a, b):\n    return a + b\ndef subtract(a, b):\n    return a - b\ndef multiply(a, b):\n    return a * b\ndef divide(a, b):\n    if b != 0:\n        return a / b\n    else:\n        return 'Cannot divide by zero'\n```",
	    "text": "Perform basic arithmetic operations Performing addition, subtraction, multiplication, and division... ```python\ndef add(a, b):\n    return a + b\ndef subtract(a, b):\n    return a - b\ndef multiply(a, b):\n    return a * b\ndef divide(a, b):\n    if b != 0:\n        return a / b\n    else:\n        return 'Cannot divide by zero'\n```"
	},
	{
	    "instruction": "Perform arithmetic on 10 and 5",
	    "input": "Performing arithmetic on numbers 10 and 5...",
	    "output": "```python\ndef add(a, b):\n    return a + b\ndef subtract(a, b):\n    return a - b\ndef multiply(a, b):\n    return a * b\ndef divide(a, b):\n    if b != 0:\n        return a / b\n    else:\n        return 'Cannot divide by zero'\n```",
	    "text": "Perform arithmetic on 10 and 5 Performing arithmetic on numbers 10 and 5... ```python\ndef add(a, b):\n    return a + b\ndef subtract(a, b):\n    return a - b\ndef multiply(a, b):\n    return a * b\ndef divide(a, b):\n    if b != 0:\n        return a / b\n    else:\n        return 'Cannot divide by zero'\n```"
	},
	{
	    "instruction": "Scrape table data",
	    "input": "Scraping table data from a webpage...",
	    "output": "```python\nfrom bs4 import BeautifulSoup\nimport requests\nresponse = requests.get('https://example.com/table')\nsoup = BeautifulSoup(response.text, 'html.parser')\nrows = soup.find('table').find_all('tr')\nfor row in rows:\n    print([cell.text for cell in row.find_all('td')])\n```",
	    "text": "Scrape table data Scraping table data from a webpage... ```python\nfrom bs4 import BeautifulSoup\nimport requests\nresponse = requests.get('https://example.com/table')\nsoup = BeautifulSoup(response.text, 'html.parser')\nrows = soup.find('table').find_all('tr')\nfor row in rows:\n    print([cell.text for cell in row.find_all('td')])\n```"
	},
	{
	    "instruction": "Scrape data from 'https://example.com/example_table'",
	    "input": "Scraping table data...",
	    "output": "```python\nfrom bs4 import BeautifulSoup\nimport requests\nresponse = requests.get('https://example.com/example_table')\nsoup = BeautifulSoup(response.text, 'html.parser')\nrows = soup.find('table').find_all('tr')\nfor row in rows:\n    print([cell.text for cell in row.find_all('td')])\n```",
	    "text": "Scrape data from 'https://example.com/example_table' Scraping table data... ```python\nfrom bs4 import BeautifulSoup\nimport requests\nresponse = requests.get('https://example.com/example_table')\nsoup = BeautifulSoup(response.text, 'html.parser')\nrows = soup.find('table').find_all('tr')\nfor row in rows:\n    print([cell.text for cell in row.find_all('td')])\n```"
	},
	{
	    "instruction": "Convert text 'text' to speech",
	    "input": "Converting text 'text' to speech...",
	    "output": "```python\nimport pyttsx3\nengine = pyttsx3.init()\nengine.say('Hello, world')\nengine.runAndWait()\n```",
	    "text": "Convert text 'text' to speech Converting text 'text' to speech... ```python\nimport pyttsx3\nengine = pyttsx3.init()\nengine.say('Hello, world')\nengine.runAndWait()\n```"
	},
	{
	    "instruction": "Convert 'Hello, example world' to speech",
	    "input": "Converting text to speech...",
	    "output": "```python\nimport pyttsx3\nengine = pyttsx3.init()\nengine.say('Hello, example world')\nengine.runAndWait()\n```",
	    "text": "Convert 'Hello, example world' to speech Converting text to speech... ```python\nimport pyttsx3\nengine = pyttsx3.init()\nengine.say('Hello, example world')\nengine.runAndWait()\n```"
	},
	{
	    "instruction": "Read keyboard input",
	    "input": "Reading keyboard input...",
	    "output": "```python\nuser_input = input('Enter something: ')\nprint(f'You entered: {user_input}')\n```",
	    "text": "Read keyboard input Reading keyboard input... ```python\nuser_input = input('Enter something: ')\nprint(f'You entered: {user_input}')\n```"
	},
	{
	    "instruction": "Read input and print 'You entered: [input]'",
	    "input": "Reading and printing keyboard input...",
	    "output": "```python\nuser_input = input('Enter something: ')\nprint(f'You entered: {user_input}')\n```",
	    "text": "Read input and print 'You entered: [input]' Reading and printing keyboard input... ```python\nuser_input = input('Enter something: ')\nprint(f'You entered: {user_input}')\n```"
	},
	{
	    "instruction": "Ping a list of hosts",
	    "input": "Pinging a list of hosts...",
	    "output": "```python\nimport os\nhosts = ['192.168.1.1', 'google.com']\nfor host in hosts:\n    response = os.system(f'ping -c 1 {host}')\n    if response == 0:\n        print(f'{host} is up')\n    else:\n        print(f'{host} is down')\n```",
	    "text": "Ping a list of hosts Pinging a list of hosts... ```python\nimport os\nhosts = ['192.168.1.1', 'google.com']\nfor host in hosts:\n    response = os.system(f'ping -c 1 {host}')\n    if response == 0:\n        print(f'{host} is up')\n    else:\n        print(f'{host} is down')\n```"
	},
	{
	    "instruction": "Calculate Fibonacci sequence",
	    "input": "Calculating the Fibonacci sequence...",
	    "output": "```python\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n```",
	    "text": "Calculate Fibonacci sequence Calculating the Fibonacci sequence... ```python\ndef fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n```"
	},
	{
	    "instruction": "Read a JSON file",
	    "input": "",
	    "output": "```python\nimport json\nwith open('file.json', 'r') as f:\n    data = json.load(f)\nprint(data)\n```",
	    "text": "Read a JSON file Reading a JSON file... ```python\nimport json\nwith open('file.json', 'r') as f:\n    data = json.load(f)\nprint(data)\n```"
	},
	{
	    "instruction": "Plot data on a map",
	    "input": "Plotting data on a map...",
	    "output": "```python\nimport folium\nm = folium.Map(location=[40.7128, -74.0060], zoom_start=12)\nfolium.Marker([40.7128, -74.0060], tooltip='New York').add_to(m)\nm.save('map.html')\n```",
	    "text": "Plot data on a map Plotting data on a map... ```python\nimport folium\nm = folium.Map(location=[40.7128, -74.0060], zoom_start=12)\nfolium.Marker([40.7128, -74.0060], tooltip='New York').add_to(m)\nm.save('map.html')\n```"
	},
	{
	    "instruction": "Perform a linear regression",
	    "input": "Performing a linear regression...",
	    "output": "```python\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\nX = np.array([[1], [2], [3]])\ny = np.array([2, 4, 3])\nreg = LinearRegression().fit(X, y)\nprediction = reg.predict(np.array([[4]]))\nprint(prediction)\n```",
	    "text": "Perform a linear regression Performing a linear regression... ```python\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\nX = np.array([[1], [2], [3]])\ny = np.array([2, 4, 3])\nreg = LinearRegression().fit(X, y)\nprediction = reg.predict(np.array([[4]]))\nprint(prediction)\n```"
	},
	{
	    "instruction": "Validate email address example@example.com",
	    "input": "Validating email addresses example@example.com...",
	    "output": "```python\nimport re\npattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\nemail = 'example@example.com'\nif re.match(pattern, email):\n    print('Valid email')\nelse:\n    print('Invalid email')\n```",
	    "text": "Validate email address example@example.com Validating email addresses example@example.com... ```python\nimport re\npattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\nemail = 'example@example.com'\nif re.match(pattern, email):\n    print('Valid email')\nelse:\n    print('Invalid email')\n```"
	},
	{
	    "instruction": "Validate email addresses skutebobo420@gmail.com",
	    "input": "Validating email addresses skutebobo420@gmail.com...",
	    "output": "```python\nimport re\npattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\nemail = 'example@example.com'\nif re.match(pattern, email):\n    print('Valid email')\nelse:\n    print('Invalid email')\n```",
	    "text": "Validate email addresses skutebobo420@gmail.com Validating email addresses skutebobo420@gmail.com... ```python\nimport re\npattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$'\nemail = 'example@example.com'\nif re.match(pattern, email):\n    print('Valid email')\nelse:\n    print('Invalid email')\n```"
	},
	{
	    "instruction": "Login to {website} using {username} and {password}",
	    "input": "I'm going to login you into {website} using provided credentials...",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://{website}/login')\nusername = driver.find_element(By.CSS_SELECTOR, \"input[autocomplete='username']\")\npassword = driver.find_element(By.CSS_SELECTOR, \"input[autocomplete='current-password']\")\nusername.send_keys('{username}')\npassword.send_keys('{password}')\npassword.send_keys(Keys.RETURN)\ntime.sleep(120)\n```",
	    "text": "Login to {website} using {username} and {password} I'm going to login you into {website} using provided credentials... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://{website}/login')\nusername = driver.find_element(By.CSS_SELECTOR, \"input[autocomplete='username']\")\npassword = driver.find_element(By.CSS_SELECTOR, \"input[autocomplete='current-password']\")\nusername.send_keys('{username}')\npassword.send_keys('{password}')\npassword.send_keys(Keys.RETURN)\ntime.sleep(120)\n```"
	},
	{
	    "instruction": "Login to Hugging Face website using my email: redroses120@gmail.com and my password: zaqwsx123Aa@",
	    "input": "I'm going to login you into Hugging Face using provided credentials......",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://huggingface.co/login')\nusername = driver.find_element(By.CSS_SELECTOR, \"input[autocomplete='username']\")\npassword = driver.find_element(By.CSS_SELECTOR, \"input[autocomplete='current-password']\")\nusername.send_keys('redroses120@gmail.com')\npassword.send_keys('zaqwsx123Aa@')\npassword.send_keys(Keys.RETURN)\ntime.sleep(120)\n```",
	    "text": "Login to Hugging Face website using my email: redroses120@gmail.com and my password: zaqwsx123Aa@ I'm going to login you into Hugging Face using provided credentials...... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://huggingface.co/login')\nusername = driver.find_element(By.CSS_SELECTOR, \"input[autocomplete='username']\")\npassword = driver.find_element(By.CSS_SELECTOR, \"input[autocomplete='current-password']\")\nusername.send_keys('redroses120@gmail.com')\npassword.send_keys('zaqwsx123Aa@')\npassword.send_keys(Keys.RETURN)\ntime.sleep(120)\n```"
	},
	{
	    "instruction": "Login to Twitter using my email: oskizwioski49@gmail.com and my password: oskinrze312",
	    "input": "I'm going to login you into Twitter using provided credentials......",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nimport time\ndriver = webdriver.Chrome()\ndriver.get('https://twitter.com/login')\nusername = driver.find_element(By.NAME, 'session[username_or_email]')\npassword = driver.find_element(By.NAME, 'session[password]')\nusername.send_keys('oskizwioski49@gmail.com')\npassword.send_keys('oskinrze312')\npassword.send_keys(Keys.RETURN)\ntime.sleep(120)\n```",
	    "text": "Login to Twitter using my email: oskizwioski49@gmail.com and my password: oskinrze312 I'm going to login you into Twitter using provided credentials...... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nimport time\ndriver = webdriver.Chrome()\ndriver.get('https://twitter.com/login')\nusername = driver.find_element(By.NAME, 'session[username_or_email]')\npassword = driver.find_element(By.NAME, 'session[password]')\nusername.send_keys('oskizwioski49@gmail.com')\npassword.send_keys('oskinrze312')\npassword.send_keys(Keys.RETURN)\ntime.sleep(120)\n```"
	},
	{
	    "instruction": "Login to Reddit using my email: helenkam123@outlook.com and password: helazaqwsxqwe",
	    "input": "I'm going to login you into Reddit using provided credentials....",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nimport time\ndriver = webdriver.Chrome()\ndriver.get('https://www.reddit.com/login/')\nusername = driver.find_element(By.ID, 'loginUsername')\npassword = driver.find_element(By.ID, 'loginPassword')\nusername.send_keys('helenkam123@outlook.com')\npassword.send_keys('helazaqwsxqwe')\npassword.send_keys(Keys.RETURN)\ntime.sleep(120)\n```",
	    "text": "Login to Reddit using my email: helenkam123@outlook.com and password: helazaqwsxqwe I'm going to login you into Reddit using provided credentials.... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nimport time\ndriver = webdriver.Chrome()\ndriver.get('https://www.reddit.com/login/')\nusername = driver.find_element(By.ID, 'loginUsername')\npassword = driver.find_element(By.ID, 'loginPassword')\nusername.send_keys('helenkam123@outlook.com')\npassword.send_keys('helazaqwsxqwe')\npassword.send_keys(Keys.RETURN)\ntime.sleep(120)\n```"
	},
	{
	    "instruction": "Login to Facebook using my email: gabir2001@yandex.com and my password: gabberhakken67#@",
	    "input": "I'm going to login you into Facebook using provided credentials...",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nimport time\ndriver = webdriver.Chrome()\ndriver.get('https://www.facebook.com/')\nusername = driver.find_element(By.ID, 'email')\npassword = driver.find_element(By.ID, 'pass')\nusername.send_keys('gabir2001@yandex.com')\npassword.send_keys('gabberhakken67#@')\npassword.send_keys(Keys.RETURN)\ntime.sleep(120)\n```",
	    "text": "Login to Facebook using my email: gabir2001@yandex.com and my password: gabberhakken67#@ I'm going to login you into Facebook using provided credentials... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nimport time\ndriver = webdriver.Chrome()\ndriver.get('https://www.facebook.com/')\nusername = driver.find_element(By.ID, 'email')\npassword = driver.find_element(By.ID, 'pass')\nusername.send_keys('gabir2001@yandex.com')\npassword.send_keys('gabberhakken67#@')\npassword.send_keys(Keys.RETURN)\ntime.sleep(120)\n```"
	},
	{
	    "instruction": "Automate file backup",
	    "input": "Automating file backup...",
	    "output": "```python\nimport shutil\nshutil.copy2('source_file_path', 'destination_file_path')\n```",
	    "text": "Automate file backup Automating file backup... ```python\nimport shutil\nshutil.copy2('source_file_path', 'destination_file_path')\n```"
	},
	{
	    "instruction": "Automate price tracking on Amazon",
	    "input": "Automating price tracking...",
	    "output": "```python\nimport requests\nfrom bs4 import BeautifulSoup\nURL = 'https://www.amazon.com/dp/product_id'\nheaders = {'User-Agent': 'your_user_agent'}\nresponse = requests.get(URL, headers=headers)\nsoup = BeautifulSoup(response.content, 'html.parser')\nprice = soup.find(id='priceblock_ourprice').get_text()\nprint(f'Current price is {price}')\n```",
	    "text": "Automate price tracking on Amazon Automating price tracking... ```python\nimport requests\nfrom bs4 import BeautifulSoup\nURL = 'https://www.amazon.com/dp/product_id'\nheaders = {'User-Agent': 'your_user_agent'}\nresponse = requests.get(URL, headers=headers)\nsoup = BeautifulSoup(response.content, 'html.parser')\nprice = soup.find(id='priceblock_ourprice').get_text()\nprint(f'Current price is {price}')\n```"
	},
	{
	    "instruction": "Automate downloading YouTube playlists",
	    "input": "Automating YouTube playlist downloads...",
	    "output": "```python\nfrom pytube import Playlist\nplaylist = Playlist('https://www.youtube.com/playlist?list=playlist_id')\nfor video in playlist.videos:\n    video.streams.get_highest_resolution().download()\n```",
	    "text": "Automate downloading YouTube playlists Automating YouTube playlist downloads... ```python\nfrom pytube import Playlist\nplaylist = Playlist('https://www.youtube.com/playlist?list=playlist_id')\nfor video in playlist.videos:\n    video.streams.get_highest_resolution().download()\n```"
	},
	{
	    "instruction": "Automate sending scheduled emails using my credentials: sweterek98@gmail.com and password orsadafhjdaf",
	    "input": "Automating scheduled email sending...",
	    "output": "```python\nimport smtplib\nimport schedule\nimport time\ndef send_email():\n    server = smtplib.SMTP('smtp.gmail.com', 587)\n    server.starttls()\n    server.login('swearek98@gmail.com', 'ovdigmjvjkxwtzhu')\n    server.sendmail('swearek98@gmail.com', 'swearek98@gmail.com', 'Subject: Scheduled email\nThis is a scheduled email.')\n    server.quit()\n    print('Email sent.')\nschedule.every().day.at('03:46').do(send_email)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```",
	    "text": "Automate sending scheduled emails using my credentials: sweterek98@gmail.com and password orsadafhjdaf Automating scheduled email sending... ```python\nimport smtplib\nimport schedule\nimport time\ndef send_email():\n    server = smtplib.SMTP('smtp.gmail.com', 587)\n    server.starttls()\n    server.login('swearek98@gmail.com', 'ovdigmjvjkxwtzhu')\n    server.sendmail('swearek98@gmail.com', 'swearek98@gmail.com', 'Subject: Scheduled email\nThis is a scheduled email.')\n    server.quit()\n    print('Email sent.')\nschedule.every().day.at('03:46').do(send_email)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```"
	},
	{
	    "instruction": "Send a daily scheduled email with the subject 'Daily Update'",
	    "input": "Sending a daily email with the subject 'Daily Update'...",
	    "output": "```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('dailyupdate@gmail.com', '1234567890123456')\n    s.sendmail('dailyupdate@gmail.com', 'dailyupdate@gmail.com', 'Subject: Daily Update\nThis is a daily update.')\n    s.quit()\n    print('E sent.')\nschedule.every().day.at('03:46').do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```",
	    "text": "Send a daily scheduled email with the subject 'Daily Update' Sending a daily email with the subject 'Daily Update'... ```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('dailyupdate@gmail.com', '1234567890123456')\n    s.sendmail('dailyupdate@gmail.com', 'dailyupdate@gmail.com', 'Subject: Daily Update\nThis is a daily update.')\n    s.quit()\n    print('E sent.')\nschedule.every().day.at('03:46').do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```"
	},
	{
	    "instruction": "Send a weekly scheduled email with the subject 'Weekly Summary'",
	    "input": "Sending a weekly email with the subject 'Weekly Summary'...",
	    "output": "```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('weeklysummary@gmail.com', 'abcdef1234567890')\n    s.sendmail('weeklysummary@gmail.com', 'weeklysummary@gmail.com', 'Subject: Weekly Summary\nThis is a weekly summary.')\n    s.quit()\n    print('E sent.')\nschedule.every().week.do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```",
	    "text": "Send a weekly scheduled email with the subject 'Weekly Summary' Sending a weekly email with the subject 'Weekly Summary'... ```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('weeklysummary@gmail.com', 'abcdef1234567890')\n    s.sendmail('weeklysummary@gmail.com', 'weeklysummary@gmail.com', 'Subject: Weekly Summary\nThis is a weekly summary.')\n    s.quit()\n    print('E sent.')\nschedule.every().week.do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```"
	},
	{
	    "instruction": "Send an email every Monday with the subject 'Monday Blues'",
	    "input": "Sending an email every Monday with the subject 'Monday Blues'...",
	    "output": "```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('mondayblues@gmail.com', 'monday1234567890')\n    s.sendmail('mondayblues@gmail.com', 'mondayblues@gmail.com', 'Subject: Monday Blues\nStart your week.')\n    s.quit()\n    print('E sent.')\nschedule.every().monday.do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```",
	    "text": "Send an email every Monday with the subject 'Monday Blues' Sending an email every Monday with the subject 'Monday Blues'... ```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('mondayblues@gmail.com', 'monday1234567890')\n    s.sendmail('mondayblues@gmail.com', 'mondayblues@gmail.com', 'Subject: Monday Blues\nStart your week.')\n    s.quit()\n    print('E sent.')\nschedule.every().monday.do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```"
	},
	{
	    "instruction": "Send an email with an extremely long subject",
	    "input": "Sending an email with an extremely long subject...",
	    "output": "```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('longsubject@gmail.com', 'long4567890123456')\n    s.sendmail('longsubject@gmail.com', 'longsubject@gmail.com', 'Subject: This is an extremely long subject that you usually wouldn't see in a typical email\nContent.')\n    s.quit()\n    print('E sent.')\nschedule.every().day.at('03:46').do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```",
	    "text": "Send an email with an extremely long subject Sending an email with an extremely long subject... ```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('longsubject@gmail.com', 'long4567890123456')\n    s.sendmail('longsubject@gmail.com', 'longsubject@gmail.com', 'Subject: This is an extremely long subject that you usually wouldn't see in a typical email\nContent.')\n    s.quit()\n    print('E sent.')\nschedule.every().day.at('03:46').do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```"
	},
	{
	    "instruction": "Send a monthly scheduled email with the subject 'Monthly Report'",
	    "input": "Sending a monthly email with the subject 'Monthly Report'...",
	    "output": "```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('monthlyreport@gmail.com', 'month123456789012')\n    s.sendmail('monthlyreport@gmail.com', 'monthlyreport@gmail.com', 'Subject: Monthly Report\nThis is your monthly report.')\n    s.quit()\n    print('E sent.')\nschedule.every().month.do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```",
	    "text": "Send a monthly scheduled email with the subject 'Monthly Report' Sending a monthly email with the subject 'Monthly Report'... ```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('monthlyreport@gmail.com', 'month123456789012')\n    s.sendmail('monthlyreport@gmail.com', 'monthlyreport@gmail.com', 'Subject: Monthly Report\nThis is your monthly report.')\n    s.quit()\n    print('E sent.')\nschedule.every().month.do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```"
	},
	{
	    "instruction": "Send a yearly scheduled email with the subject 'Happy New Year'",
	    "input": "Sending a yearly email with the subject 'Happy New Year'...",
	    "output": "```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('newyear@gmail.com', 'newye123456789012')\n    s.sendmail('newyear@gmail.com', 'newyear@gmail.com', 'Subject: Happy New Year\nHappy New Year!')\n    s.quit()\n    print('E sent.')\nschedule.every().year.do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```",
	    "text": "Send a yearly scheduled email with the subject 'Happy New Year' Sending a yearly email with the subject 'Happy New Year'... ```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('newyear@gmail.com', 'newye123456789012')\n    s.sendmail('newyear@gmail.com', 'newyear@gmail.com', 'Subject: Happy New Year\nHappy New Year!')\n    s.quit()\n    print('E sent.')\nschedule.every().year.do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```"
	},
	{
	    "instruction": "Send an email every hour with the subject 'Hourly Update'",
	    "input": "Sending an email every hour with the subject 'Hourly Update'...",
	    "output": "```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('hourlyupdate@gmail.com', 'hourl123456789012')\n    s.sendmail('hourlyupdate@gmail.com', 'hourlyupdate@gmail.com', 'Subject: Hourly Update\nThis is your hourly update.')\n    s.quit()\n    print('E sent.')\nschedule.every().hour.do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```",
	    "text": "Send an email every hour with the subject 'Hourly Update' Sending an email every hour with the subject 'Hourly Update'... ```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('hourlyupdate@gmail.com', 'hourl123456789012')\n    s.sendmail('hourlyupdate@gmail.com', 'hourlyupdate@gmail.com', 'Subject: Hourly Update\nThis is your hourly update.')\n    s.quit()\n    print('E sent.')\nschedule.every().hour.do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```"
	},
	{
	    "instruction": "Send an email every minute with the subject 'Minute Alert'",
	    "input": "Sending an email every minute with the subject 'Minute Alert'...",
	    "output": "```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('minutealert@gmail.com', 'minut123456789012')\n    s.sendmail('minutealert@gmail.com', 'minutealert@gmail.com', 'Subject: Minute Alert\nThis is your minute alert.')\n    s.quit()\n    print('E sent.')\nschedule.every().minute.do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```",
	    "text": "Send an email every minute with the subject 'Minute Alert' Sending an email every minute with the subject 'Minute Alert'... ```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('minutealert@gmail.com', 'minut123456789012')\n    s.sendmail('minutealert@gmail.com', 'minutealert@gmail.com', 'Subject: Minute Alert\nThis is your minute alert.')\n    s.quit()\n    print('E sent.')\nschedule.every().minute.do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```"
	},
	{
	    "instruction": "Send an email with the subject 'Short'",
	    "input": "Sending an email with the subject 'Short'...",
	    "output": "```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('shortsubject@gmail.com', 'short123456789012')\n    s.sendmail('shortsubject@gmail.com', 'shortsubject@gmail.com', 'Subject: Short\nContent.')\n    s.quit()\n    print('E sent.')\nschedule.every().day.at('03:46').do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```",
	    "text": "Send an email with the subject 'Short' Sending an email with the subject 'Short'... ```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('shortsubject@gmail.com', 'short123456789012')\n    s.sendmail('shortsubject@gmail.com', 'shortsubject@gmail.com', 'Subject: Short\nContent.')\n    s.quit()\n    print('E sent.')\nschedule.every().day.at('03:46').do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```"
	},
	{
	    "instruction": "Send an email every 10 seconds for testing",
	    "input": "Sending an email every 10 seconds for testing...",
	    "output": "```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('testemail@gmail.com', 'teste123456789012')\n    s.sendmail('testemail@gmail.com', 'testemail@gmail.com', 'Subject: Test\nThis is a test.')\n    s.quit()\n    print('E sent.')\nschedule.every(10).seconds.do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```",
	    "text": "Send an email every 10 seconds for testing Sending an email every 10 seconds for testing... ```python\nimport smtplib, schedule, time\ndef se():\n    s = smtplib.SMTP('smtp.gmail.com', 587)\n    s.starttls()\n    s.login('testemail@gmail.com', 'teste123456789012')\n    s.sendmail('testemail@gmail.com', 'testemail@gmail.com', 'Subject: Test\nThis is a test.')\n    s.quit()\n    print('E sent.')\nschedule.every(10).seconds.do(se)\nwhile True:\n    schedule.run_pending()\n    time.sleep(1)\n```"
	},
	{
	    "instruction": "Automate downloading new episodes of a podcast",
	    "input": "Automating podcast episode downloads...",
	    "output": "```python\nimport feedparser\nimport requests\nfeed = feedparser.parse('https://feed.example.com')\nlatest_episode = feed.entries[0]\nurl = latest_episode.enclosures[0].href\nr = requests.get(url)\nwith open('latest_episode.mp3', 'wb') as f:\n    f.write(r.content)\n```",
	    "text": "Automate downloading new episodes of a podcast Automating podcast episode downloads... ```python\nimport feedparser\nimport requests\nfeed = feedparser.parse('https://feed.example.com')\nlatest_episode = feed.entries[0]\nurl = latest_episode.enclosures[0].href\nr = requests.get(url)\nwith open('latest_episode.mp3', 'wb') as f:\n    f.write(r.content)\n```"
	},
	{
	    "instruction": "Automate file organization",
	    "input": "Automating file organization...",
	    "output": "```python\nimport os\nimport shutil\nfolder = 'path/to/folder'\nfor filename in os.listdir(folder):\n    file_path = os.path.join(folder, filename)\n    if os.path.isfile(file_path):\n        extension = filename.split('.')[-1]\n        dest_folder = os.path.join(folder, extension)\n        if not os.path.exists(dest_folder):\n            os.mkdir(dest_folder)\n        shutil.move(file_path, os.path.join(dest_folder, filename))\n```",
	    "text": "Automate file organization Automating file organization... ```python\nimport os\nimport shutil\nfolder = 'path/to/folder'\nfor filename in os.listdir(folder):\n    file_path = os.path.join(folder, filename)\n    if os.path.isfile(file_path):\n        extension = filename.split('.')[-1]\n        dest_folder = os.path.join(folder, extension)\n        if not os.path.exists(dest_folder):\n            os.mkdir(dest_folder)\n        shutil.move(file_path, os.path.join(dest_folder, filename))\n```"
	},
	{
	    "instruction": "Automate booking a doctor's appointment",
	    "input": "Automating doctor's appointment booking...",
	    "output": "```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://doctor-booking.com')\nsearch_box = driver.find_element_by_id('search')\nsearch_box.send_keys('General Physician')\nsearch_box.send_keys(Keys.RETURN)\nfirst_doctor = driver.find_element_by_class_name('doctor-name')\nfirst_doctor.click()\nbook_button = driver.find_element_by_id('book-appointment')\nbook_button.click()\n```",
	    "text": "Automate booking a doctor's appointment Automating doctor's appointment booking... ```python\nfrom selenium import webdriver\nfrom selenium.webdriver.common.keys import Keys\ndriver = webdriver.Chrome()\ndriver.get('https://doctor-booking.com')\nsearch_box = driver.find_element_by_id('search')\nsearch_box.send_keys('General Physician')\nsearch_box.send_keys(Keys.RETURN)\nfirst_doctor = driver.find_element_by_class_name('doctor-name')\nfirst_doctor.click()\nbook_button = driver.find_element_by_id('book-appointment')\nbook_button.click()\n```"
	},
	{
	    "instruction": "Automate the process of checking the weather forecast",
	    "input": "Automating weather forecast check...",
	    "output": "```python\nimport requests\nr = requests.get(f'http://api.weatherapi.com/v1/current.json?key=asdgfgdfsg241412sa&q=Poland')\nd = r.json()['current']\nprint(f\"{d['condition']['text']} {d['temp_c']}?C {d['wind_kph']}kph {d['humidity']}%\")\n```",
	    "text": "Automate the process of checking the weather forecast Automating weather forecast check... ```python\nimport requests\nr = requests.get(f'http://api.weatherapi.com/v1/current.json?key=asdgfgdfsg241412sa&q=Poland')\nd = r.json()['current']\nprint(f\"{d['condition']['text']} {d['temp_c']}?C {d['wind_kph']}kph {d['humidity']}%\")\n```"
	},
	{
	    "instruction": "Open a specific website",
	    "input": "Automating website opening...",
	    "output": "```python\nimport webbrowser\nwebbrowser.open('https://www.example.com')\n```",
	    "text": "Open a specific website Automating website opening... ```python\nimport webbrowser\nwebbrowser.open('https://www.example.com')\n```"
	},
	{
	    "instruction": "Run another Python script",
	    "input": "Automating Python script execution...",
	    "output": "```python\nimport subprocess\nsubprocess.run(['python', 'another_script.py'])\n```",
	    "text": "Run another Python script Automating Python script execution... ```python\nimport subprocess\nsubprocess.run(['python', 'another_script.py'])\n```"
	},
	{
	    "instruction": "Get metadata for file C:\\Documents\\report.pdf",
	    "input": "Getting file metadata...",
	    "output": "```python\nimport os\nfile_path = 'C:\\\\Documents\\\\report.pdf'\nfile_info = os.stat(file_path)\nprint(f'Size: {file_info.st_size} bytes, Last modified: {file_info.st_mtime}')\n```",
	    "text": "Get metadata for file C:\\Documents\\report.pdf Getting file metadata... ```python\nimport os\nfile_path = 'C:\\\\Documents\\\\report.pdf'\nfile_info = os.stat(file_path)\nprint(f'Size: {file_info.st_size} bytes, Last modified: {file_info.st_mtime}')\n```"
	},
	{
	    "instruction": "List directory tree",
	    "input": "",
	    "output": "```python\nimport os\ndef list_dir(root):\n    for root, dirs, files in os.walk(root):\n        level = root.replace(root, '').count(os.sep)\n        indent = ' ' * 4 * level\n        print(f'{indent}{os.path.basename(root)}/')\n        sub_indent = ' ' * 4 * (level + 1)\n        for f in files:\n            print(f'{sub_indent}{f}')\nlist_dir('path/to/folder')\n```",
	    "text": "List directory tree Listing directory tree... ```python\nimport os\ndef list_dir(root):\n    for root, dirs, files in os.walk(root):\n        level = root.replace(root, '').count(os.sep)\n        indent = ' ' * 4 * level\n        print(f'{indent}{os.path.basename(root)}/')\n        sub_indent = ' ' * 4 * (level + 1)\n        for f in files:\n            print(f'{sub_indent}{f}')\nlist_dir('path/to/folder')\n```"
	},
	{
	    "instruction": "List all text files in directory C:\\Documents",
	    "input": "Listing all text files in directory...",
	    "output": "```python\nimport os\nfolder = 'C:\\\\Documents'\ntext_files = [f for f in os.listdir(folder) if f.endswith('.txt')]\nprint(text_files)\n```",
	    "text": "List all text files in directory C:\\Documents Listing all text files in directory... ```python\nimport os\nfolder = 'C:\\\\Documents'\ntext_files = [f for f in os.listdir(folder) if f.endswith('.txt')]\nprint(text_files)\n```"
	},
	{
	    "instruction": "Delete all temporary files in C:\\Temp",
	    "input": "Deleting all temporary files...",
	    "output": "```python\nimport os\nimport glob\nfolder = 'C:\\\\Temp'\nfor tmp_file in glob.glob(f'{folder}\\\\*.tmp'):\n    os.remove(tmp_file)\n```",
	    "text": "Delete all temporary files in C:\\Temp Deleting all temporary files... ```python\nimport os\nimport glob\nfolder = 'C:\\\\Temp'\nfor tmp_file in glob.glob(f'{folder}\\\\*.tmp'):\n    os.remove(tmp_file)\n```"
	},
	{
	    "instruction": "Rename all JPEG files in D:\\Pictures",
	    "input": "Renaming all JPEG files...",
	    "output": "```python\nimport os\nfolder = 'D:\\\\Pictures'\ncounter = 1\nfor f in os.listdir(folder):\n    if f.endswith('.jpeg'):\n        os.rename(os.path.join(folder, f), os.path.join(folder, f'new_name_{counter}.jpeg'))\n        counter += 1\n```",
	    "text": "Rename all JPEG files in D:\\Pictures Renaming all JPEG files... ```python\nimport os\nfolder = 'D:\\\\Pictures'\ncounter = 1\nfor f in os.listdir(folder):\n    if f.endswith('.jpeg'):\n        os.rename(os.path.join(folder, f), os.path.join(folder, f'new_name_{counter}.jpeg'))\n        counter += 1\n```"
	},
	{
	    "instruction": "Zip all Python files in C:\\Dev\\PythonProjects",
	    "input": "Zipping all Python files...",
	    "output": "```python\nimport zipfile\nimport os\nfolder = 'C:\\\\Dev\\\\PythonProjects'\nwith zipfile.ZipFile('python_files.zip', 'w') as zipf:\n    for root, _, files in os.walk(folder):\n        for file in files:\n            if file.endswith('.p
